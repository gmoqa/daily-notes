{"version":3,"file":"main-legacy-DON0QWmt.js","sources":["../../../src/utils/state.ts","../../../src/utils/cache.ts","../../../src/utils/events.ts","../../../src/services/api.ts","../../../src/services/auth.ts","../../../src/services/notes.ts","../../../src/services/contexts.ts","../../../src/components/Calendar.ts","../../../src/components/Editor.ts","../../../src/components/Notifications.ts","../../../src/components/UI.ts","../../../src/main.ts"],"sourcesContent":["/**\n * Mini State Manager\n * Simple reactive state management without a framework\n */\n\nimport type { User, UserSettings, Context, Note } from '@/types'\n\ninterface AppState {\n  // User state\n  currentUser: User | null\n  userSettings: UserSettings\n\n  // Selection state\n  selectedContext: string | null\n  selectedDate: string | null\n\n  // Data state\n  contexts: Context[]\n  notes: Note[]\n  notesWithDates: string[]\n\n  // Calendar state\n  currentCalendarMonth: number\n  currentCalendarYear: number\n\n  // UI state\n  isLoggingOut: boolean\n  syncStatus: { pending: number; syncing: boolean }\n\n  // Time\n  serverTimeOffset: number\n}\n\ntype StateKey = keyof AppState\ntype StateListener<K extends StateKey> = (newValue: AppState[K], oldValue: AppState[K]) => void\ntype WildcardListener = (key: StateKey, newValue: any, oldValue: any) => void\ntype ComputedFn<T> = (state: AppState) => T\n\nclass StateManager {\n  private _state: AppState\n  private _listeners: Map<StateKey | '*', Set<StateListener<any> | WildcardListener>>\n  private _computed: Map<string, ComputedFn<any>>\n\n  constructor() {\n    this._state = {\n      // User state\n      currentUser: null,\n      userSettings: {\n        theme: 'dark',\n        weekStart: 0,\n        timezone: 'UTC',\n        dateFormat: 'DD-MM-YY',\n        uniqueContextMode: false,\n        showBreadcrumb: false,\n        showMarkdownEditor: false,\n        hideNewContextButton: false\n      },\n\n      // Selection state\n      selectedContext: null,\n      selectedDate: null,\n\n      // Data state\n      contexts: [],\n      notes: [],\n      notesWithDates: [],\n\n      // Calendar state\n      currentCalendarMonth: new Date().getMonth(),\n      currentCalendarYear: new Date().getFullYear(),\n\n      // UI state\n      isLoggingOut: false,\n      syncStatus: { pending: 0, syncing: false },\n\n      // Time\n      serverTimeOffset: 0\n    }\n\n    this._listeners = new Map()\n    this._computed = new Map()\n  }\n\n  /**\n   * Get state value\n   */\n  get<K extends StateKey>(key: K): AppState[K]\n  get(key: string): any {\n    if (this._computed.has(key)) {\n      return this._computed.get(key)!(this._state)\n    }\n    return this._state[key as StateKey]\n  }\n\n  /**\n   * Set state value and notify listeners\n   */\n  set<K extends StateKey>(key: K, value: AppState[K]): void {\n    const oldValue = this._state[key]\n    if (oldValue === value) return\n\n    this._state[key] = value\n    this._notify(key, value, oldValue)\n  }\n\n  /**\n   * Update multiple state values at once\n   */\n  update(changes: Partial<AppState>): void {\n    Object.entries(changes).forEach(([key, value]) => {\n      this.set(key as StateKey, value)\n    })\n  }\n\n  /**\n   * Subscribe to state changes\n   */\n  subscribe<K extends StateKey>(key: K, callback: StateListener<K>): () => void\n  subscribe(key: '*', callback: WildcardListener): () => void\n  subscribe(key: StateKey | '*', callback: any): () => void {\n    if (!this._listeners.has(key)) {\n      this._listeners.set(key, new Set())\n    }\n    this._listeners.get(key)!.add(callback)\n\n    // Return unsubscribe function\n    return () => {\n      const listeners = this._listeners.get(key)\n      if (listeners) {\n        listeners.delete(callback)\n      }\n    }\n  }\n\n  /**\n   * Subscribe to multiple keys\n   */\n  subscribeMany(keys: StateKey[], callback: WildcardListener): () => void {\n    const unsubscribers = keys.map(key => this.subscribe(key, callback as any))\n    return () => unsubscribers.forEach(unsub => unsub())\n  }\n\n  /**\n   * Define computed property\n   */\n  computed<T>(key: string, fn: ComputedFn<T>): void {\n    this._computed.set(key, fn)\n  }\n\n  /**\n   * Get entire state (for debugging)\n   */\n  getState(): AppState {\n    return { ...this._state }\n  }\n\n  /**\n   * Notify listeners of change\n   */\n  private _notify<K extends StateKey>(key: K, newValue: AppState[K], oldValue: AppState[K]): void {\n    const listeners = this._listeners.get(key)\n    if (listeners) {\n      listeners.forEach(callback => {\n        try {\n          ;(callback as StateListener<K>)(newValue, oldValue)\n        } catch (error) {\n          console.error(`Error in state listener for \"${key}\":`, error)\n        }\n      })\n    }\n\n    // Notify wildcard listeners (*)\n    const wildcardListeners = this._listeners.get('*')\n    if (wildcardListeners) {\n      wildcardListeners.forEach(callback => {\n        try {\n          ;(callback as WildcardListener)(key, newValue as any, oldValue)\n        } catch (error) {\n          console.error('Error in wildcard state listener:', error)\n        }\n      })\n    }\n  }\n}\n\n// Create singleton instance\nexport const state = new StateManager()\n\n// Setup computed properties\nstate.computed('today', (s) => {\n  const timezone = s.userSettings.timezone || 'UTC'\n  const now = new Date(Date.now() + s.serverTimeOffset)\n\n  const formatter = new Intl.DateTimeFormat('en-US', {\n    timeZone: timezone,\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit'\n  })\n\n  const parts = formatter.formatToParts(now)\n  const year = parts.find(p => p.type === 'year')!.value\n  const month = parts.find(p => p.type === 'month')!.value\n  const day = parts.find(p => p.type === 'day')!.value\n\n  return `${year}-${month}-${day}`\n})\n\n// Debug helper\nif (typeof window !== 'undefined') {\n  ;(window as any).__STATE__ = state\n}\n","/**\n * Local Cache Module\n * IndexedDB-based offline storage for notes and contexts\n */\n\nimport type { Note, Context } from '@/types'\n\ninterface CachedNote extends Note {\n  id: string\n  _localTimestamp: number\n  _cachedAt: number\n}\n\ninterface CachedContext extends Context {\n  _localTimestamp: number\n}\n\nexport class LocalCache {\n  private db: IDBDatabase | null = null\n  private dbName = 'DailyNotesDB'\n  private version = 1\n\n  // Batch write optimization\n  private pendingWrites = new Map<string, CachedNote>()\n  private writeTimer: number | null = null\n  private readonly BATCH_DELAY = 500 // ms\n\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version)\n\n      request.onerror = () => reject(request.error)\n\n      request.onsuccess = () => {\n        this.db = request.result\n        resolve()\n      }\n\n      request.onupgradeneeded = (e) => {\n        const db = (e.target as IDBOpenDBRequest).result\n\n        if (!db.objectStoreNames.contains('notes')) {\n          db.createObjectStore('notes', { keyPath: 'id' })\n        }\n\n        if (!db.objectStoreNames.contains('contexts')) {\n          db.createObjectStore('contexts', { keyPath: 'id' })\n        }\n      }\n    })\n  }\n\n  async saveNote(note: Note): Promise<void> {\n    if (!this.db) return\n\n    const id = `${note.context}-${note.date}`\n\n    // Add to pending writes (batching)\n    this.pendingWrites.set(id, {\n      ...note,\n      id,\n      _localTimestamp: Date.now(),\n      _cachedAt: Date.now(),\n      updated_at: note.updated_at || new Date().toISOString()\n    })\n\n    // Schedule batch write\n    this.scheduleBatchWrite()\n  }\n\n  private scheduleBatchWrite(): void {\n    if (this.writeTimer) {\n      clearTimeout(this.writeTimer)\n    }\n\n    this.writeTimer = window.setTimeout(() => {\n      this.flushPendingWrites()\n    }, this.BATCH_DELAY)\n  }\n\n  private async flushPendingWrites(): Promise<void> {\n    if (!this.db || this.pendingWrites.size === 0) return\n\n    const notesToWrite = Array.from(this.pendingWrites.values())\n    this.pendingWrites.clear()\n\n    const tx = this.db.transaction(['notes'], 'readwrite')\n    const store = tx.objectStore('notes')\n\n    notesToWrite.forEach(note => {\n      store.put(note)\n    })\n\n    return new Promise((resolve, reject) => {\n      tx.oncomplete = () => {\n        console.log(`[Cache] Batch wrote ${notesToWrite.length} note(s)`)\n        resolve()\n      }\n      tx.onerror = () => reject(tx.error)\n    })\n  }\n\n  // Force immediate write (for critical operations)\n  async saveNoteImmediate(note: Note): Promise<void> {\n    if (!this.db) return\n\n    const tx = this.db.transaction(['notes'], 'readwrite')\n    const store = tx.objectStore('notes')\n    const id = `${note.context}-${note.date}`\n\n    store.put({\n      ...note,\n      id,\n      _localTimestamp: Date.now(),\n      _cachedAt: Date.now(),\n      updated_at: note.updated_at || new Date().toISOString()\n    })\n\n    return new Promise((resolve, reject) => {\n      tx.oncomplete = () => resolve()\n      tx.onerror = () => reject(tx.error)\n    })\n  }\n\n  async getNote(context: string, date: string): Promise<CachedNote | null> {\n    if (!this.db) return null\n\n    const tx = this.db.transaction(['notes'], 'readonly')\n    const store = tx.objectStore('notes')\n    const id = `${context}-${date}`\n\n    return new Promise((resolve) => {\n      const request = store.get(id)\n      request.onsuccess = () => resolve(request.result || null)\n      request.onerror = () => resolve(null)\n    })\n  }\n\n  async saveNotes(notes: Note[]): Promise<void> {\n    if (!this.db) return\n\n    const tx = this.db.transaction(['notes'], 'readwrite')\n    const store = tx.objectStore('notes')\n    const now = Date.now()\n\n    notes.forEach(note => {\n      const id = `${note.context}-${note.date}`\n      store.put({\n        ...note,\n        id,\n        _localTimestamp: now,\n        _cachedAt: now,\n        updated_at: note.updated_at || new Date().toISOString()\n      })\n    })\n\n    return new Promise((resolve, reject) => {\n      tx.oncomplete = () => resolve()\n      tx.onerror = () => reject(tx.error)\n    })\n  }\n\n  async getNotesByContext(context: string): Promise<CachedNote[]> {\n    if (!this.db) return []\n\n    const tx = this.db.transaction(['notes'], 'readonly')\n    const store = tx.objectStore('notes')\n\n    return new Promise((resolve) => {\n      const request = store.getAll()\n      request.onsuccess = () => {\n        const allNotes = request.result || []\n        resolve(allNotes.filter(n => n.context === context))\n      }\n      request.onerror = () => resolve([])\n    })\n  }\n\n  async saveContexts(contexts: Context[] | null | undefined): Promise<void> {\n    if (!this.db) return\n\n    // Handle null/undefined contexts\n    if (!contexts || !Array.isArray(contexts)) {\n      console.warn('[Cache] saveContexts called with invalid contexts:', contexts)\n      return\n    }\n\n    const tx = this.db.transaction(['contexts'], 'readwrite')\n    const store = tx.objectStore('contexts')\n\n    contexts.forEach(ctx => {\n      store.put({\n        ...ctx,\n        _localTimestamp: Date.now()\n      })\n    })\n\n    return new Promise((resolve, reject) => {\n      tx.oncomplete = () => resolve()\n      tx.onerror = () => reject(tx.error)\n    })\n  }\n\n  async getContexts(): Promise<CachedContext[]> {\n    if (!this.db) return []\n\n    const tx = this.db.transaction(['contexts'], 'readonly')\n    const store = tx.objectStore('contexts')\n\n    return new Promise((resolve) => {\n      const request = store.getAll()\n      request.onsuccess = () => resolve(request.result || [])\n      request.onerror = () => resolve([])\n    })\n  }\n\n  async deleteNote(context: string, date: string): Promise<void> {\n    if (!this.db) return\n\n    const id = `${context}-${date}`\n\n    // Remove from pending writes if it's there\n    this.pendingWrites.delete(id)\n\n    const tx = this.db.transaction(['notes'], 'readwrite')\n    const store = tx.objectStore('notes')\n\n    store.delete(id)\n\n    return new Promise((resolve, reject) => {\n      tx.oncomplete = () => {\n        console.log(`[Cache] Deleted note: ${id}`)\n        resolve()\n      }\n      tx.onerror = () => reject(tx.error)\n    })\n  }\n\n  async clear(): Promise<void> {\n    if (!this.db) return\n\n    const tx = this.db.transaction(['notes', 'contexts'], 'readwrite')\n\n    tx.objectStore('notes').clear()\n    tx.objectStore('contexts').clear()\n\n    return new Promise((resolve, reject) => {\n      tx.oncomplete = () => resolve()\n      tx.onerror = () => reject(tx.error)\n    })\n  }\n}\n\n// Create singleton instance\nexport const cache = new LocalCache()\n","/**\n * Event Bus\n * Central event system for app-wide communication\n */\n\n// Event detail types\ninterface NoteEventDetail {\n  context: string\n  date: string\n  content?: string\n}\n\ninterface SyncStatusDetail {\n  pending: number\n  syncing: boolean\n}\n\ninterface ErrorEventDetail {\n  message: string\n  error?: Error\n}\n\ninterface SuccessEventDetail {\n  message: string\n}\n\n// Event type mapping\ninterface EventTypeMap {\n  // Notes\n  'note-cached': NoteEventDetail\n  'note-loaded': NoteEventDetail\n  'note-saved': NoteEventDetail\n  'note-changed': NoteEventDetail\n\n  // Sync\n  'sync-status': SyncStatusDetail\n  'operation-synced': { operationId: string }\n  'sync-error': ErrorEventDetail\n\n  // Context\n  'context-changed': { context: string | null }\n  'contexts-loaded': { contexts: any[] }\n\n  // Date\n  'date-changed': { date: string }\n\n  // UI\n  'show-error': ErrorEventDetail\n  'show-success': SuccessEventDetail\n}\n\ntype EventName = keyof EventTypeMap\ntype EventDetail<T extends EventName> = EventTypeMap[T]\n\nclass EventBus extends EventTarget {\n  /**\n   * Emit a typed event\n   */\n  emit<T extends EventName>(eventName: T, detail: EventDetail<T>): void {\n    this.dispatchEvent(new CustomEvent(eventName, { detail }))\n  }\n\n  /**\n   * Listen to a typed event\n   */\n  on<T extends EventName>(\n    eventName: T,\n    callback: (event: CustomEvent<EventDetail<T>>) => void\n  ): () => void {\n    const listener = callback as EventListener\n    this.addEventListener(eventName, listener)\n    return () => this.removeEventListener(eventName, listener)\n  }\n\n  /**\n   * Listen to an event once\n   */\n  once<T extends EventName>(\n    eventName: T,\n    callback: (event: CustomEvent<EventDetail<T>>) => void\n  ): () => void {\n    const listener = callback as EventListener\n    const handler = (event: Event) => {\n      listener(event)\n      this.removeEventListener(eventName, handler)\n    }\n    this.addEventListener(eventName, handler)\n    return () => this.removeEventListener(eventName, handler)\n  }\n}\n\nexport const events = new EventBus()\n\n// Event names for easy reference and autocomplete\nexport const EVENT = {\n  // Notes\n  NOTE_CACHED: 'note-cached' as const,\n  NOTE_LOADED: 'note-loaded' as const,\n  NOTE_SAVED: 'note-saved' as const,\n  NOTE_CHANGED: 'note-changed' as const,\n\n  // Sync\n  SYNC_STATUS: 'sync-status' as const,\n  OPERATION_SYNCED: 'operation-synced' as const,\n  SYNC_ERROR: 'sync-error' as const,\n\n  // Context\n  CONTEXT_CHANGED: 'context-changed' as const,\n  CONTEXTS_LOADED: 'contexts-loaded' as const,\n\n  // Date\n  DATE_CHANGED: 'date-changed' as const,\n\n  // UI\n  SHOW_ERROR: 'show-error' as const,\n  SHOW_SUCCESS: 'show-success' as const\n} as const\n","/**\n * API Client Module\n * Handles all backend communication\n */\n\nimport { state } from '@/utils/state'\nimport { events, EVENT } from '@/utils/events'\nimport type { User, Context, Note, UserSettings } from '@/types'\n\ninterface AuthResponse {\n  authenticated: boolean\n  user?: User\n}\n\ninterface LoginResponse {\n  success: boolean\n  user?: User\n  error?: string\n}\n\ninterface NoteResponse {\n  note: Note\n}\n\ninterface NotesListResponse {\n  notes: Note[]\n  total?: number\n}\n\ninterface ContextsResponse {\n  contexts: Context[]\n}\n\ninterface ServerTimeResponse {\n  serverTime: string\n  offset: number\n}\n\nexport class APIClient {\n  // Base URL is empty string since we use relative paths\n  // private baseUrl = ''\n\n  async request<T = any>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    try {\n      const response = await fetch(endpoint, {\n        ...options,\n        headers: {\n          ...options.headers,\n          'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n      })\n\n      if (!response.ok) {\n        const data = await response.json().catch(() => ({})) as { error?: string }\n\n        if (response.status === 401 || response.status === 403) {\n          if (!state.get('isLoggingOut')) {\n            // Check if this is a note-related request\n            const isNoteRequest = endpoint.includes('/api/notes')\n            const message = isNoteRequest\n              ? 'Session expired. Your notes are saved locally and will sync when you sign in again.'\n              : 'Session expired. Please login again.'\n\n            events.emit(EVENT.SHOW_ERROR, { message })\n            events.emit('session-expired' as any, { isNoteRequest })\n          }\n          state.set('currentUser', null)\n          throw new Error('Session expired')\n        }\n\n        throw new Error(data.error || `Request failed with status ${response.status}`)\n      }\n\n      return await response.json()\n    } catch (error) {\n      if (!state.get('isLoggingOut')) {\n        // Don't show error notification if it's already been handled\n        if (error instanceof Error && !error.message.includes('Session expired')) {\n          events.emit(EVENT.SHOW_ERROR, {\n            message: error.message || 'An error occurred'\n          })\n        }\n      }\n      throw error\n    }\n  }\n\n  // Auth endpoints\n  async checkAuth(): Promise<AuthResponse> {\n    try {\n      const response = await fetch('/api/auth/me')\n      const data = await response.json()\n      return data\n    } catch (error) {\n      console.error('Auth check failed:', error)\n      return { authenticated: false }\n    }\n  }\n\n  async login(accessToken: string, expiresIn?: number): Promise<LoginResponse> {\n    return await this.request<LoginResponse>('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        access_token: accessToken,\n        expires_in: expiresIn || 3600\n      })\n    })\n  }\n\n  async loginWithCode(code: string): Promise<LoginResponse> {\n    return await this.request<LoginResponse>('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ code })\n    })\n  }\n\n  async logout(): Promise<void> {\n    await this.request('/api/auth/logout', {\n      method: 'POST'\n    })\n  }\n\n  // Contexts endpoints\n  async getContexts(): Promise<ContextsResponse> {\n    return await this.request<ContextsResponse>('/api/contexts')\n  }\n\n  async createContext(data: { name: string; color?: string }): Promise<Context> {\n    return await this.request<Context>('/api/contexts', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async updateContext(id: string, data: { name?: string; color?: string }): Promise<Context> {\n    return await this.request<Context>(`/api/contexts/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async deleteContext(id: string): Promise<void> {\n    await this.request(`/api/contexts/${id}`, {\n      method: 'DELETE'\n    })\n  }\n\n  // Notes endpoints\n  async getNote(context: string, date: string): Promise<NoteResponse> {\n    return await this.request<NoteResponse>(\n      `/api/notes?context=${encodeURIComponent(context)}&date=${date}`\n    )\n  }\n\n  async saveNote(data: { context: string; date: string; content: string; updated_at?: string }): Promise<Note> {\n    return await this.request<Note>('/api/notes', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async getNotesList(context: string, limit = 50, offset = 0): Promise<NotesListResponse> {\n    return await this.request<NotesListResponse>(\n      `/api/notes/list?context=${encodeURIComponent(context)}&limit=${limit}&offset=${offset}`\n    )\n  }\n\n  async deleteNote(context: string, date: string): Promise<void> {\n    const encodedContext = encodeURIComponent(context)\n    const encodedDate = encodeURIComponent(date)\n\n    await this.request(`/api/notes/${encodedContext}/${encodedDate}`, {\n      method: 'DELETE'\n    })\n  }\n\n  // Settings endpoints\n  async updateSettings(settings: Partial<UserSettings>): Promise<UserSettings> {\n    return await this.request<UserSettings>('/api/settings', {\n      method: 'PUT',\n      body: JSON.stringify(settings)\n    })\n  }\n\n  // Time sync\n  async getServerTime(timezone: string): Promise<ServerTimeResponse> {\n    const response = await fetch(`/api/time?timezone=${encodeURIComponent(timezone)}`)\n    return await response.json()\n  }\n}\n\nexport const api = new APIClient()\n","/**\n * Authentication Module\n * Handles Google OAuth and session management\n */\n\nimport { state } from '@/utils/state'\nimport { api } from './api'\nimport { events, EVENT } from '@/utils/events'\n\n// Google OAuth types\ndeclare global {\n  interface Window {\n    google?: {\n      accounts: {\n        oauth2: {\n          initCodeClient: (config: {\n            client_id: string\n            scope: string\n            ux_mode: string\n            callback: (response: { code?: string; error?: string }) => void\n          }) => {\n            requestCode: () => void\n          }\n        }\n      }\n    }\n  }\n}\n\ninterface CodeClient {\n  requestCode: () => void\n}\n\ninterface AuthCodeResponse {\n  code?: string\n  error?: string\n}\n\nclass AuthManager {\n  private codeClient: CodeClient | null = null\n  private initializationPromise: Promise<void> | null = null\n\n  async checkAuth(): Promise<boolean> {\n    const data = await api.checkAuth()\n\n    if (data.authenticated && data.user) {\n      state.update({\n        currentUser: data.user,\n        userSettings: data.user.settings || {\n          theme: 'dark',\n          weekStart: 0,\n          timezone: 'UTC',\n          dateFormat: 'DD-MM-YY',\n          uniqueContextMode: false,\n          showBreadcrumb: false,\n          showMarkdownEditor: false,\n          hideNewContextButton: false\n        }\n      })\n      return true\n    }\n\n    return false\n  }\n\n  async initGoogleClient(clientId: string): Promise<void> {\n    // Return existing initialization promise if already in progress\n    if (this.initializationPromise) {\n      return this.initializationPromise\n    }\n\n    // Return immediately if already initialized\n    if (this.codeClient) {\n      return Promise.resolve()\n    }\n\n    // Create initialization promise\n    this.initializationPromise = new Promise((resolve, reject) => {\n      // Wait for Google API to be loaded\n      const checkGoogleLoaded = () => {\n        if (window.google?.accounts?.oauth2) {\n          try {\n            // Use initCodeClient to get authorization code (which provides refresh token)\n            this.codeClient = window.google.accounts.oauth2.initCodeClient({\n              client_id: clientId,\n              scope: 'https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/userinfo.email',\n              ux_mode: 'popup',\n              callback: (response) => this.handleAuthCodeResponse(response)\n            })\n            console.log('[AUTH] Google code client initialized successfully')\n            resolve()\n          } catch (error) {\n            console.error('[AUTH] Failed to initialize Google client:', error)\n            reject(error)\n          }\n        } else {\n          // Retry after a short delay\n          setTimeout(checkGoogleLoaded, 100)\n        }\n      }\n\n      // Start checking\n      checkGoogleLoaded()\n\n      // Set a timeout to prevent infinite waiting\n      setTimeout(() => {\n        if (!this.codeClient) {\n          reject(new Error('Google API failed to load within timeout'))\n        }\n      }, 10000) // 10 second timeout\n    })\n\n    return this.initializationPromise\n  }\n\n  async handleAuthCodeResponse(response: AuthCodeResponse): Promise<void> {\n    const loader = document.getElementById('landing-loader')\n\n    if (response.error) {\n      if (loader) loader.classList.remove('visible')\n      events.emit(EVENT.SHOW_ERROR, {\n        message: 'OAuth failed: ' + response.error\n      })\n      return\n    }\n\n    if (!response.code) {\n      if (loader) loader.classList.remove('visible')\n      events.emit(EVENT.SHOW_ERROR, {\n        message: 'OAuth failed: No code received'\n      })\n      return\n    }\n\n    try {\n      // Send authorization code to backend to exchange for tokens\n      const data = await api.loginWithCode(response.code)\n\n      if (data.success && data.user) {\n        console.log('[AUTH] Login successful, updating state')\n        console.log('[AUTH] Received hasNoContexts:', (data.user as any).hasNoContexts)\n\n        state.update({\n          currentUser: data.user,\n          userSettings: data.user.settings || {\n            theme: 'dark',\n            weekStart: 0,\n            timezone: 'UTC',\n            dateFormat: 'DD-MM-YY',\n            uniqueContextMode: false,\n            showBreadcrumb: false,\n            showMarkdownEditor: false,\n            hideNewContextButton: false\n          }\n        })\n\n        console.log('[AUTH] Emitting auth-success event')\n        // Emit event for UI to react (loader will be hidden by showApp)\n        events.emit('auth-success' as any, {})\n      } else {\n        if (loader) loader.classList.remove('visible')\n        events.emit(EVENT.SHOW_ERROR, {\n          message: data.error || 'Login failed'\n        })\n      }\n    } catch (error) {\n      if (loader) loader.classList.remove('visible')\n      const message = error instanceof Error ? error.message : 'Unknown error'\n      events.emit(EVENT.SHOW_ERROR, {\n        message: 'Login failed: ' + message\n      })\n    }\n  }\n\n  async signIn(): Promise<void> {\n    // Show loading indicator immediately\n    const loader = document.getElementById('landing-loader')\n    if (loader) loader.classList.add('visible')\n\n    try {\n      // Wait for initialization to complete if not already done\n      await this.initializationPromise\n\n      if (!this.codeClient) {\n        throw new Error('Google client not initialized')\n      }\n\n      // Request authorization code (will trigger popup)\n      this.codeClient.requestCode()\n    } catch (error) {\n      console.error('[AUTH] Sign in failed:', error)\n      if (loader) loader.classList.remove('visible')\n      events.emit(EVENT.SHOW_ERROR, {\n        message: 'Failed to initialize Google sign-in. Please refresh the page.'\n      })\n    }\n  }\n\n  signOut(): void {\n    console.log('[AUTH] Starting logout...')\n\n    // Call logout endpoint (don't wait for response)\n    fetch('/api/auth/logout', {\n      method: 'POST',\n      credentials: 'same-origin'\n    })\n      .then(() => {\n        console.log('[AUTH] Logout endpoint called')\n      })\n      .catch(err => {\n        console.error('[AUTH] Logout endpoint error:', err)\n      })\n\n    // Clear localStorage and sessionStorage\n    console.log('[AUTH] Clearing storage...')\n    try {\n      localStorage.clear()\n      sessionStorage.clear()\n    } catch (e) {\n      console.error('[AUTH] Storage clear error:', e)\n    }\n\n    // Force reload immediately\n    console.log('[AUTH] Forcing reload...')\n    setTimeout(() => {\n      window.location.href = '/'\n      // Fallback in case href doesn't work\n      setTimeout(() => window.location.reload(), 100)\n    }, 50)\n  }\n\n  async clearAllCaches(): Promise<void> {\n    try {\n      // Clear IndexedDB\n      const dbName = 'DailyNotesDB'\n      const deleteRequest = indexedDB.deleteDatabase(dbName)\n\n      await new Promise<void>((resolve) => {\n        deleteRequest.onsuccess = () => {\n          console.log('[AUTH] IndexedDB cleared')\n          resolve()\n        }\n        deleteRequest.onerror = () => {\n          console.warn('[AUTH] Failed to clear IndexedDB')\n          resolve() // Continue even if this fails\n        }\n      })\n\n      // Clear all Service Worker caches\n      if ('caches' in window) {\n        const cacheNames = await caches.keys()\n        await Promise.all(\n          cacheNames.map(cacheName => {\n            console.log('[AUTH] Deleting cache:', cacheName)\n            return caches.delete(cacheName)\n          })\n        )\n        console.log('[AUTH] All Service Worker caches cleared')\n      }\n\n      // Clear localStorage and sessionStorage\n      localStorage.clear()\n      sessionStorage.clear()\n      console.log('[AUTH] Storage cleared')\n    } catch (error) {\n      console.error('[AUTH] Error clearing caches:', error)\n      // Don't throw - we still want to complete logout\n    }\n  }\n}\n\nexport const auth = new AuthManager()\n\n// Expose auth functions globally for onclick handlers in HTML\nif (typeof window !== 'undefined') {\n  (window as any).signInWithGoogle = () => auth.signIn()\n}\n","/**\n * Notes Module\n * Handles note loading, saving, and listing\n */\n\nimport { state } from '@/utils/state'\nimport { api } from './api'\nimport { cache } from '@/utils/cache'\nimport { events, EVENT } from '@/utils/events'\nimport type { Note } from '@/types'\n\nclass NotesManager {\n  private saveTimeout: number | null = null\n  private currentNoteContent = ''\n  private currentLoadToken = 0 // Token to cancel old load operations\n  private currentSelectToken = 0 // Token to cancel old date selection operations\n\n  async loadNote(context: string, date: string): Promise<Note | null> {\n    if (!context || !date) {\n      return null\n    }\n\n    // Increment token to cancel any previous load operations\n    const loadToken = ++this.currentLoadToken\n    console.log(`[Notes] loadNote started - token: ${loadToken}, context: ${context}, date: ${date}`)\n\n    // Try local cache first (instant load)\n    const cachedNote = await cache.getNote(context, date)\n\n    // Validate token before emitting cached content\n    if (loadToken !== this.currentLoadToken) {\n      console.log(`[Notes] Load cancelled (cache) - token ${loadToken} is stale`)\n      return null\n    }\n\n    if (cachedNote && cachedNote.content) {\n      // Only emit if cache has actual content\n      this.currentNoteContent = cachedNote.content\n      events.emit(EVENT.NOTE_LOADED, {\n        context,\n        date,\n        content: this.currentNoteContent\n      })\n    } else {\n      // No cached note or empty content - show blank editor immediately\n      this.currentNoteContent = ''\n      events.emit(EVENT.NOTE_LOADED, {\n        context,\n        date,\n        content: ''\n      })\n    }\n\n    // Then load from server in background\n    try {\n      const { note } = await api.getNote(context, date)\n\n      // Validate token before applying server data\n      if (loadToken !== this.currentLoadToken) {\n        console.log(`[Notes] Load cancelled (server) - token ${loadToken} is stale`)\n        return null\n      }\n\n      // Determine which version is more recent\n      const serverUpdatedAt = note.updated_at ? new Date(note.updated_at).getTime() : 0\n      const cachedUpdatedAt = cachedNote?.updated_at ? new Date(cachedNote.updated_at).getTime() : 0\n\n      // Only update if server has newer content OR cache is empty\n      const shouldUpdateFromServer =\n        !cachedNote ||\n        serverUpdatedAt > cachedUpdatedAt ||\n        (note.content && !cachedNote.content)\n\n      if (shouldUpdateFromServer) {\n        this.currentNoteContent = note.content || ''\n\n        // Update cache with server data\n        await cache.saveNote({\n          ...note,\n          context,\n          date,\n          content: note.content,\n          updated_at: note.updated_at\n        })\n\n        // Only emit if content actually changed\n        if (!cachedNote || cachedNote.content !== note.content) {\n          events.emit(EVENT.NOTE_LOADED, {\n            context,\n            date,\n            content: this.currentNoteContent\n          })\n        }\n      } else {\n        console.log('[Notes] Cache is newer than server, keeping cached version')\n      }\n\n      return note\n    } catch (error) {\n      // Validate token before handling error\n      if (loadToken !== this.currentLoadToken) {\n        console.log(`[Notes] Load cancelled (error) - token ${loadToken} is stale`)\n        return null\n      }\n\n      // If cached version exists, user already sees it\n      if (!cachedNote) {\n        console.error('Failed to load note:', error)\n        events.emit(EVENT.SHOW_ERROR, {\n          message: 'Failed to load note. Working offline.'\n        })\n      } else {\n        console.warn('[Notes] Server unavailable, using cached version')\n      }\n      return cachedNote\n    }\n  }\n\n  async saveNote(context: string, date: string, content: string): Promise<void> {\n    if (!context || !date) return\n\n    console.log(`[Notes] saveNote called - context: ${context}, date: ${date}, content length: ${content.length}`)\n\n    const now = new Date().toISOString()\n    const note = {\n      context,\n      date,\n      content,\n      updated_at: now\n    }\n\n    // 1. Save to local cache immediately (optimistic)\n    await cache.saveNote(note as Note)\n    this.currentNoteContent = content\n\n    console.log(`[Notes] Saved to cache and updated currentNoteContent`)\n\n    events.emit(EVENT.NOTE_SAVED, { context, date, content })\n\n    // 2. Update note in the list (update content, keep position)\n    this.updateNoteInList(context, date, content)\n\n    // 3. Sync to server immediately (backend will handle Drive sync)\n    console.log(`[Notes] Syncing to server - content length: ${content.length}`)\n    try {\n      await api.saveNote({ context, date, content, updated_at: now })\n      console.log(`[Notes] Successfully synced to server`)\n    } catch (error) {\n      console.error('[Notes] Failed to sync to server:', error)\n      // Note is still saved locally in cache, will retry on next app load\n    }\n  }\n\n  async loadNotesList(context: string, limit = 50, offset = 0): Promise<Note[]> {\n    if (!context) {\n      state.update({\n        notes: [],\n        notesWithDates: []\n      })\n      return []\n    }\n\n    try {\n      const data = await api.getNotesList(context, limit, offset)\n      const serverNotes = data.notes || []\n\n      // Get cached notes from IndexedDB for this context\n      const cachedNotes = await cache.getNotesByContext(context)\n\n      // Merge: prioritize server notes, but include cached notes not on server\n      const noteMap = new Map<string, Note>()\n\n      // Add all server notes first (authoritative)\n      serverNotes.forEach(note => {\n        noteMap.set(note.date, note)\n      })\n\n      // Add cached notes that don't exist on server (local-only or pending sync)\n      cachedNotes.forEach(note => {\n        if (!noteMap.has(note.date)) {\n          noteMap.set(note.date, note)\n        }\n      })\n\n      // Convert back to array and sort by date (newest first)\n      const mergedNotes = Array.from(noteMap.values()).sort((a, b) => {\n        return b.date.localeCompare(a.date)\n      })\n\n      const notesWithDates = mergedNotes.map(note => note.date)\n\n      state.update({\n        notes: mergedNotes,\n        notesWithDates\n      })\n\n      return mergedNotes\n    } catch (error) {\n      console.error('Failed to load notes list:', error)\n      return []\n    }\n  }\n\n  async refreshNotesList(context: string): Promise<void> {\n    await this.loadNotesList(context)\n  }\n\n  updateNoteInList(context: string, date: string, content: string): void {\n    const notes = state.get('notes')\n\n    // Find and update the note\n    const updatedNotes = notes.map(note => {\n      if (note.date === date && note.context === context) {\n        return {\n          ...note,\n          content: content,\n          updated_at: new Date().toISOString()\n        }\n      }\n      return note\n    })\n\n    // Update state\n    state.set('notes', updatedNotes)\n  }\n\n  ensureNoteInList(context: string, date: string): void {\n    const notes = state.get('notes')\n    const notesWithDates = state.get('notesWithDates')\n\n    // Check if note already exists in the list\n    const noteExists = notes.some(note => note.date === date)\n\n    if (!noteExists) {\n      // Create a placeholder note in the list\n      const newNote: Note = {\n        id: `temp-${context}-${date}`,\n        user_id: state.get('currentUser')?.id || '',\n        context: context,\n        date: date,\n        content: '',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }\n\n      // Add to notes list and sort by date (newest first)\n      const updatedNotes = [...notes, newNote].sort((a, b) => {\n        return b.date.localeCompare(a.date)\n      })\n\n      // Add to dates list\n      const updatedNotesWithDates = [...notesWithDates, date]\n\n      // Update state\n      state.update({\n        notes: updatedNotes,\n        notesWithDates: updatedNotesWithDates\n      })\n    }\n  }\n\n  handleNoteInput(content: string): void {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout)\n    }\n\n    // Update current content IMMEDIATELY to track user input\n    this.currentNoteContent = content\n\n    // Capture current context and date at the time of input\n    const capturedContext = state.get('selectedContext')\n    const capturedDate = state.get('selectedDate')\n\n    if (!capturedContext || !capturedDate) return\n\n    // Debounce save - reduced from 1000ms to 500ms for better UX\n    this.saveTimeout = window.setTimeout(() => {\n      // Re-validate that context and date haven't changed\n      const currentContext = state.get('selectedContext')\n      const currentDate = state.get('selectedDate')\n\n      // Only save if context/date haven't changed\n      // We don't check content anymore because currentNoteContent is updated immediately\n      if (currentContext === capturedContext && currentDate === capturedDate) {\n        console.log(`[Notes] Saving note - context: ${capturedContext}, date: ${capturedDate}`)\n        // Use the LATEST content from currentNoteContent, not the captured one\n        this.saveNote(capturedContext, capturedDate, this.currentNoteContent)\n      } else {\n        console.log(\n          `[Notes] Save cancelled - context/date changed from ${capturedContext}/${capturedDate} to ${currentContext}/${currentDate}`\n        )\n      }\n    }, 500)\n  }\n\n  async selectDate(dateStr: string): Promise<void> {\n    // Increment token to cancel any previous select operations\n    const selectToken = ++this.currentSelectToken\n    console.log(`[Notes] selectDate started - token: ${selectToken}, date: ${dateStr}`)\n\n    const context = state.get('selectedContext')\n\n    // Parse the date\n    const dateParts = dateStr.split('-')\n    const year = parseInt(dateParts[0])\n    const month = parseInt(dateParts[1]) - 1\n\n    // Update calendar month to show the selected date\n    state.update({\n      selectedDate: dateStr,\n      currentCalendarMonth: month,\n      currentCalendarYear: year\n    })\n\n    // Validate token before proceeding\n    if (selectToken !== this.currentSelectToken) {\n      console.log(`[Notes] selectDate cancelled - token ${selectToken} is stale`)\n      return\n    }\n\n    events.emit(EVENT.DATE_CHANGED, { date: dateStr })\n\n    // Load note for this date\n    if (context) {\n      // Validate token again before loading\n      if (selectToken !== this.currentSelectToken) {\n        console.log(`[Notes] selectDate cancelled before load - token ${selectToken} is stale`)\n        return\n      }\n\n      // Create note in local list immediately if it doesn't exist\n      this.ensureNoteInList(context, dateStr)\n      await this.loadNote(context, dateStr)\n    }\n  }\n\n  setTodayDate(): void {\n    const dateStr = (state as any).get('today') as string\n    const [year, month] = dateStr.split('-').map(Number)\n\n    state.update({\n      selectedDate: dateStr,\n      currentCalendarMonth: month - 1,\n      currentCalendarYear: year\n    })\n  }\n\n  getCurrentNoteContent(): string {\n    return this.currentNoteContent\n  }\n\n  async deleteNote(context: string, date: string): Promise<void> {\n    if (!context || !date) return\n\n    console.log(`[Notes] Deleting note - context: ${context}, date: ${date}`)\n\n    // Cancel any pending save operations for this note\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout)\n      this.saveTimeout = null\n      console.log('[Notes] Cancelled pending save operation')\n    }\n\n    // 1. Remove from local cache immediately (optimistic)\n    await cache.deleteNote(context, date)\n\n    // 2. Remove from the notes list in state\n    const notes = state.get('notes')\n    const updatedNotes = notes.filter(note => !(note.date === date && note.context === context))\n\n    const notesWithDates = state.get('notesWithDates')\n    const updatedNotesWithDates = notesWithDates.filter(d => d !== date)\n\n    state.update({\n      notes: updatedNotes,\n      notesWithDates: updatedNotesWithDates\n    })\n\n    // 3. If the deleted note was currently selected, clear the editor and select another note\n    const selectedDate = state.get('selectedDate')\n    if (selectedDate === date) {\n      // Clear current note content IMMEDIATELY to prevent race conditions\n      this.currentNoteContent = ''\n\n      // Select the most recent note or today\n      if (updatedNotes.length > 0) {\n        // Select the first note (most recent)\n        const nextNote = updatedNotes[0]\n        await this.selectDate(nextNote.date)\n      } else {\n        // No notes left, select today and clear editor\n        this.setTodayDate()\n        events.emit(EVENT.NOTE_LOADED, {\n          context,\n          date,\n          content: ''\n        })\n      }\n    }\n\n    // 4. Sync deletion to server immediately (backend will handle Drive sync)\n    try {\n      await api.deleteNote(context, date)\n      console.log('[Notes] Note deleted from server')\n    } catch (error) {\n      console.error('[Notes] Failed to delete note from server:', error)\n      // Note is still deleted locally, server will sync on next app load\n    }\n\n    console.log('[Notes] Note deleted locally and synced')\n  }\n}\n\nexport const notes = new NotesManager()\n","/**\n * Contexts Module\n * Handles context (project) management\n */\n\nimport { state } from '@/utils/state'\nimport { api } from './api'\nimport { cache } from '@/utils/cache'\nimport { events, EVENT } from '@/utils/events'\nimport type { Context } from '@/types'\n\nclass ContextsManager {\n  async loadContexts(): Promise<void> {\n    // Try local cache first (instant)\n    const cachedContexts = await cache.getContexts()\n    console.log('[CONTEXTS] Cached contexts:', cachedContexts)\n    if (cachedContexts.length > 0) {\n      state.set('contexts', cachedContexts)\n    }\n\n    // Load from server in background\n    try {\n      console.log('[CONTEXTS] Fetching contexts from server...')\n      const response = await api.getContexts()\n      console.log('[CONTEXTS] Server response:', response)\n      // Handle null/undefined contexts gracefully\n      const contexts = response?.contexts || []\n      console.log('[CONTEXTS] Parsed contexts:', contexts)\n      await cache.saveContexts(contexts)\n      state.set('contexts', contexts)\n      events.emit(EVENT.CONTEXTS_LOADED, { contexts })\n    } catch (error) {\n      console.error('[CONTEXTS] Failed to load contexts from server:', error)\n      // Only show error if we have no contexts at all AND it's a real network error\n      if (cachedContexts.length === 0 && !navigator.onLine) {\n        events.emit(EVENT.SHOW_ERROR, {\n          message: 'Failed to load contexts. Working offline.'\n        })\n      }\n      // If online but failed, don't show error - user might just have 0 contexts\n    }\n  }\n\n  async createContext(name: string, color?: string): Promise<Context> {\n    const newContext: Context = {\n      id: `temp-${Date.now()}`,\n      user_id: state.get('currentUser')?.id || '',\n      name,\n      color: color || 'primary',\n      created_at: new Date().toISOString()\n    }\n\n    // 1. Update UI immediately (optimistic)\n    const currentContexts = state.get('contexts')\n    const updatedContexts = [...currentContexts, newContext]\n\n    await cache.saveContexts(updatedContexts)\n    state.set('contexts', updatedContexts)\n    state.set('selectedContext', name)\n\n    // 2. Sync to server immediately\n    try {\n      await api.createContext({ name, color })\n      console.log('[CONTEXTS] Successfully synced new context to server')\n      // Reload contexts to get server-assigned ID\n      await this.loadContexts()\n    } catch (error) {\n      console.error('[CONTEXTS] Failed to sync context to server:', error)\n      // Context is still saved locally, will retry on next app load\n    }\n\n    return newContext\n  }\n\n  async updateContext(contextId: string, name: string, color: string): Promise<boolean> {\n    try {\n      await api.updateContext(contextId, { name, color })\n\n      // Update local state\n      const currentContexts = state.get('contexts')\n      const updatedContexts = currentContexts.map(c => (c.id === contextId ? { ...c, name, color } : c))\n\n      await cache.saveContexts(updatedContexts)\n      state.set('contexts', updatedContexts)\n\n      // Update selected context if it was the one being edited\n      const selectedContext = state.get('selectedContext')\n      const oldContext = currentContexts.find(c => c.id === contextId)\n      if (selectedContext === oldContext?.name) {\n        state.set('selectedContext', name)\n        localStorage.setItem('lastContext', name)\n      }\n\n      events.emit(EVENT.SHOW_SUCCESS, { message: 'Context updated successfully' })\n      return true\n    } catch (error) {\n      events.emit(EVENT.SHOW_ERROR, { message: 'Failed to update context' })\n      return false\n    }\n  }\n\n  async deleteContext(contextId: string): Promise<void> {\n    try {\n      await api.deleteContext(contextId)\n\n      const currentContexts = state.get('contexts')\n      const updatedContexts = currentContexts.filter(c => c.id !== contextId)\n\n      await cache.saveContexts(updatedContexts)\n      state.set('contexts', updatedContexts)\n\n      events.emit(EVENT.SHOW_SUCCESS, { message: 'Context deleted successfully' })\n    } catch (error) {\n      events.emit(EVENT.SHOW_ERROR, { message: 'Failed to delete context' })\n    }\n  }\n\n  selectContext(contextName: string | null): void {\n    state.set('selectedContext', contextName)\n    events.emit(EVENT.CONTEXT_CHANGED, { context: contextName })\n\n    // Save last used context to localStorage\n    if (contextName) {\n      localStorage.setItem('lastContext', contextName)\n    }\n  }\n\n  getSelectedContext(): string | null {\n    return state.get('selectedContext')\n  }\n\n  getContextColor(contextName: string): string {\n    const contexts = state.get('contexts')\n    const context = contexts.find(c => c.name === contextName)\n    // Normalize old hex colors\n    const color = context?.color || 'primary'\n    const bulmaColors = ['text', 'link', 'primary', 'info', 'success', 'warning', 'danger']\n    return bulmaColors.includes(color) ? color : 'primary'\n  }\n\n  restoreLastContext(): string | null {\n    const contexts = state.get('contexts')\n    const settings = state.get('userSettings')\n    const uniqueContextMode = settings.uniqueContextMode || false\n\n    console.log('[CONTEXTS] restoreLastContext - contexts:', contexts)\n    console.log('[CONTEXTS] uniqueContextMode:', uniqueContextMode)\n\n    // If no contexts available, return null\n    if (!contexts || contexts.length === 0) {\n      console.log('[CONTEXTS] No contexts available')\n      return null\n    }\n\n    // If unique context mode is enabled, always select first context\n    if (uniqueContextMode) {\n      const firstContext = contexts[0].name\n      console.log('[CONTEXTS] Unique context mode - selecting first context:', firstContext)\n      this.selectContext(firstContext)\n      return firstContext\n    }\n\n    const lastContext = localStorage.getItem('lastContext')\n    console.log('[CONTEXTS] lastContext from localStorage:', lastContext)\n\n    // Try to restore last used context\n    if (lastContext) {\n      const contextExists = contexts.some(c => c.name === lastContext)\n      console.log('[CONTEXTS] lastContext exists?', contextExists)\n      if (contextExists) {\n        console.log('[CONTEXTS] Selecting last context:', lastContext)\n        this.selectContext(lastContext)\n        return lastContext\n      }\n    }\n\n    // If no last context or it doesn't exist, select first context\n    const firstContext = contexts[0].name\n    console.log('[CONTEXTS] Selecting first context:', firstContext)\n    this.selectContext(firstContext)\n    return firstContext\n  }\n}\n\nexport const contexts = new ContextsManager()\n","/**\n * Calendar Module\n * Handles calendar rendering and navigation\n */\n\nimport { state } from '@/utils/state'\nimport { notes } from '@/services/notes'\n\nclass Calendar {\n  private monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ]\n  private dayNamesDefault = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n\n  render(): void {\n    const settings = state.get('userSettings')\n    const weekStart = settings.weekStart || 0\n    const month = state.get('currentCalendarMonth')\n    const year = state.get('currentCalendarYear')\n    const selectedDate = state.get('selectedDate')\n    const today = (state as any).get('today') as string\n    const notesWithDates = state.get('notesWithDates')\n\n    const dayNames = [\n      ...this.dayNamesDefault.slice(weekStart),\n      ...this.dayNamesDefault.slice(0, weekStart)\n    ]\n\n    const monthYearEl = document.getElementById('calendar-month-year')\n    if (monthYearEl) {\n      monthYearEl.textContent = `${this.monthNames[month]} ${year}`\n    }\n\n    const firstDayOfMonth = new Date(year, month, 1).getDay()\n    const adjustedFirstDay = (firstDayOfMonth - weekStart + 7) % 7\n    const daysInMonth = new Date(year, month + 1, 0).getDate()\n    const daysInPrevMonth = new Date(year, month, 0).getDate()\n\n    const grid = document.getElementById('calendar-grid')\n    if (!grid) return\n\n    // Render day headers\n    let html = dayNames.map(day => `<div class=\"calendar-day-header\">${day}</div>`).join('')\n\n    // Render previous month's trailing days\n    for (let i = adjustedFirstDay - 1; i >= 0; i--) {\n      const day = daysInPrevMonth - i\n      html += `<div class=\"calendar-day other-month\">${day}</div>`\n    }\n\n    // Render current month's days\n    for (let day = 1; day <= daysInMonth; day++) {\n      const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`\n      const classes = ['calendar-day']\n\n      if (dateStr === today) classes.push('today')\n      if (dateStr === selectedDate) classes.push('selected')\n      if (notesWithDates.includes(dateStr)) classes.push('has-note')\n\n      html += `<div class=\"${classes.join(' ')}\" data-date=\"${dateStr}\">${day}</div>`\n    }\n\n    // Render next month's leading days\n    const totalCells = adjustedFirstDay + daysInMonth\n    const remainingCells = totalCells % 7 === 0 ? 0 : 7 - (totalCells % 7)\n    for (let day = 1; day <= remainingCells; day++) {\n      html += `<div class=\"calendar-day other-month\">${day}</div>`\n    }\n\n    grid.innerHTML = html\n\n    // Add click handlers\n    grid.querySelectorAll('.calendar-day:not(.other-month)').forEach(dayEl => {\n      dayEl.addEventListener('click', () => {\n        const dateStr = (dayEl as HTMLElement).dataset.date\n        if (dateStr) {\n          notes.selectDate(dateStr)\n        }\n      })\n    })\n  }\n\n  prevMonth(): void {\n    let month = state.get('currentCalendarMonth')\n    let year = state.get('currentCalendarYear')\n\n    month--\n    if (month < 0) {\n      month = 11\n      year--\n    }\n\n    state.update({\n      currentCalendarMonth: month,\n      currentCalendarYear: year\n    })\n\n    this.render()\n  }\n\n  nextMonth(): void {\n    let month = state.get('currentCalendarMonth')\n    let year = state.get('currentCalendarYear')\n\n    month++\n    if (month > 11) {\n      month = 0\n      year++\n    }\n\n    state.update({\n      currentCalendarMonth: month,\n      currentCalendarYear: year\n    })\n\n    this.render()\n  }\n\n  goToToday(): void {\n    const today = (state as any).get('today') as string\n    notes.selectDate(today)\n  }\n}\n\nexport const calendar = new Calendar()\n","/**\n * Markdown Editor Module\n * Modern WYSIWYG markdown editor using Quill\n */\n\nimport { state } from '@/utils/state'\n\n// Quill types\ndeclare global {\n  interface Window {\n    Quill?: any\n  }\n}\n\ninterface QuillDelta {\n  ops: QuillOp[]\n}\n\ninterface QuillOp {\n  insert: string | object\n  attributes?: Record<string, any>\n}\n\nclass MarkdownEditor {\n  private container: HTMLElement | null = null\n  private editor: any = null\n  private editorElement: HTMLElement | null = null\n  private onChangeCallback: ((content: string) => void) | null = null\n  private isUpdating = false\n  private currentNoteContent = ''\n  private updateTimeout: number | null = null\n  private contentVersion = 0 // Track version to ignore stale events\n\n  async init(containerId: string, onChange: (content: string) => void): Promise<void> {\n    this.container = document.getElementById(containerId)\n    if (!this.container) {\n      console.error('[MarkdownEditor] Container not found:', containerId)\n      return\n    }\n\n    this.onChangeCallback = onChange\n\n    // Don't load Quill yet - wait until actually needed (lazy loading)\n    // This saves ~300KB on initial page load\n    this.container.innerHTML =\n      '<div style=\"padding: 1rem; color: var(--bulma-text-light); opacity: 0.6;\">Editor loading...</div>'\n  }\n\n  async ensureQuillLoaded(): Promise<void> {\n    // Only load Quill when first needed\n    if (!this.editor) {\n      await this.loadQuill()\n      this.render()\n      this.initQuill()\n    }\n  }\n\n  private async loadQuill(): Promise<void> {\n    if (window.Quill) return\n\n    // Load Quill CSS locally\n    const css = document.createElement('link')\n    css.rel = 'stylesheet'\n    css.href = '/static/vendor/quill/quill.snow.css'\n    document.head.appendChild(css)\n\n    // Load Quill JS locally\n    const script = document.createElement('script')\n    script.src = '/static/vendor/quill/quill.min.js'\n    document.head.appendChild(script)\n\n    // Wait for Quill to load\n    await new Promise<void>(resolve => {\n      script.onload = () => resolve()\n    })\n  }\n\n  private render(): void {\n    if (!this.container) return\n\n    this.container.innerHTML = `\n      <div class=\"quill-editor-wrapper\">\n        <div id=\"quill-editor\"></div>\n      </div>\n    `\n\n    this.editorElement = document.getElementById('quill-editor')\n  }\n\n  private initQuill(): void {\n    if (!window.Quill) {\n      console.error('[MarkdownEditor] Quill not loaded')\n      return\n    }\n\n    try {\n      this.editor = new window.Quill(this.editorElement, {\n        theme: 'snow',\n        modules: {\n          toolbar: [\n            [{ header: [1, 2, 3, false] }],\n            ['bold', 'italic', 'strike'],\n            [{ list: 'ordered' }, { list: 'bullet' }],\n            ['blockquote', 'code-block'],\n            ['link'],\n            ['clean']\n          ]\n        },\n        placeholder: 'Start writing your notes...',\n        formats: ['bold', 'italic', 'strike', 'header', 'list', 'code-block', 'blockquote', 'link']\n      })\n\n      // Listen for text changes\n      this.editor.on('text-change', () => {\n        if (this.isUpdating) return\n\n        if (this.onChangeCallback) {\n          const markdown = this.getMarkdown()\n          this.onChangeCallback(markdown)\n        }\n      })\n\n      // Force placeholder to hide on focus when editor is empty\n      this.editor.root.addEventListener('focus', () => {\n        if (this.editor.getText().trim() === '') {\n          this.editor.root.dataset.placeholder = ''\n        }\n      })\n\n      // Restore placeholder on blur if editor is still empty\n      this.editor.root.addEventListener('blur', () => {\n        if (this.editor.getText().trim() === '') {\n          this.editor.root.dataset.placeholder = 'Start writing your notes...'\n        }\n      })\n\n      // Apply toolbar visibility based on user settings after initialization\n      this.applyToolbarVisibility()\n    } catch (error) {\n      console.error('[MarkdownEditor] Error initializing editor:', error)\n    }\n  }\n\n  private applyToolbarVisibility(): void {\n    const settings = state.get('userSettings')\n    const showMarkdownEditor = settings.showMarkdownEditor === true\n\n    const toolbar = this.container?.querySelector('.ql-toolbar') as HTMLElement\n    if (toolbar) {\n      toolbar.style.display = showMarkdownEditor ? '' : 'none'\n    }\n\n    // Editor enabled state should be based on context selection only\n    // Toolbar visibility is separate from editor interactivity\n    if (this.editor) {\n      const context = state.get('selectedContext')\n      this.editor.enable(context ? true : false)\n    }\n  }\n\n  private getMarkdown(): string {\n    if (!this.editor) return ''\n\n    const delta = this.editor.getContents()\n    let markdown = ''\n    let currentList: string | null = null\n    let listCounter = 0\n\n    delta.ops.forEach((op: QuillOp) => {\n      if (!op.insert) return\n\n      const text = typeof op.insert === 'string' ? op.insert : ''\n      const attrs = op.attributes || {}\n\n      // Handle newlines with formatting\n      if (text === '\\n') {\n        // Check for headers\n        if (attrs.header) {\n          markdown = markdown.trimEnd()\n          markdown = '#'.repeat(attrs.header) + ' ' + markdown.split('\\n').pop()\n          markdown += '\\n\\n'\n        }\n        // Check for lists\n        else if (attrs.list) {\n          if (attrs.list !== currentList) {\n            currentList = attrs.list\n            listCounter = 1\n          }\n          const line = markdown.split('\\n').pop()!\n          markdown = markdown.substring(0, markdown.lastIndexOf('\\n') + 1)\n\n          if (attrs.list === 'ordered') {\n            markdown += `${listCounter++}. ${line}\\n`\n          } else if (attrs.list === 'bullet') {\n            markdown += `- ${line}\\n`\n          } else if (attrs.list === 'check') {\n            markdown += `- [ ] ${line}\\n`\n          }\n        } else {\n          currentList = null\n          listCounter = 0\n          if (attrs.blockquote) {\n            const line = markdown.split('\\n').pop()!\n            markdown = markdown.substring(0, markdown.lastIndexOf('\\n') + 1)\n            markdown += `> ${line}\\n`\n          } else if (attrs['code-block']) {\n            markdown += '\\n```\\n'\n          } else {\n            markdown += '\\n'\n          }\n        }\n      } else {\n        let formattedText = text\n\n        // Apply inline formatting\n        if (attrs.bold) {\n          formattedText = `**${formattedText}**`\n        }\n        if (attrs.italic) {\n          formattedText = `*${formattedText}*`\n        }\n        if (attrs.strike) {\n          formattedText = `~~${formattedText}~~`\n        }\n        if (attrs.code) {\n          formattedText = `\\`${formattedText}\\``\n        }\n        if (attrs.link) {\n          formattedText = `[${formattedText}](${attrs.link})`\n        }\n\n        markdown += formattedText\n      }\n    })\n\n    return markdown.trim()\n  }\n\n  async setContent(content: string): Promise<void> {\n    // Lazy load Quill when content is set\n    await this.ensureQuillLoaded()\n\n    if (!this.editor) return\n\n    // Increment version to invalidate any pending events from previous setContent calls\n    this.contentVersion++\n    const currentVersion = this.contentVersion\n    console.log('[Editor] setContent called - version:', currentVersion, 'content length:', content.length)\n\n    // Clear any pending update timeout\n    if (this.updateTimeout) {\n      clearTimeout(this.updateTimeout)\n      this.updateTimeout = null\n    }\n\n    // CRITICAL: Disable the editor completely to prevent ANY text-change events\n    // This is more robust than just setting a flag\n    this.editor.disable()\n    this.isUpdating = true\n\n    try {\n      if (!content) {\n        this.editor.setText('')\n        this.currentNoteContent = ''\n      } else {\n        // Convert markdown to Quill Delta\n        const delta = this.markdownToDelta(content)\n        this.editor.setContents(delta)\n\n        // Track the current content for comparison\n        this.currentNoteContent = content\n      }\n    } finally {\n      // Re-enable editor after a delay to ensure all Quill internal events complete\n      this.updateTimeout = window.setTimeout(() => {\n        console.log('[Editor] Unlocking editor - version:', currentVersion)\n        this.isUpdating = false\n        this.updateTimeout = null\n\n        // Only re-enable if we have a context\n        const context = state.get('selectedContext')\n        if (context && this.editor) {\n          this.editor.enable(true)\n        }\n      }, 600)\n    }\n  }\n\n  private markdownToDelta(markdown: string): QuillDelta {\n    const ops: QuillOp[] = []\n    const lines = markdown.split('\\n')\n\n    lines.forEach((line, index) => {\n      // Headers\n      const headerMatch = line.match(/^(#{1,3})\\s+(.+)$/)\n      if (headerMatch) {\n        const level = headerMatch[1].length\n        ops.push({ insert: headerMatch[2] })\n        ops.push({ insert: '\\n', attributes: { header: level } })\n        return\n      }\n\n      // Bullet list\n      const bulletMatch = line.match(/^-\\s+(.+)$/)\n      if (bulletMatch) {\n        const text = this.parseInlineMarkdown(bulletMatch[1])\n        ops.push(...text)\n        ops.push({ insert: '\\n', attributes: { list: 'bullet' } })\n        return\n      }\n\n      // Numbered list\n      const numberedMatch = line.match(/^\\d+\\.\\s+(.+)$/)\n      if (numberedMatch) {\n        const text = this.parseInlineMarkdown(numberedMatch[1])\n        ops.push(...text)\n        ops.push({ insert: '\\n', attributes: { list: 'ordered' } })\n        return\n      }\n\n      // Task list\n      const taskMatch = line.match(/^-\\s+\\[([ x])\\]\\s+(.+)$/)\n      if (taskMatch) {\n        const text = this.parseInlineMarkdown(taskMatch[2])\n        ops.push(...text)\n        ops.push({ insert: '\\n', attributes: { list: 'check' } })\n        return\n      }\n\n      // Blockquote\n      const quoteMatch = line.match(/^>\\s+(.+)$/)\n      if (quoteMatch) {\n        const text = this.parseInlineMarkdown(quoteMatch[1])\n        ops.push(...text)\n        ops.push({ insert: '\\n', attributes: { blockquote: true } })\n        return\n      }\n\n      // Code block\n      if (line.startsWith('```')) {\n        ops.push({ insert: '\\n', attributes: { 'code-block': true } })\n        return\n      }\n\n      // Regular text with inline formatting\n      if (line.trim()) {\n        const text = this.parseInlineMarkdown(line)\n        ops.push(...text)\n      }\n\n      // Add newline if not last line\n      if (index < lines.length - 1) {\n        ops.push({ insert: '\\n' })\n      }\n    })\n\n    return { ops }\n  }\n\n  private parseInlineMarkdown(text: string): QuillOp[] {\n    const ops: QuillOp[] = []\n\n    // Parse inline formatting: bold, italic, strike, code, links\n    const regex = /(\\*\\*([^*]+)\\*\\*)|(\\*([^*]+)\\*)|(~~([^~]+)~~)|(`([^`]+)`)|(\\[([^\\]]+)\\]\\(([^)]+)\\))/g\n    let lastIndex = 0\n    let match: RegExpExecArray | null\n\n    while ((match = regex.exec(text)) !== null) {\n      // Add text before match\n      if (match.index > lastIndex) {\n        ops.push({ insert: text.substring(lastIndex, match.index) })\n      }\n\n      // Bold\n      if (match[1]) {\n        ops.push({ insert: match[2], attributes: { bold: true } })\n      }\n      // Italic\n      else if (match[3]) {\n        ops.push({ insert: match[4], attributes: { italic: true } })\n      }\n      // Strike\n      else if (match[5]) {\n        ops.push({ insert: match[6], attributes: { strike: true } })\n      }\n      // Code\n      else if (match[7]) {\n        ops.push({ insert: match[8], attributes: { code: true } })\n      }\n      // Link\n      else if (match[9]) {\n        ops.push({ insert: match[10], attributes: { link: match[11] } })\n      }\n\n      lastIndex = regex.lastIndex\n    }\n\n    // Add remaining text\n    if (lastIndex < text.length) {\n      ops.push({ insert: text.substring(lastIndex) })\n    }\n\n    return ops.length > 0 ? ops : [{ insert: text }]\n  }\n\n  getContent(): string {\n    return this.getMarkdown()\n  }\n\n  async setDisabled(disabled: boolean): Promise<void> {\n    // Only load editor if we're enabling it\n    if (!disabled) {\n      await this.ensureQuillLoaded()\n    }\n\n    if (!this.editor) return\n    this.editor.enable(!disabled)\n\n    const toolbar = this.container?.querySelector('.ql-toolbar') as HTMLElement\n    if (toolbar) {\n      toolbar.style.pointerEvents = disabled ? 'none' : 'auto'\n      toolbar.style.opacity = disabled ? '0.5' : '1'\n    }\n\n    // Update placeholder based on disabled state\n    const editorRoot = this.editor.root\n    if (editorRoot && disabled) {\n      editorRoot.dataset.placeholder = 'Select a context to start writing...'\n    } else if (editorRoot) {\n      editorRoot.dataset.placeholder = 'Start writing your notes...'\n    }\n  }\n\n  setPlaceholderMessage(message: string): void {\n    // Ensure Quill is loaded first\n    this.ensureQuillLoaded().then(() => {\n      if (!this.editor) return\n\n      const editorRoot = this.editor.root\n      if (editorRoot) {\n        editorRoot.dataset.placeholder = message\n      }\n    })\n  }\n\n  focus(): void {\n    if (this.editor) {\n      this.editor.focus()\n    }\n  }\n\n  /**\n   * Force flush any pending changes immediately\n   * Used before context/date changes to prevent data loss\n   */\n  forceFlush(): void {\n    if (!this.editor || this.isUpdating) return\n\n    const markdown = this.getMarkdown()\n\n    // Clear any pending debounced save\n    if (this.onChangeCallback) {\n      this.onChangeCallback(markdown)\n    }\n  }\n\n  /**\n   * Check if there are pending changes\n   */\n  hasPendingChanges(): boolean {\n    // If there's no editor, no pending changes\n    if (!this.editor) return false\n\n    const currentContent = this.getMarkdown()\n    return currentContent !== this.currentNoteContent\n  }\n}\n\nexport const markdownEditor = new MarkdownEditor()\n","/**\n * Professional Notification System\n * Handles toast notifications with queuing, stacking, and animations\n */\n\ninterface NotificationOptions {\n  type?: 'success' | 'error' | 'warning' | 'info'\n  title?: string\n  message: string\n  duration?: number\n  dismissible?: boolean\n  onAction?: () => void\n  actionLabel?: string\n}\n\ninterface Notification extends NotificationOptions {\n  id: string\n  element: HTMLElement | null\n  timeout?: number\n}\n\nclass NotificationManager {\n  private container: HTMLElement\n  private notifications = new Map<string, Notification>()\n  private queue: Notification[] = []\n  private readonly maxVisible = 3\n  private readonly defaultDuration = 5000\n\n  constructor() {\n    this.container = this.init()\n  }\n\n  private init(): HTMLElement {\n    // Create notification container\n    const container = document.createElement('div')\n    container.id = 'notification-container'\n    container.className = 'notification-container'\n    container.setAttribute('role', 'region')\n    container.setAttribute('aria-label', 'Notifications')\n    document.body.appendChild(container)\n    return container\n  }\n\n  /**\n   * Show a notification\n   */\n  show(options: NotificationOptions): string {\n    const {\n      type = 'info',\n      title,\n      message,\n      duration = this.defaultDuration,\n      dismissible = true,\n      onAction,\n      actionLabel = 'Action'\n    } = options\n\n    const id = `notification-${Date.now()}-${Math.random()}`\n\n    const notification: Notification = {\n      id,\n      type,\n      title,\n      message,\n      duration,\n      dismissible,\n      onAction,\n      actionLabel,\n      element: null\n    }\n\n    // Add to queue if at max capacity\n    const visibleCount = this.container.children.length\n    if (visibleCount >= this.maxVisible) {\n      this.queue.push(notification)\n      return id\n    }\n\n    this.render(notification)\n    return id\n  }\n\n  private render(notification: Notification): void {\n    const { id, type, title, message, duration, dismissible, onAction, actionLabel } = notification\n\n    // Create notification element\n    const element = document.createElement('div')\n    element.className = `notification-toast notification-${type}`\n    element.setAttribute('role', 'alert')\n    element.setAttribute('aria-live', type === 'error' ? 'assertive' : 'polite')\n    element.dataset.id = id\n\n    // Icon mapping\n    const icons = {\n      success: 'check_circle',\n      error: 'error',\n      warning: 'warning',\n      info: 'info'\n    }\n\n    // Build HTML\n    element.innerHTML = `\n      <div class=\"notification-icon\">\n        <span class=\"material-symbols-outlined\">${icons[type!]}</span>\n      </div>\n      <div class=\"notification-content\">\n        ${title ? `<div class=\"notification-title\">${this.escapeHtml(title)}</div>` : ''}\n        <div class=\"notification-message\">${this.escapeHtml(message)}</div>\n      </div>\n      ${\n        onAction\n          ? `\n        <button class=\"notification-action\" aria-label=\"${actionLabel}\">\n          ${actionLabel}\n        </button>\n      `\n          : ''\n      }\n      ${\n        dismissible\n          ? `\n        <button class=\"notification-close\" aria-label=\"Close notification\">\n          <span class=\"material-symbols-outlined\">close</span>\n        </button>\n      `\n          : ''\n      }\n    `\n\n    // Add event listeners\n    if (dismissible) {\n      const closeBtn = element.querySelector('.notification-close')\n      closeBtn?.addEventListener('click', () => this.dismiss(id))\n    }\n\n    if (onAction) {\n      const actionBtn = element.querySelector('.notification-action')\n      actionBtn?.addEventListener('click', () => {\n        onAction()\n        this.dismiss(id)\n      })\n    }\n\n    // Add to DOM with animation\n    this.container.appendChild(element)\n    notification.element = element\n    this.notifications.set(id, notification)\n\n    // Trigger animation\n    requestAnimationFrame(() => {\n      element.classList.add('notification-visible')\n    })\n\n    // Auto-dismiss after duration\n    if (duration && duration > 0) {\n      notification.timeout = window.setTimeout(() => {\n        this.dismiss(id)\n      }, duration)\n    }\n  }\n\n  dismiss(id: string): void {\n    const notification = this.notifications.get(id)\n    if (!notification) return\n\n    const { element, timeout } = notification\n\n    // Clear timeout\n    if (timeout) {\n      clearTimeout(timeout)\n    }\n\n    // Animate out\n    element?.classList.remove('notification-visible')\n    element?.classList.add('notification-hiding')\n\n    // Remove from DOM after animation\n    setTimeout(() => {\n      if (element?.parentNode) {\n        element.parentNode.removeChild(element)\n      }\n      this.notifications.delete(id)\n\n      // Show next queued notification\n      this.processQueue()\n    }, 300)\n  }\n\n  private processQueue(): void {\n    const visibleCount = this.container.children.length\n    if (this.queue.length > 0 && visibleCount < this.maxVisible) {\n      const next = this.queue.shift()\n      if (next) {\n        this.render(next)\n      }\n    }\n  }\n\n  // Convenience methods\n  success(message: string, options: Partial<NotificationOptions> = {}): string {\n    return this.show({ type: 'success', message, title: 'Success', ...options })\n  }\n\n  error(message: string, options: Partial<NotificationOptions> = {}): string {\n    return this.show({\n      type: 'error',\n      message,\n      title: 'Error',\n      duration: 7000, // Longer for errors\n      ...options\n    })\n  }\n\n  warning(message: string, options: Partial<NotificationOptions> = {}): string {\n    return this.show({ type: 'warning', message, title: 'Warning', ...options })\n  }\n\n  info(message: string, options: Partial<NotificationOptions> = {}): string {\n    return this.show({ type: 'info', message, ...options })\n  }\n\n  // Clear all notifications\n  clearAll(): void {\n    this.notifications.forEach(notification => {\n      this.dismiss(notification.id)\n    })\n    this.queue = []\n  }\n\n  // Utility: Escape HTML\n  private escapeHtml(text: string): string {\n    const div = document.createElement('div')\n    div.textContent = text\n    return div.innerHTML\n  }\n}\n\n// Create singleton instance\nexport const notifications = new NotificationManager()\n","/**\n * UI Module\n * Handles all UI rendering and user interactions\n */\n\nimport { state } from '@/utils/state';\nimport { contexts } from '@/services/contexts';\nimport { calendar } from '@/components/Calendar';\nimport { notes } from '@/services/notes';\nimport { events } from '@/utils/events';\nimport { api } from '@/services/api';\nimport { notifications } from '@/components/Notifications';\nimport { markdownEditor } from '@/components/Editor';\nimport { auth } from '@/services/auth';\n\ninterface UIElements {\n    // Sections\n    authSection: HTMLElement | null;\n    appSection: HTMLElement | null;\n\n    // Context\n    contextSelect: HTMLSelectElement | null;\n    contextColorIndicator: HTMLElement | null;\n\n    // Mobile context\n    mobileContextSelect: HTMLSelectElement | null;\n    mobileContextColorIndicator: HTMLElement | null;\n\n    // Date\n    datePicker: HTMLInputElement | null;\n\n    // Breadcrumb\n    breadcrumbContextName: HTMLElement | null;\n    breadcrumbDateName: HTMLElement | null;\n\n    // Editor\n    markdownEditorContainer: HTMLElement | null;\n    saveIndicator: HTMLElement | null;\n\n    // Notes list\n    notesList: HTMLElement | null;\n\n    // User\n    userEmail: HTMLElement | null;\n\n    // Time\n    currentTime: HTMLElement | null;\n    currentDate: HTMLElement | null;\n\n    // Modals\n    contextModal: HTMLElement | null;\n    settingsModal: HTMLElement | null;\n    onboardingModal: HTMLElement | null;\n\n    // Sync status\n    syncStatus: HTMLElement | null;\n    syncStatusText: HTMLElement | null;\n\n    // Theme\n    themeToggleMenu: HTMLElement | null;\n    themeToggleSwitch: HTMLInputElement | null;\n\n    // Settings\n    weekStartSelect: HTMLSelectElement | null;\n    timezoneSelect: HTMLSelectElement | null;\n\n    // Mobile navigation\n    mobileNotesToggle: HTMLElement | null;\n    mobileCalendarToggle: HTMLElement | null;\n    sidebar: HTMLElement | null;\n    calendarPanel: HTMLElement | null;\n    sidebarOverlay: HTMLElement | null;\n    calendarOverlay: HTMLElement | null;\n    sidebarClose: HTMLElement | null;\n    calendarClose: HTMLElement | null;\n}\n\ninterface SyncStatusOptions {\n    pending: number;\n    syncing: boolean;\n}\n\ninterface NotificationOptions {\n    title?: string;\n    duration?: number;\n}\n\nexport class UIManager {\n    elements: UIElements;\n    lastKnownDate: string | null;\n    INITIAL_RENDER_COUNT: number;\n    renderedNotesCount: number;\n\n    constructor() {\n        this.elements = {} as UIElements;\n        this.lastKnownDate = null;\n        // Virtual scrolling optimization\n        this.INITIAL_RENDER_COUNT = 50; // Only render first 50 notes initially\n        this.renderedNotesCount = this.INITIAL_RENDER_COUNT;\n    }\n\n    init(): void {\n        this.cacheElements();\n        this.setupEventListeners();\n        this.setupStateSubscriptions();\n        this.setupUserDropdown();\n        this.setupMobileNavigation();\n        this.startClock();\n    }\n\n    cacheElements(): void {\n        this.elements = {\n            // Sections\n            authSection: document.getElementById('auth-section'),\n            appSection: document.getElementById('app-section'),\n\n            // Context\n            contextSelect: document.getElementById('context-select') as HTMLSelectElement | null,\n            contextColorIndicator: document.getElementById('context-color-indicator'),\n\n            // Mobile context\n            mobileContextSelect: document.getElementById('mobile-context-select') as HTMLSelectElement | null,\n            mobileContextColorIndicator: document.getElementById('mobile-context-color-indicator'),\n\n            // Date\n            datePicker: document.getElementById('date-picker') as HTMLInputElement | null,\n\n            // Breadcrumb\n            breadcrumbContextName: document.getElementById('breadcrumb-context-name'),\n            breadcrumbDateName: document.getElementById('breadcrumb-date-name'),\n\n            // Editor\n            markdownEditorContainer: document.getElementById('markdown-editor-container'),\n            saveIndicator: document.getElementById('save-indicator'),\n\n            // Notes list\n            notesList: document.getElementById('notes-list'),\n\n            // User\n            userEmail: document.getElementById('user-email'),\n\n            // Time\n            currentTime: document.getElementById('current-time'),\n            currentDate: document.getElementById('current-date'),\n\n            // Modals\n            contextModal: document.getElementById('context-modal'),\n            settingsModal: document.getElementById('settings-modal'),\n            onboardingModal: document.getElementById('onboarding-modal'),\n\n            // Sync status\n            syncStatus: document.getElementById('sync-status'),\n            syncStatusText: document.getElementById('sync-status-text'),\n\n            // Theme\n            themeToggleMenu: document.getElementById('theme-toggle-menu'),\n            themeToggleSwitch: document.getElementById('theme-toggle-switch') as HTMLInputElement | null,\n\n            // Settings\n            weekStartSelect: document.getElementById('week-start-select') as HTMLSelectElement | null,\n            timezoneSelect: document.getElementById('timezone-select') as HTMLSelectElement | null,\n\n            // Mobile navigation\n            mobileNotesToggle: document.getElementById('mobile-notes-toggle'),\n            mobileCalendarToggle: document.getElementById('mobile-calendar-toggle'),\n            sidebar: document.querySelector('.sidebar') as HTMLElement | null,\n            calendarPanel: document.querySelector('.calendar-panel') as HTMLElement | null,\n            sidebarOverlay: document.getElementById('sidebar-overlay'),\n            calendarOverlay: document.getElementById('calendar-overlay'),\n            sidebarClose: document.getElementById('sidebar-close'),\n            calendarClose: document.getElementById('calendar-close'),\n        };\n    }\n\n    setupEventListeners(): void {\n        // Editor fullscreen button\n        const editorFullscreenBtn = document.getElementById('editor-fullscreen-btn');\n        if (editorFullscreenBtn) {\n            editorFullscreenBtn.addEventListener('click', () => {\n                this.openFullscreenNote();\n            });\n        }\n\n        // Editor delete button\n        const editorDeleteBtn = document.getElementById('editor-delete-note-btn');\n        if (editorDeleteBtn) {\n            editorDeleteBtn.addEventListener('click', () => {\n                const context = state.get('selectedContext');\n                const dateStr = state.get('selectedDate');\n\n                if (context && dateStr) {\n                    // Get formatted date for display\n                    const settings = state.get('userSettings');\n                    const timezone = settings.timezone || 'UTC';\n                    const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n                    const [year, month, day] = dateStr.split('-').map(Number);\n                    const dateObj = new Date(year, month - 1, day);\n\n                    // Get the day name\n                    const dayName = dateObj.toLocaleDateString('en-US', {\n                        weekday: 'long',\n                        timeZone: timezone\n                    });\n\n                    // Format date\n                    const yy = String(year).substring(2);\n                    const mm = String(month).padStart(2, '0');\n                    const dd = String(day).padStart(2, '0');\n\n                    let formattedDateStr: string;\n                    if (dateFormat === 'MM-DD-YY') {\n                        formattedDateStr = `${mm}-${dd}-${yy}`;\n                    } else {\n                        formattedDateStr = `${dd}-${mm}-${yy}`;\n                    }\n\n                    const formattedDate = `${dayName}, ${formattedDateStr}`;\n\n                    // Show modal\n                    this.showDeleteNoteModal(context, dateStr, formattedDate);\n                }\n            });\n        }\n\n        // Context selection (desktop)\n        // Just update state - the CONTEXT_CHANGED event handler will do the rest\n        this.elements.contextSelect?.addEventListener('change', (e) => {\n            const context = (e.target as HTMLSelectElement).value;\n            console.log('[UI] Desktop context selector changed:', context);\n            contexts.selectContext(context);\n        });\n\n        // Context selection (mobile)\n        // Just update state - the CONTEXT_CHANGED event handler will do the rest\n        this.elements.mobileContextSelect?.addEventListener('change', (e) => {\n            const context = (e.target as HTMLSelectElement).value;\n            console.log('[UI] Mobile context selector changed:', context);\n            contexts.selectContext(context);\n        });\n\n        // Date picker\n        this.elements.datePicker?.addEventListener('change', async (e) => {\n            const dateStr = (e.target as HTMLInputElement).value;\n            // Check if this date is already selected\n            const currentDate = state.get('selectedDate');\n            if (currentDate === dateStr) {\n                console.log('[UI] Date picker: date already selected, skipping:', dateStr);\n                return;\n            }\n            await notes.selectDate(dateStr);\n        });\n\n        // Calendar navigation\n        document.getElementById('prev-month')?.addEventListener('click', () => {\n            calendar.prevMonth();\n        });\n\n        document.getElementById('next-month')?.addEventListener('click', () => {\n            calendar.nextMonth();\n        });\n\n        // Theme toggle\n        this.elements.themeToggleMenu?.addEventListener('click', async (e) => {\n            e.preventDefault();\n            const currentTheme = document.documentElement.getAttribute('data-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n            this.setTheme(newTheme);\n\n            const settings = state.get('userSettings');\n            state.set('userSettings', { ...settings, theme: newTheme });\n\n            try {\n                await api.updateSettings({ ...settings, theme: newTheme });\n            } catch (err) {\n                console.error('Failed to save theme:', err);\n            }\n        });\n\n        this.elements.themeToggleSwitch?.addEventListener('change', (e) => {\n            this.setTheme((e.target as HTMLInputElement).checked ? 'dark' : 'light');\n        });\n\n        // Keyboard shortcuts\n        this.setupKeyboardShortcuts();\n    }\n\n    setupKeyboardShortcuts(): void {\n        document.addEventListener('keydown', (e) => {\n            const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n            const modKey = isMac ? e.metaKey : e.ctrlKey;\n\n            // Cmd/Ctrl+K: Focus context selector\n            if (modKey && e.key === 'k') {\n                e.preventDefault();\n                this.elements.contextSelect?.focus();\n                return;\n            }\n\n            // Cmd/Ctrl+S: Force sync\n            if (modKey && e.key === 's') {\n                e.preventDefault();\n                events.emit('sync-force' as any, undefined);\n                return;\n            }\n\n            // Cmd/Ctrl+/: Focus editor (handled by markdown editor)\n            if (modKey && e.key === '/') {\n                e.preventDefault();\n                return;\n            }\n\n            // Escape: Close modals\n            if (e.key === 'Escape') {\n                // Check if delete modal is open (highest priority)\n                const deleteModal = document.getElementById('delete-note-modal');\n                if (deleteModal?.classList.contains('is-active')) {\n                    this.closeDeleteNoteModal();\n                    return;\n                }\n\n                this.closeAllModals();\n                return;\n            }\n        });\n    }\n\n    setupUserDropdown(): void {\n        const userDropdown = document.getElementById('user-dropdown');\n        const userDropdownButton = document.getElementById('user-dropdown-button');\n        const settingsMenuItem = document.getElementById('settings-menu-item');\n        const signoutMenuItem = document.getElementById('signout-menu-item');\n\n        if (!userDropdown || !userDropdownButton) return;\n\n        // Toggle dropdown\n        userDropdownButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            userDropdown.classList.toggle('is-active');\n        });\n\n        // Settings click\n        settingsMenuItem?.addEventListener('click', (e) => {\n            e.preventDefault();\n            userDropdown.classList.remove('is-active');\n            this.showSettingsModal();\n        });\n\n        // Sign out click\n        signoutMenuItem?.addEventListener('click', (e) => {\n            e.preventDefault();\n            userDropdown.classList.remove('is-active');\n            auth.signOut();\n        });\n\n        // Close when clicking outside\n        document.addEventListener('click', (e) => {\n            if (!userDropdown.contains(e.target as Node)) {\n                userDropdown.classList.remove('is-active');\n            }\n        });\n\n        // Close on escape\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape' && userDropdown.classList.contains('is-active')) {\n                userDropdown.classList.remove('is-active');\n            }\n        });\n    }\n\n    setupStateSubscriptions(): void {\n        // Re-render UI when contexts change\n        state.subscribe('contexts', () => {\n            this.renderContextsSelect();\n        });\n\n        // Update calendar when month/year changes\n        state.subscribeMany(['currentCalendarMonth', 'currentCalendarYear'], () => {\n            calendar.render();\n        });\n\n        // Update UI when notes list changes\n        state.subscribe('notes', () => {\n            this.renderNotesList();\n            calendar.render();\n        });\n\n        // Update breadcrumb when context changes\n        state.subscribe('selectedContext', (_context) => {\n            this.updateBreadcrumb();\n            // Reset virtual scrolling when switching contexts\n            this.renderedNotesCount = this.INITIAL_RENDER_COUNT;\n        });\n\n        // Update date picker when selected date changes\n        state.subscribe('selectedDate', (newDate) => {\n            if (this.elements.datePicker && newDate) {\n                this.elements.datePicker.value = newDate as string;\n                this.updateDatePickerDisplay(newDate as string);\n            }\n            this.renderNotesList(); // Update active state\n            calendar.render();\n            this.updateBreadcrumb();\n            this.updateEditorDeleteButton(); // Update delete button visibility\n        });\n\n        // Update date picker display when date format changes\n        state.subscribe('userSettings', () => {\n            const selectedDate = state.get('selectedDate');\n            if (selectedDate) {\n                this.updateDatePickerDisplay(selectedDate);\n            }\n            this.updateBreadcrumb();\n        });\n\n        // Update context indicator when selected context changes\n        state.subscribe('selectedContext', (selectedContext) => {\n            // Update the select dropdown values (both desktop and mobile)\n            if (this.elements.contextSelect && selectedContext) {\n                this.elements.contextSelect.value = selectedContext;\n            }\n            if (this.elements.mobileContextSelect && selectedContext) {\n                this.elements.mobileContextSelect.value = selectedContext;\n            }\n            this.updateContextIndicator();\n            this.updateEditorState();\n        });\n\n        // Update user email when user changes\n        state.subscribe('currentUser', (user) => {\n            if (this.elements.userEmail && user) {\n                this.elements.userEmail.textContent = user.email || '';\n            }\n        });\n\n        // Update theme when settings change\n        state.subscribe('userSettings', (settings) => {\n            if (settings.theme) {\n                this.setTheme(settings.theme);\n            }\n            // Update context selector visibility based on uniqueContextMode\n            this.updateContextSelectorVisibility();\n            // Update breadcrumb visibility\n            this.updateBreadcrumbVisibility();\n            // Update markdown editor visibility\n            this.updateMarkdownEditorVisibility();\n            // Update new context button visibility\n            this.updateNewContextButtonVisibility();\n        });\n    }\n\n    renderContextsSelect(): void {\n        const contextsList = state.get('contexts');\n        const selectedContext = state.get('selectedContext');\n\n        const optionsHTML = '<option value=\"\">Select context...</option>' +\n            contextsList.map(c =>\n                `<option value=\"${c.name}\" data-color=\"${c.color || 'primary'}\">${c.name}</option>`\n            ).join('');\n\n        // Update desktop selector\n        if (this.elements.contextSelect) {\n            this.elements.contextSelect.innerHTML = optionsHTML;\n            if (selectedContext) {\n                this.elements.contextSelect.value = selectedContext;\n            }\n        }\n\n        // Update mobile selector\n        if (this.elements.mobileContextSelect) {\n            this.elements.mobileContextSelect.innerHTML = optionsHTML;\n            if (selectedContext) {\n                this.elements.mobileContextSelect.value = selectedContext;\n            }\n        }\n\n        this.updateContextIndicator();\n    }\n\n    updateContextIndicator(): void {\n        // Update desktop indicator\n        if (this.elements.contextSelect && this.elements.contextColorIndicator) {\n            const opt = this.elements.contextSelect.options[this.elements.contextSelect.selectedIndex] as HTMLOptionElement;\n\n            if (opt?.dataset.color && opt.value !== '') {\n                const normalizedColor = this.normalizeToBulmaColor(opt.dataset.color);\n                this.elements.contextColorIndicator.style.background = `var(--bulma-${normalizedColor})`;\n                this.elements.contextColorIndicator.style.opacity = '1';\n            } else {\n                this.elements.contextColorIndicator.style.background = 'var(--bulma-grey-light)';\n                this.elements.contextColorIndicator.style.opacity = '0.3';\n            }\n        }\n\n        // Update mobile indicator\n        if (this.elements.mobileContextSelect && this.elements.mobileContextColorIndicator) {\n            const opt = this.elements.mobileContextSelect.options[this.elements.mobileContextSelect.selectedIndex] as HTMLOptionElement;\n\n            if (opt?.dataset.color && opt.value !== '') {\n                const normalizedColor = this.normalizeToBulmaColor(opt.dataset.color);\n                this.elements.mobileContextColorIndicator.style.background = `var(--bulma-${normalizedColor})`;\n                this.elements.mobileContextColorIndicator.style.opacity = '1';\n            } else {\n                this.elements.mobileContextColorIndicator.style.background = 'var(--bulma-grey-light)';\n                this.elements.mobileContextColorIndicator.style.opacity = '0.3';\n            }\n        }\n    }\n\n    renderNotesList(): void {\n        const notesList = state.get('notes');\n        const selectedDate = state.get('selectedDate');\n        const settings = state.get('userSettings');\n        const timezone = settings.timezone || 'UTC';\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n        if (!this.elements.notesList) return;\n\n        if (notesList.length === 0) {\n            this.elements.notesList.innerHTML = '<li class=\"has-text-centered py-6 has-text-grey-light\">No notes yet</li>';\n            return;\n        }\n\n        // Virtual scrolling: only render visible notes\n        const notesToRender = notesList.slice(0, this.renderedNotesCount);\n        const hasMore = notesList.length > this.renderedNotesCount;\n\n        this.elements.notesList.innerHTML = notesToRender.map(note => {\n            const [year, month, day] = note.date.split('-').map(Number);\n            const dateObj = new Date(year, month - 1, day);\n\n            // Get the day name in English\n            const dayName = dateObj.toLocaleDateString('en-US', {\n                weekday: 'long',\n                timeZone: timezone\n            });\n\n            // Format date based on user preference\n            const yy = String(year).substring(2); // Get last 2 digits of year\n            const mm = String(month).padStart(2, '0');\n            const dd = String(day).padStart(2, '0');\n\n            let dateStr: string;\n            if (dateFormat === 'MM-DD-YY') {\n                dateStr = `${mm}-${dd}-${yy}`;\n            } else {\n                dateStr = `${dd}-${mm}-${yy}`;\n            }\n\n            // Format: \"Monday, 24-10-25.md\" or \"Monday, 10-24-25.md\" depending on dateFormat\n            const formattedDate = `${dayName}, ${dateStr}.md`;\n\n            const isActive = note.date === selectedDate;\n\n            return `\n                <li>\n                    <a\n                        class=\"${isActive ? 'is-active' : ''}\"\n                        data-date=\"${note.date}\"\n                    >\n                        ${formattedDate}\n                    </a>\n                </li>\n            `;\n        }).join('');\n\n        // Add \"Load More\" button if there are more notes\n        if (hasMore) {\n            this.elements.notesList.innerHTML += `\n                <li class=\"has-text-centered py-3\">\n                    <button class=\"button is-small is-ghost\" id=\"load-more-notes\" style=\"opacity: 0.7;\">\n                        <span class=\"icon\">\n                            <span class=\"material-symbols-outlined\">expand_more</span>\n                        </span>\n                        <span>Load ${Math.min(50, notesList.length - this.renderedNotesCount)} more</span>\n                    </button>\n                </li>\n            `;\n        }\n\n        // Add click handlers for notes\n        this.elements.notesList.querySelectorAll('a[data-date]').forEach(link => {\n            link.addEventListener('click', async (e) => {\n                e.preventDefault(); // Prevent default link behavior\n                const dateStr = (link as HTMLElement).dataset.date;\n                if (dateStr) {\n                    // Check if this date is already selected\n                    const currentDate = state.get('selectedDate');\n                    if (currentDate === dateStr) {\n                        console.log('[UI] Date already selected, skipping:', dateStr);\n                        return;\n                    }\n                    await notes.selectDate(dateStr);\n                }\n            });\n        });\n\n        // Add click handler for \"Load More\" button\n        const loadMoreBtn = document.getElementById('load-more-notes');\n        if (loadMoreBtn) {\n            loadMoreBtn.addEventListener('click', () => {\n                this.renderedNotesCount += 50;\n                this.renderNotesList();\n            });\n        }\n    }\n\n    updateEditorState(): void {\n        // Editor state is now managed by the markdown editor module\n        const context = state.get('selectedContext');\n        const contextsList = state.get('contexts') || [];\n\n        // Update editor state based on context\n        if (context) {\n            markdownEditor.setDisabled(false);\n        } else {\n            // First ensure Quill is loaded before setting placeholder\n            markdownEditor.ensureQuillLoaded().then(() => {\n                markdownEditor.setDisabled(true);\n                markdownEditor.setContent('');\n\n                // If there are no contexts at all, show a message to create the first one\n                if (contextsList.length === 0) {\n                    // Wait a bit to ensure setDisabled has applied\n                    setTimeout(() => {\n                        markdownEditor.setPlaceholderMessage('Click \"New Context\" to create your first context and start writing notes');\n                    }, 100);\n                }\n            });\n        }\n\n        // Show/hide delete button based on context\n        this.updateEditorDeleteButton();\n    }\n\n    updateEditorDeleteButton(): void {\n        const editorDeleteBtn = document.getElementById('editor-delete-note-btn');\n        const editorFullscreenBtn = document.getElementById('editor-fullscreen-btn');\n\n        const context = state.get('selectedContext');\n        const selectedDate = state.get('selectedDate');\n\n        // Show buttons only if we have both context and selected date\n        if (context && selectedDate) {\n            if (editorDeleteBtn) editorDeleteBtn.style.display = 'flex';\n            if (editorFullscreenBtn) editorFullscreenBtn.style.display = 'flex';\n        } else {\n            if (editorDeleteBtn) editorDeleteBtn.style.display = 'none';\n            if (editorFullscreenBtn) editorFullscreenBtn.style.display = 'none';\n        }\n    }\n\n    updateSaveIndicator(status: string): void {\n        if (!this.elements.saveIndicator) return;\n\n        this.elements.saveIndicator.className = `save-indicator ${status}`;\n\n        if (status === 'saved') {\n            this.elements.saveIndicator.textContent = 'Saved locally ✓';\n            setTimeout(() => {\n                if (this.elements.saveIndicator) {\n                    this.elements.saveIndicator.textContent = '';\n                }\n            }, 2000);\n        } else {\n            this.elements.saveIndicator.textContent = '';\n        }\n    }\n\n    updateSyncStatus({ pending, syncing }: SyncStatusOptions): void {\n        if (!this.elements.syncStatus || !this.elements.syncStatusText) return;\n\n        // Show sync indicator when there are pending operations or actively syncing\n        if (pending > 0 || syncing) {\n            this.elements.syncStatus.style.display = 'flex';\n\n            if (syncing) {\n                this.elements.syncStatusText.textContent = `Syncing ${pending} note${pending !== 1 ? 's' : ''}...`;\n                this.elements.syncStatus.classList.add('is-syncing');\n                this.elements.syncStatus.classList.remove('is-pending');\n            } else {\n                this.elements.syncStatusText.textContent = `${pending} note${pending !== 1 ? 's' : ''} pending sync`;\n                this.elements.syncStatus.classList.add('is-pending');\n                this.elements.syncStatus.classList.remove('is-syncing');\n            }\n        } else {\n            // Hide after successful sync with a brief delay\n            setTimeout(() => {\n                if (this.elements.syncStatus) {\n                    this.elements.syncStatus.style.display = 'none';\n                    this.elements.syncStatus.classList.remove('is-syncing', 'is-pending');\n                }\n            }, 1000);\n        }\n    }\n\n    setTheme(theme: string): void {\n        document.documentElement.setAttribute('data-theme', theme);\n        if (this.elements.themeToggleSwitch) {\n            this.elements.themeToggleSwitch.checked = theme === 'dark';\n        }\n        this.updateThemeIcon();\n        localStorage.setItem('theme', theme);\n    }\n\n    updateThemeIcon(): void {\n        const theme = document.documentElement.getAttribute('data-theme');\n        const themeIcon = this.elements.themeToggleMenu?.querySelector('.material-symbols-outlined');\n        if (themeIcon) {\n            themeIcon.textContent = theme === 'dark' ? 'light_mode' : 'dark_mode';\n        }\n    }\n\n    showApp(_skipAnimation: boolean = false): void {\n        console.log('[UI] showApp called');\n        console.log('[UI] authSection:', this.elements.authSection);\n        console.log('[UI] appSection:', this.elements.appSection);\n\n        if (!this.elements.authSection || !this.elements.appSection) {\n            console.error('[UI] Missing elements!');\n            return;\n        }\n\n        // Hide loader if visible\n        const loader = document.getElementById('landing-loader');\n        if (loader) {\n            console.log('[UI] Hiding loader');\n            loader.classList.remove('visible');\n        }\n\n        // Simple: hide auth, show app\n        console.log('[UI] Hiding auth section');\n        this.elements.authSection.classList.remove('visible');\n\n        console.log('[UI] Showing app section');\n        this.elements.appSection.classList.add('visible');\n\n        console.log('[UI] App section display:', window.getComputedStyle(this.elements.appSection).display);\n\n        // Update context selector visibility based on settings\n        this.updateContextSelectorVisibility();\n\n        // Update breadcrumb and markdown editor visibility\n        this.updateBreadcrumbVisibility();\n        this.updateMarkdownEditorVisibility();\n\n        // Update new context button visibility\n        this.updateNewContextButtonVisibility();\n\n        // Check if user has no contexts (new user or deleted all contexts)\n        // We use hasNoContexts from the backend response, NOT from local state\n        // because local state might not be loaded yet\n        const hasNoContexts = (state as any).get('hasNoContexts');\n        const isDevelopment = (window as any).__ENV__ === 'development';\n\n        console.log('[UI] showApp - hasNoContexts:', hasNoContexts, 'isDevelopment:', isDevelopment);\n\n        // Show onboarding modal when user has no contexts\n        // This happens when:\n        // - New user (never created a context)\n        // - User deleted all their contexts\n        // We ONLY check hasNoContexts from backend, not local contexts state\n        if (isDevelopment || hasNoContexts) {\n            console.log('[UI] Showing onboarding modal');\n            setTimeout(() => {\n                this.elements.onboardingModal?.classList.add('is-active');\n            }, 500);\n        } else {\n            console.log('[UI] NOT showing onboarding modal');\n        }\n    }\n\n    hideApp(): void {\n        if (!this.elements.authSection || !this.elements.appSection) return;\n\n        // Simple: hide app, show auth\n        this.elements.appSection.classList.remove('visible');\n        this.elements.authSection.classList.add('visible');\n    }\n\n    showError(message: string | { title?: string; message?: string; duration?: number }, options: NotificationOptions = {}): void {\n        // Handle different error types\n        let title = 'Error';\n        let duration = 7000;\n        let msg = '';\n\n        if (typeof message === 'object') {\n            // Structured error\n            title = message.title || 'Error';\n            msg = message.message || 'An error occurred';\n            duration = message.duration || 7000;\n        } else {\n            msg = message;\n        }\n\n        // Check if it's a network error\n        if (msg.includes('network') || msg.includes('offline')) {\n            title = 'Connection Error';\n            duration = 10000; // Longer for network issues\n        }\n\n        notifications.error(msg, { title, duration, ...options });\n    }\n\n    showSuccess(message: string, options: NotificationOptions = {}): void {\n        notifications.success(message, { duration: 3000, ...options });\n    }\n\n    showWarning(message: string, options: NotificationOptions = {}): void {\n        notifications.warning(message, { duration: 5000, ...options });\n    }\n\n    showInfo(message: string, options: NotificationOptions = {}): void {\n        notifications.info(message, { duration: 4000, ...options });\n    }\n\n    // Modal methods\n    showContextModal(): void {\n        this.elements.contextModal?.classList.add('is-active');\n        const nameInput = document.getElementById('context-name') as HTMLInputElement | null;\n        const colorInput = document.getElementById('context-color') as HTMLInputElement | null;\n        if (nameInput) nameInput.value = '';\n        if (colorInput) colorInput.value = 'primary';\n\n        // Setup color buttons handlers\n        this.setupColorButtons();\n\n        // Reset to primary\n        this.selectColorButton('primary');\n\n        nameInput?.focus();\n    }\n\n    closeContextModal(): void {\n        this.elements.contextModal?.classList.remove('is-active');\n    }\n\n    showSettingsModal(): void {\n        const settings = state.get('userSettings');\n\n        if (this.elements.weekStartSelect) {\n            this.elements.weekStartSelect.value = String(settings.weekStart);\n        }\n        if (this.elements.timezoneSelect) {\n            this.elements.timezoneSelect.value = settings.timezone;\n        }\n        const dateFormatSelect = document.getElementById('date-format-select') as HTMLSelectElement | null;\n        if (dateFormatSelect) {\n            dateFormatSelect.value = settings.dateFormat || 'DD-MM-YY';\n        }\n        const uniqueContextModeSwitch = document.getElementById('unique-context-mode-switch') as HTMLInputElement | null;\n        if (uniqueContextModeSwitch) {\n            uniqueContextModeSwitch.checked = settings.uniqueContextMode || false;\n        }\n        const showBreadcrumbSwitch = document.getElementById('show-breadcrumb-switch') as HTMLInputElement | null;\n        if (showBreadcrumbSwitch) {\n            showBreadcrumbSwitch.checked = settings.showBreadcrumb === true;\n        }\n        const showMarkdownEditorSwitch = document.getElementById('show-markdown-editor-switch') as HTMLInputElement | null;\n        if (showMarkdownEditorSwitch) {\n            showMarkdownEditorSwitch.checked = settings.showMarkdownEditor === true;\n        }\n        const hideNewContextButtonSwitch = document.getElementById('hide-new-context-button-switch') as HTMLInputElement | null;\n        if (hideNewContextButtonSwitch) {\n            hideNewContextButtonSwitch.checked = settings.hideNewContextButton === true;\n        }\n\n        // Reset accordion to collapsed state\n        const accordionContent = document.getElementById('contexts-accordion-content') as HTMLElement | null;\n        const accordionIcon = document.getElementById('contexts-accordion-icon');\n        if (accordionContent) {\n            accordionContent.style.display = 'none';\n            accordionContent.style.opacity = '1'; // Reset opacity\n        }\n        if (accordionIcon) {\n            const iconElement = accordionIcon.querySelector('.material-symbols-outlined');\n            if (iconElement) iconElement.textContent = 'expand_more';\n        }\n\n        // Render contexts list\n        this.renderContextsEditList();\n\n        // Reset save button state\n        const saveBtn = document.getElementById('settings-save-btn') as HTMLButtonElement | null;\n        const saveIcon = document.getElementById('settings-save-icon');\n        const saveSpinner = document.getElementById('settings-save-spinner') as HTMLElement | null;\n        const saveText = document.getElementById('settings-save-text');\n\n        if (saveBtn) saveBtn.disabled = false;\n        if (saveIcon) {\n            saveIcon.style.display = 'inline-flex';\n            const iconElement = saveIcon.querySelector('.material-symbols-outlined');\n            if (iconElement) iconElement.textContent = 'check';\n        }\n        if (saveSpinner) saveSpinner.style.display = 'none';\n        if (saveText) saveText.textContent = 'Save';\n\n        this.elements.settingsModal?.classList.add('is-active');\n    }\n\n    closeSettingsModal(): void {\n        // Reset accordion to collapsed state before closing\n        const accordionContent = document.getElementById('contexts-accordion-content') as HTMLElement | null;\n        const accordionIcon = document.getElementById('contexts-accordion-icon');\n        if (accordionContent) {\n            accordionContent.style.display = 'none';\n            accordionContent.style.opacity = '1'; // Reset opacity\n        }\n        if (accordionIcon) {\n            const iconElement = accordionIcon.querySelector('.material-symbols-outlined');\n            if (iconElement) iconElement.textContent = 'expand_more';\n        }\n\n        this.elements.settingsModal?.classList.remove('is-active');\n    }\n\n    closeOnboardingModal(): void {\n        this.elements.onboardingModal?.classList.remove('is-active');\n        // No need to store in localStorage anymore since we use backend isFirstLogin flag\n    }\n\n    showDeleteNoteModal(context: string, date: string, formattedDate: string): void {\n        const modal = document.getElementById('delete-note-modal') as HTMLElement & { dataset: { context?: string; date?: string } } | null;\n        const message = document.getElementById('delete-note-message');\n\n        if (modal && message) {\n            // Store the note info for later use\n            modal.dataset.context = context;\n            modal.dataset.date = date;\n\n            // Update message with formatted date\n            message.textContent = `Are you sure you want to delete the note for ${formattedDate}?`;\n\n            modal.classList.add('is-active');\n        }\n    }\n\n    closeDeleteNoteModal(): void {\n        const modal = document.getElementById('delete-note-modal') as HTMLElement & { dataset: { context?: string; date?: string } } | null;\n        if (modal) {\n            modal.classList.remove('is-active');\n            delete modal.dataset.context;\n            delete modal.dataset.date;\n        }\n    }\n\n    closeAllModals(): void {\n        this.closeContextModal();\n        this.closeSettingsModal();\n        this.closeOnboardingModal();\n        this.closeDeleteNoteModal();\n    }\n\n    // Clock\n    startClock(): void {\n        this.updateCurrentDateTime();\n        setInterval(() => this.updateCurrentDateTime(), 1000);\n    }\n\n    updateCurrentDateTime(): void {\n        const settings = state.get('userSettings');\n        const timezone = settings.timezone || 'UTC';\n        const serverTimeOffset = state.get('serverTimeOffset');\n        const now = new Date(Date.now() + serverTimeOffset);\n\n        const timeOptions: Intl.DateTimeFormatOptions = {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n            timeZone: timezone\n        };\n\n        const dateOptions: Intl.DateTimeFormatOptions = {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            timeZone: timezone\n        };\n\n        const timeString = now.toLocaleTimeString('en-US', timeOptions);\n        const dateString = now.toLocaleDateString('en-US', dateOptions);\n\n        if (this.elements.currentTime) {\n            this.elements.currentTime.textContent = timeString;\n        }\n        if (this.elements.currentDate) {\n            this.elements.currentDate.textContent = dateString;\n        }\n\n        // Check if day changed and update calendar\n        const currentDate = (state as any).get('today') as string;\n        if (this.lastKnownDate && this.lastKnownDate !== currentDate) {\n            calendar.render();\n        }\n        this.lastKnownDate = currentDate as string | null;\n    }\n\n    updateDatePickerDisplay(dateStr: string): void {\n        const displayElement = document.getElementById('date-picker-display');\n        if (!displayElement || !dateStr) return;\n\n        const settings = state.get('userSettings');\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n        const [year, month, day] = dateStr.split('-').map(Number);\n\n        // Format date based on user preference\n        const yy = String(year).substring(2); // Get last 2 digits of year\n        const mm = String(month).padStart(2, '0');\n        const dd = String(day).padStart(2, '0');\n\n        let formattedDate: string;\n        if (dateFormat === 'MM-DD-YY') {\n            formattedDate = `${mm}/${dd}/${yy}`;\n        } else {\n            formattedDate = `${dd}/${mm}/${yy}`;\n        }\n\n        displayElement.textContent = formattedDate;\n    }\n\n    updateContextSelectorVisibility(): void {\n        const settings = state.get('userSettings');\n        const uniqueContextMode = settings.uniqueContextMode || false;\n\n        // Get context selector containers (both desktop and mobile)\n        const desktopContextContainer = document.getElementById('desktop-context-selector');\n        const mobileContextContainer = document.getElementById('mobile-context-selector');\n\n        if (uniqueContextMode) {\n            // Hide context selectors\n            if (desktopContextContainer) {\n                desktopContextContainer.style.display = 'none';\n            }\n            if (mobileContextContainer) {\n                mobileContextContainer.style.display = 'none';\n            }\n        } else {\n            // Show context selectors\n            if (desktopContextContainer) {\n                desktopContextContainer.style.display = '';\n            }\n            if (mobileContextContainer) {\n                mobileContextContainer.style.display = '';\n            }\n        }\n    }\n\n    updateBreadcrumbVisibility(): void {\n        const settings = state.get('userSettings');\n        const showBreadcrumb = settings.showBreadcrumb === true;\n\n        const breadcrumb = document.getElementById('drive-breadcrumb');\n        const mainSection = document.querySelector('.main-section');\n\n        // Show/hide breadcrumb\n        if (breadcrumb) {\n            breadcrumb.style.display = showBreadcrumb ? '' : 'none';\n        }\n\n        // Set data attribute that CSS will use to adjust spacing\n        if (mainSection) {\n            if (showBreadcrumb) {\n                mainSection.removeAttribute('data-hide-breadcrumb');\n            } else {\n                mainSection.setAttribute('data-hide-breadcrumb', 'true');\n            }\n        }\n    }\n\n    updateMarkdownEditorVisibility(): void {\n        const settings = state.get('userSettings');\n        const showMarkdownEditor = settings.showMarkdownEditor === true;\n\n        // Get the Quill toolbar\n        const toolbar = document.querySelector('.ql-toolbar') as HTMLElement | null;\n        if (toolbar) {\n            toolbar.style.display = showMarkdownEditor ? '' : 'none';\n        }\n\n        // The editor itself should remain enabled based on context selection,\n        // regardless of toolbar visibility\n        const context = state.get('selectedContext');\n        // Editor should be enabled if we have a context, regardless of toolbar visibility\n        markdownEditor.setDisabled(context ? false : true);\n    }\n\n    updateNewContextButtonVisibility(): void {\n        const settings = state.get('userSettings');\n        const hideNewContextButton = settings.hideNewContextButton === true;\n\n        // Get new context buttons (both desktop and mobile)\n        const desktopNewContextBtn = document.getElementById('desktop-new-context-btn');\n        const mobileNewContextBtn = document.getElementById('mobile-new-context-btn');\n\n        // Hide or show buttons\n        if (desktopNewContextBtn) {\n            desktopNewContextBtn.style.display = hideNewContextButton ? 'none' : '';\n        }\n        if (mobileNewContextBtn) {\n            mobileNewContextBtn.style.display = hideNewContextButton ? 'none' : '';\n        }\n    }\n\n    renderContextsEditList(): void {\n        const contextsList = state.get('contexts');\n        const container = document.getElementById('contexts-edit-list');\n\n        if (!container) return;\n\n        if (contextsList.length === 0) {\n            container.innerHTML = '<p class=\"has-text-centered has-text-grey-light py-5\">No contexts yet. Create your first context to get started!</p>';\n            return;\n        }\n\n        container.innerHTML = contextsList.map((ctx, _index) => {\n            // Normalize old hex colors to Bulma colors\n            const normalizedColor = this.normalizeToBulmaColor(ctx.color);\n\n            return `\n            <div class=\"is-flex is-align-items-center is-justify-content-space-between mb-3\"\n                 style=\"padding: 0.75rem 1rem; background: var(--bulma-scheme-main-bis); border-left: 3px solid var(--bulma-${normalizedColor}); border-radius: 6px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\">\n                <div class=\"is-flex is-align-items-center\" style=\"gap: 0.75rem; flex: 1; min-width: 0;\">\n                    <span style=\"display: block; width: 12px; height: 12px; background: var(--bulma-${normalizedColor}); border-radius: 50%; flex-shrink: 0;\"></span>\n                    <span style=\"font-size: 0.9rem; font-weight: 500; color: var(--bulma-text); overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\">${ctx.name}</span>\n                </div>\n                <div class=\"is-flex is-align-items-center\" style=\"gap: 0.35rem;\">\n                    <button class=\"button is-small context-action-btn context-edit-btn\"\n                            onclick=\"window.showEditContextModal('${ctx.id}')\"\n                            title=\"Edit context\"\n                            style=\"padding: 0.35rem; border: none; background: transparent; border-radius: 50%; width: 32px; height: 32px;\">\n                        <span class=\"icon is-small\">\n                            <span class=\"material-symbols-outlined\" style=\"font-size: 18px; color: var(--bulma-grey);\">edit</span>\n                        </span>\n                    </button>\n                    <button class=\"button is-small context-action-btn context-delete-btn\"\n                            onclick=\"window.showDeleteContextModal('${ctx.id}', '${ctx.name.replace(/'/g, \"\\\\'\")}')\"\n                            title=\"Delete context\"\n                            style=\"padding: 0.35rem; border: none; background: transparent; border-radius: 50%; width: 32px; height: 32px;\">\n                        <span class=\"icon is-small\">\n                            <span class=\"material-symbols-outlined\" style=\"font-size: 18px; color: var(--bulma-grey);\">delete</span>\n                        </span>\n                    </button>\n                </div>\n            </div>\n        `;\n        }).join('');\n    }\n\n    getColorLabel(color: string): string {\n        const labels: { [key: string]: string } = {\n            'text': 'Text (Gray)',\n            'link': 'Link (Blue)',\n            'primary': 'Primary (Cyan)',\n            'info': 'Info (Light Blue)',\n            'success': 'Success (Green)',\n            'warning': 'Warning (Yellow)',\n            'danger': 'Danger (Red)'\n        };\n        return labels[color] || color;\n    }\n\n    setupColorButtons(): void {\n        const hiddenInput = document.getElementById('context-color') as HTMLInputElement | null;\n\n        // Get fresh button references each time\n        const buttons = document.querySelectorAll('#context-color-buttons .color-btn');\n        if (!buttons.length) return;\n\n        buttons.forEach(button => {\n            // Remove old listeners by cloning\n            const newButton = button.cloneNode(true);\n            button.parentNode!.replaceChild(newButton, button);\n        });\n\n        // Get fresh references after cloning\n        const colorButtons = document.querySelectorAll('#context-color-buttons .color-btn');\n\n        colorButtons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                e.preventDefault();\n                const color = (button as HTMLElement).dataset.color;\n\n                // Update hidden input\n                if (hiddenInput && color) hiddenInput.value = color;\n\n                // Update active state - get fresh references again\n                const allButtons = document.querySelectorAll('#context-color-buttons .color-btn');\n                allButtons.forEach(btn => {\n                    (btn as HTMLElement).classList.remove('is-active');\n                    (btn as HTMLElement).style.border = '3px solid transparent';\n                    (btn as HTMLElement).style.borderRadius = '8px';\n                });\n\n                (button as HTMLElement).classList.add('is-active');\n                (button as HTMLElement).style.border = '3px solid var(--bulma-text)';\n                (button as HTMLElement).style.borderRadius = '8px';\n            });\n        });\n    }\n\n    selectColorButton(color: string): void {\n        const colorButtons = document.querySelectorAll('#context-color-buttons .color-btn');\n        const hiddenInput = document.getElementById('context-color') as HTMLInputElement | null;\n\n        if (hiddenInput) hiddenInput.value = color;\n\n        colorButtons.forEach(btn => {\n            (btn as HTMLElement).classList.remove('is-active');\n            (btn as HTMLElement).style.border = '3px solid transparent';\n            (btn as HTMLElement).style.borderRadius = '8px';\n\n            if ((btn as HTMLElement).dataset.color === color) {\n                (btn as HTMLElement).classList.add('is-active');\n                (btn as HTMLElement).style.border = `3px solid var(--bulma-text)`;\n                (btn as HTMLElement).style.borderRadius = '8px';\n            }\n        });\n    }\n\n    normalizeToBulmaColor(color: string): string {\n        // If it's already a Bulma color name, return it\n        const bulmaColors = ['text', 'link', 'primary', 'info', 'success', 'warning', 'danger'];\n        if (bulmaColors.includes(color)) {\n            return color;\n        }\n\n        // Map old hex colors to closest Bulma color\n        const hexToColor: { [key: string]: string } = {\n            '#485fc7': 'primary',\n            '#3e8ed0': 'info',\n            '#48c78e': 'success',\n            '#ffe08a': 'warning',\n            '#f14668': 'danger'\n        };\n\n        return hexToColor[color] || 'primary';\n    }\n\n    setupMobileNavigation(): void {\n        // Toggle sidebar (notes list)\n        this.elements.mobileNotesToggle?.addEventListener('click', () => {\n            this.toggleMobileSidebar();\n        });\n\n        // Toggle calendar\n        this.elements.mobileCalendarToggle?.addEventListener('click', () => {\n            this.toggleMobileCalendar();\n        });\n\n        // Close sidebar\n        this.elements.sidebarClose?.addEventListener('click', () => {\n            this.closeMobileSidebar();\n        });\n\n        // Close calendar\n        this.elements.calendarClose?.addEventListener('click', () => {\n            this.closeMobileCalendar();\n        });\n\n        // Close on overlay click\n        this.elements.sidebarOverlay?.addEventListener('click', () => {\n            this.closeMobileSidebar();\n        });\n\n        this.elements.calendarOverlay?.addEventListener('click', () => {\n            this.closeMobileCalendar();\n        });\n\n        // Close mobile panels when selecting a note\n        if (this.elements.notesList) {\n            this.elements.notesList.addEventListener('click', (e) => {\n                if ((e.target as HTMLElement).tagName === 'A' && window.innerWidth <= 768) {\n                    this.closeMobileSidebar();\n                }\n            });\n        }\n\n        // Clean up mobile panel states on resize\n        window.addEventListener('resize', () => {\n            if (window.innerWidth > 768) {\n                // Remove mobile panel classes and reset styles when returning to desktop\n                if (this.elements.sidebar) {\n                    this.elements.sidebar.classList.remove('mobile-panel', 'active');\n                    this.elements.sidebar.style.display = '';\n                }\n                if (this.elements.calendarPanel) {\n                    this.elements.calendarPanel.classList.remove('mobile-panel', 'active');\n                    this.elements.calendarPanel.style.display = '';\n                }\n                if (this.elements.sidebarOverlay) {\n                    this.elements.sidebarOverlay.classList.remove('active');\n                }\n                if (this.elements.calendarOverlay) {\n                    this.elements.calendarOverlay.classList.remove('active');\n                }\n                document.body.style.overflow = '';\n            }\n        });\n    }\n\n    toggleMobileSidebar(): void {\n        if (!this.elements.sidebar || !this.elements.sidebarOverlay) return;\n\n        // Only work on mobile screens\n        if (window.innerWidth > 768) return;\n\n        const isActive = this.elements.sidebar.classList.contains('mobile-panel');\n\n        if (!isActive) {\n            // Add mobile-panel class and show\n            this.elements.sidebar.classList.add('mobile-panel');\n            this.elements.sidebar.style.display = 'flex';\n        }\n\n        // Toggle active state\n        this.elements.sidebar.classList.toggle('active');\n        this.elements.sidebarOverlay.classList.toggle('active');\n\n        // Prevent body scroll when panel is open\n        if (this.elements.sidebar.classList.contains('active')) {\n            document.body.style.overflow = 'hidden';\n        } else {\n            document.body.style.overflow = '';\n        }\n    }\n\n    closeMobileSidebar(): void {\n        if (!this.elements.sidebar || !this.elements.sidebarOverlay) return;\n\n        this.elements.sidebar.classList.remove('active');\n        this.elements.sidebarOverlay.classList.remove('active');\n        document.body.style.overflow = '';\n    }\n\n    toggleMobileCalendar(): void {\n        if (!this.elements.calendarPanel || !this.elements.calendarOverlay) return;\n\n        // Only work on mobile screens\n        if (window.innerWidth > 768) return;\n\n        const isActive = this.elements.calendarPanel.classList.contains('mobile-panel');\n\n        if (!isActive) {\n            // Add mobile-panel class and show\n            this.elements.calendarPanel.classList.add('mobile-panel');\n            this.elements.calendarPanel.style.display = 'flex';\n        }\n\n        // Toggle active state\n        this.elements.calendarPanel.classList.toggle('active');\n        this.elements.calendarOverlay.classList.toggle('active');\n\n        // Prevent body scroll when panel is open\n        if (this.elements.calendarPanel.classList.contains('active')) {\n            document.body.style.overflow = 'hidden';\n        } else {\n            document.body.style.overflow = '';\n        }\n    }\n\n    closeMobileCalendar(): void {\n        if (!this.elements.calendarPanel || !this.elements.calendarOverlay) return;\n\n        this.elements.calendarPanel.classList.remove('active');\n        this.elements.calendarOverlay.classList.remove('active');\n        document.body.style.overflow = '';\n    }\n\n    updateBreadcrumb(): void {\n        const context = state.get('selectedContext');\n        const selectedDate = state.get('selectedDate');\n        const settings = state.get('userSettings');\n        const timezone = settings.timezone || 'UTC';\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n        if (this.elements.breadcrumbContextName && context) {\n            this.elements.breadcrumbContextName.textContent = context;\n        }\n\n        if (this.elements.breadcrumbDateName && selectedDate) {\n            // Format date the same way as notes list\n            const [year, month, day] = selectedDate.split('-').map(Number);\n            const dateObj = new Date(year, month - 1, day);\n\n            // Get the day name in English\n            const dayName = dateObj.toLocaleDateString('en-US', {\n                weekday: 'long',\n                timeZone: timezone\n            });\n\n            // Format date based on user preference\n            const yy = String(year).substring(2); // Get last 2 digits of year\n            const mm = String(month).padStart(2, '0');\n            const dd = String(day).padStart(2, '0');\n\n            let dateStr: string;\n            if (dateFormat === 'MM-DD-YY') {\n                dateStr = `${mm}-${dd}-${yy}`;\n            } else {\n                dateStr = `${dd}-${mm}-${yy}`;\n            }\n\n            // Format: \"Monday, 24-10-25.md\" or \"Monday, 10-24-25.md\" depending on dateFormat\n            const formattedDate = `${dayName}, ${dateStr}.md`;\n            this.elements.breadcrumbDateName.textContent = formattedDate;\n        }\n    }\n\n    openFullscreenNote(): void {\n        const context = state.get('selectedContext');\n        const selectedDate = state.get('selectedDate');\n\n        if (!context || !selectedDate) return;\n\n        // Format date for display\n        const settings = state.get('userSettings');\n        const timezone = settings.timezone || 'UTC';\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n        const [year, month, day] = selectedDate.split('-').map(Number);\n        const dateObj = new Date(year, month - 1, day);\n\n        const dayName = dateObj.toLocaleDateString('en-US', {\n            weekday: 'long',\n            timeZone: timezone\n        });\n\n        const yy = String(year).substring(2);\n        const mm = String(month).padStart(2, '0');\n        const dd = String(day).padStart(2, '0');\n\n        let dateStr: string;\n        if (dateFormat === 'MM-DD-YY') {\n            dateStr = `${mm}-${dd}-${yy}`;\n        } else {\n            dateStr = `${dd}-${mm}-${yy}`;\n        }\n\n        const formattedDate = `${dayName}, ${dateStr}.md`;\n\n        // Get modal elements\n        const modal = document.getElementById('fullscreen-note-modal');\n        const dateEl = document.getElementById('fullscreen-note-date');\n        const editorEl = document.getElementById('fullscreen-note-editor');\n\n        if (!modal || !dateEl || !editorEl) return;\n\n        // Set date\n        dateEl.textContent = formattedDate;\n\n        // Get current note content using the markdown editor\n        const content = markdownEditor.getContent();\n\n        // Create a read-only Quill instance for fullscreen\n        if ((window as any).Quill) {\n            // Clear previous instance if exists\n            editorEl.innerHTML = '';\n\n            const fullscreenQuill = new (window as any).Quill(editorEl, {\n                theme: 'snow',\n                readOnly: true,\n                modules: {\n                    toolbar: false\n                }\n            });\n\n            fullscreenQuill.root.innerHTML = content;\n\n            // Style the editor\n            fullscreenQuill.root.style.fontSize = '16px';\n            fullscreenQuill.root.style.lineHeight = '1.6';\n        } else {\n            // Fallback if Quill not loaded\n            editorEl.innerHTML = content;\n        }\n\n        // Show modal\n        modal.classList.add('is-active');\n\n        // Add escape key listener\n        const escapeHandler = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                this.closeFullscreenNote();\n                document.removeEventListener('keydown', escapeHandler);\n            }\n        };\n        document.addEventListener('keydown', escapeHandler);\n    }\n\n    closeFullscreenNote(): void {\n        const modal = document.getElementById('fullscreen-note-modal');\n        if (modal) {\n            modal.classList.remove('is-active');\n        }\n    }\n}\n\nexport const ui = new UIManager();\n\n// Expose globally for browser compatibility and HTML onclick handlers\nif (typeof window !== 'undefined') {\n    (window as any).ui = ui;\n\n    // Context modal handlers\n    (window as any).showNewContextModal = () => ui.showContextModal();\n    (window as any).closeContextModal = () => ui.closeContextModal();\n\n    (window as any).createContext = async () => {\n        const nameInput = document.getElementById('context-name') as HTMLInputElement | null;\n        const colorInput = document.getElementById('context-color') as HTMLInputElement | null;\n\n        const name = nameInput?.value.trim();\n        const color = colorInput?.value;\n\n        if (!name) return;\n\n        await contexts.createContext(name, color);\n        ui.closeContextModal();\n\n        await notes.loadNotesList(name);\n        const selectedDate = state.get('selectedDate');\n        if (selectedDate) {\n            await notes.loadNote(name, selectedDate);\n        }\n    };\n\n    // Settings modal handlers\n    (window as any).showSettingsModal = () => ui.showSettingsModal();\n    (window as any).closeSettingsModal = () => ui.closeSettingsModal();\n\n    (window as any).saveSettings = async () => {\n        const saveBtn = document.getElementById('settings-save-btn') as HTMLButtonElement | null;\n        const saveIcon = document.getElementById('settings-save-icon');\n        const saveSpinner = document.getElementById('settings-save-spinner');\n        const saveText = document.getElementById('settings-save-text');\n        const cancelBtn = document.getElementById('settings-cancel-btn') as HTMLButtonElement | null;\n\n        const weekStartSelect = document.getElementById('week-start-select') as HTMLSelectElement | null;\n        const timezoneSelect = document.getElementById('timezone-select') as HTMLSelectElement | null;\n        const dateFormatSelect = document.getElementById('date-format-select') as HTMLSelectElement | null;\n        const uniqueContextModeSwitch = document.getElementById('unique-context-mode-switch') as HTMLInputElement | null;\n        const showBreadcrumbSwitch = document.getElementById('show-breadcrumb-switch') as HTMLInputElement | null;\n        const showMarkdownEditorSwitch = document.getElementById('show-markdown-editor-switch') as HTMLInputElement | null;\n        const hideNewContextButtonSwitch = document.getElementById('hide-new-context-button-switch') as HTMLInputElement | null;\n        const currentSettings = state.get('userSettings');\n\n        const weekStart = parseInt(weekStartSelect?.value || '0');\n        const timezone = timezoneSelect?.value || 'UTC';\n        const dateFormat = dateFormatSelect?.value || 'DD-MM-YY';\n        const uniqueContextMode = uniqueContextModeSwitch?.checked || false;\n        const showBreadcrumb = showBreadcrumbSwitch?.checked === true;\n        const showMarkdownEditor = showMarkdownEditorSwitch?.checked === true;\n        const hideNewContextButton = hideNewContextButtonSwitch?.checked === true;\n        const theme = currentSettings.theme || 'dark';\n\n        // Show loading state\n        if (saveBtn) saveBtn.disabled = true;\n        if (cancelBtn) cancelBtn.disabled = true;\n        if (saveIcon) (saveIcon as HTMLElement).style.display = 'none';\n        if (saveSpinner) (saveSpinner as HTMLElement).style.display = 'inline-block';\n        if (saveText) saveText.textContent = 'Saving...';\n\n        try {\n            await api.updateSettings({ theme, weekStart, timezone, dateFormat, uniqueContextMode, showBreadcrumb, showMarkdownEditor, hideNewContextButton });\n\n            state.set('userSettings', { theme, weekStart, timezone, dateFormat, uniqueContextMode, showBreadcrumb, showMarkdownEditor, hideNewContextButton });\n            calendar.render();\n\n            // Show success state briefly\n            if (saveText) saveText.textContent = 'Saved!';\n            if (saveSpinner) (saveSpinner as HTMLElement).style.display = 'none';\n            if (saveIcon) {\n                (saveIcon as HTMLElement).style.display = 'inline-flex';\n                const iconEl = saveIcon.querySelector('.material-symbols-outlined');\n                if (iconEl) iconEl.textContent = 'check_circle';\n            }\n\n            // Wait a bit before closing to show success\n            await new Promise(resolve => setTimeout(resolve, 500));\n\n            ui.closeSettingsModal();\n\n            // Re-render notes list to update date format\n            ui.renderNotesList();\n\n            // Update UI based on unique context mode\n            ui.updateContextSelectorVisibility();\n\n            // Update breadcrumb and markdown editor visibility\n            ui.updateBreadcrumbVisibility();\n            ui.updateMarkdownEditorVisibility();\n\n            // Update new context button visibility\n            ui.updateNewContextButtonVisibility();\n\n            // If unique context mode is enabled, select first context\n            if (uniqueContextMode) {\n                const contextsList = state.get('contexts');\n                if (contextsList && contextsList.length > 0) {\n                    contexts.selectContext(contextsList[0].name);\n                    notes.setTodayDate();\n                    notes.loadNotesList(contextsList[0].name);\n                }\n            }\n        } catch (error) {\n            console.error('Failed to save settings:', error);\n            notifications.error('Failed to save settings');\n\n            // Reset button state on error\n            if (saveText) saveText.textContent = 'Save';\n            if (saveSpinner) (saveSpinner as HTMLElement).style.display = 'none';\n            if (saveIcon) {\n                (saveIcon as HTMLElement).style.display = 'inline-flex';\n                const iconEl = saveIcon.querySelector('.material-symbols-outlined');\n                if (iconEl) iconEl.textContent = 'check';\n            }\n        } finally {\n            // Re-enable buttons\n            if (saveBtn) saveBtn.disabled = false;\n            if (cancelBtn) cancelBtn.disabled = false;\n        }\n    };\n\n    // Onboarding modal handlers\n    (window as any).closeOnboardingModal = () => ui.closeOnboardingModal();\n\n    // Delete note modal handlers\n    (window as any).closeDeleteNoteModal = () => ui.closeDeleteNoteModal();\n\n    (window as any).confirmDeleteNote = async () => {\n        const modal = document.getElementById('delete-note-modal') as HTMLElement & { dataset: { context?: string; date?: string } } | null;\n        if (!modal) return;\n\n        const context = modal.dataset.context;\n        const dateStr = modal.dataset.date;\n\n        if (context && dateStr) {\n            // Close modal first\n            ui.closeDeleteNoteModal();\n\n            // Delete note immediately (notes module will handle UI updates)\n            await notes.deleteNote(context, dateStr);\n        }\n    };\n\n    // Edit context modal handlers\n    (window as any).showEditContextModal = (contextId: string) => {\n        const contextsList = state.get('contexts');\n        const context = contextsList.find(c => c.id === contextId);\n        if (!context) return;\n\n        const modal = document.getElementById('edit-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        const nameInput = document.getElementById('edit-context-name') as HTMLInputElement | null;\n        const colorValue = document.getElementById('edit-context-color-value') as HTMLInputElement | null;\n        const colorsContainer = document.getElementById('edit-context-colors');\n\n        if (!modal || !nameInput || !colorValue || !colorsContainer) return;\n\n        // Set values\n        nameInput.value = context.name;\n        const normalizedColor = ui.normalizeToBulmaColor(context.color);\n        colorValue.value = normalizedColor;\n\n        // Render color buttons\n        const colors = ['text', 'link', 'primary', 'info', 'success', 'warning', 'danger'];\n        colorsContainer.innerHTML = colors.map(color => {\n            const isActive = normalizedColor === color;\n            const borderStyle = isActive ? 'border: 3px solid var(--bulma-text)' : 'border: 3px solid transparent';\n            return `\n                <button type=\"button\" class=\"button color-btn ${isActive ? 'is-active' : ''}\"\n                        data-color=\"${color}\"\n                        onclick=\"window.selectEditContextColor('${color}')\"\n                        title=\"${ui.getColorLabel(color)}\"\n                        style=\"width: 32px; height: 32px; padding: 3px; ${borderStyle}; border-radius: 6px;\">\n                    <span style=\"display: block; width: 100%; height: 100%; background: var(--bulma-${color}); border-radius: 4px;\"></span>\n                </button>\n            `;\n        }).join('');\n\n        // Store context ID and show modal\n        modal.dataset.contextId = contextId;\n        modal.classList.add('is-active');\n    };\n\n    (window as any).selectEditContextColor = (color: string) => {\n        const colorValue = document.getElementById('edit-context-color-value') as HTMLInputElement | null;\n        if (!colorValue) return;\n\n        colorValue.value = color;\n\n        // Update button states\n        const buttons = document.querySelectorAll('#edit-context-colors .color-btn');\n        buttons.forEach(btn => {\n            const btnColor = (btn as HTMLElement).dataset.color;\n            if (btnColor === color) {\n                btn.classList.add('is-active');\n                (btn as HTMLElement).style.border = '3px solid var(--bulma-text)';\n            } else {\n                btn.classList.remove('is-active');\n                (btn as HTMLElement).style.border = '3px solid transparent';\n            }\n        });\n    };\n\n    (window as any).closeEditContextModal = () => {\n        const modal = document.getElementById('edit-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        if (modal) {\n            modal.classList.remove('is-active');\n            delete modal.dataset.contextId;\n        }\n    };\n\n    (window as any).confirmEditContext = async () => {\n        const modal = document.getElementById('edit-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        if (!modal) return;\n\n        const contextId = modal.dataset.contextId;\n        const nameInput = document.getElementById('edit-context-name') as HTMLInputElement | null;\n        const colorValue = document.getElementById('edit-context-color-value') as HTMLInputElement | null;\n\n        if (!contextId || !nameInput || !colorValue) return;\n\n        const name = nameInput.value.trim();\n        const color = colorValue.value;\n\n        if (!name) {\n            alert('Please enter a context name');\n            return;\n        }\n\n        // Close modal\n        (window as any).closeEditContextModal();\n\n        // Update context\n        await contexts.updateContext(contextId, name, color);\n\n        // Refresh UI\n        ui.renderContextsEditList();\n        ui.renderContextsSelect();\n    };\n\n    // Delete context modal handlers\n    (window as any).showDeleteContextModal = (contextId: string, contextName: string) => {\n        const modal = document.getElementById('delete-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        const nameElement = document.getElementById('delete-context-name');\n\n        if (modal && nameElement) {\n            nameElement.textContent = contextName;\n            modal.dataset.contextId = contextId;\n            modal.classList.add('is-active');\n        }\n    };\n\n    (window as any).closeDeleteContextModal = () => {\n        const modal = document.getElementById('delete-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        if (modal) {\n            modal.classList.remove('is-active');\n            delete modal.dataset.contextId;\n        }\n    };\n\n    (window as any).confirmDeleteContext = async () => {\n        const modal = document.getElementById('delete-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        if (!modal) return;\n\n        const contextId = modal.dataset.contextId;\n\n        if (contextId) {\n            // Close modal first\n            (window as any).closeDeleteContextModal();\n\n            // Delete context (will also delete all its notes)\n            await contexts.deleteContext(contextId);\n\n            // Refresh UI\n            ui.renderContextsEditList();\n            ui.renderContextsSelect();\n        }\n    };\n}\n","/**\n * Main Application Entry Point\n * Initializes and coordinates all modules\n */\n\nimport { state } from './utils/state'\nimport { cache } from './utils/cache'\nimport { api } from './services/api'\nimport { events, EVENT } from './utils/events'\nimport { auth } from './services/auth'\nimport { notes } from './services/notes'\nimport { contexts } from './services/contexts'\nimport { calendar } from './components/Calendar'\nimport { markdownEditor } from './components/Editor'\nimport { notifications } from './components/Notifications'\nimport { ui } from './components/UI'\n\ndeclare global {\n  interface Window {\n    __APP__?: Application\n    __GOOGLE_CLIENT_ID__?: string\n    __DEBUG__?: any\n  }\n}\n\nclass Application {\n  async init(googleClientId: string): Promise<void> {\n    console.log('[MAIN] Initializing with client ID:', googleClientId)\n\n    // Initialize cache\n    try {\n      await cache.init()\n      console.log('Cache initialized')\n    } catch (err) {\n      console.warn('IndexedDB not available', err)\n    }\n\n    // Setup event handlers\n    this.setupEventHandlers()\n\n    // Initialize UI Manager\n    ui.init()\n\n    // Initialize Markdown Editor\n    await markdownEditor.init('markdown-editor-container', (content: string) => {\n      notes.handleNoteInput(content)\n    })\n\n    // Check authentication\n    const isAuthenticated = await auth.checkAuth()\n\n    if (isAuthenticated) {\n      await this.showApp()\n    } else {\n      // Hide app and show auth section\n      const appSection = document.getElementById('app-section')\n      const authSection = document.getElementById('auth-section')\n      if (appSection) appSection.classList.remove('visible')\n      if (authSection) authSection.classList.add('visible')\n    }\n\n    // Make body visible after determining which section to show\n    document.body.classList.add('loaded')\n\n    // Initialize Google OAuth client (async, will wait for script to load)\n    auth.initGoogleClient(googleClientId).catch(error => {\n      console.error('[MAIN] Failed to initialize Google client:', error)\n    })\n  }\n\n  private setupEventHandlers(): void {\n    // Session expired handling\n    events.on('session-expired' as any, (e: CustomEvent) => {\n      if (e.detail.isNoteRequest) {\n        notifications.warning(\n          'Session expired. Your notes are saved locally and will sync when you sign in again.',\n          {\n            title: 'Session Expired',\n            duration: 10000\n          }\n        )\n      }\n    })\n\n    // Note events\n    events.on(EVENT.NOTE_LOADED, (e: CustomEvent) => {\n      markdownEditor.setContent(e.detail.content)\n    })\n\n    events.on(EVENT.NOTE_SAVED, () => {\n      console.log('[Note] Saved')\n    })\n\n    // Context events\n    events.on(EVENT.CONTEXT_CHANGED, async (e: CustomEvent) => {\n      const context = e.detail.context\n\n      // Force flush any pending editor changes\n      markdownEditor.forceFlush()\n\n      // Wait for flush to process\n      await new Promise(resolve => setTimeout(resolve, 100))\n\n      if (context) {\n        let selectedDate = state.get('selectedDate')\n        if (!selectedDate) {\n          selectedDate = (state as any).get('today') as string\n        }\n\n        // Load notes list for context\n        await notes.loadNotesList(context)\n\n        calendar.render()\n        if (selectedDate) {\n          notes.ensureNoteInList(context, selectedDate)\n          await notes.loadNote(context, selectedDate)\n        }\n      } else {\n        markdownEditor.setContent('')\n      }\n    })\n\n    // Date events\n    events.on(EVENT.DATE_CHANGED, async (e: CustomEvent) => {\n      const dateStr = e.detail.date\n      const context = state.get('selectedContext')\n\n      // Force flush pending changes\n      markdownEditor.forceFlush()\n      await new Promise(resolve => setTimeout(resolve, 100))\n\n      if (context) {\n        const currentContext = state.get('selectedContext')\n        const currentDate = state.get('selectedDate')\n\n        if (currentContext !== context || currentDate !== dateStr) {\n          console.log('[MAIN] Context/date changed during handler, skipping')\n          return\n        }\n\n        await notes.loadNote(context, dateStr)\n      }\n    })\n\n    // Auth events\n    events.on('auth-success' as any, async () => {\n      await this.showApp()\n    })\n\n    events.on('auth-logout' as any, () => {\n      markdownEditor.setContent('')\n    })\n\n    // UI events\n    events.on(EVENT.SHOW_ERROR, (e: CustomEvent) => {\n      if (e.detail.message) {\n        notifications.error(e.detail.message)\n      }\n    })\n\n    events.on(EVENT.SHOW_SUCCESS, (e: CustomEvent) => {\n      if (e.detail.message) {\n        notifications.success(e.detail.message)\n      }\n    })\n  }\n\n  private async showApp(): Promise<void> {\n    console.log('[MAIN] showApp called')\n\n    // Hide landing loader\n    const loader = document.getElementById('landing-loader')\n    if (loader) loader.classList.remove('visible')\n\n    // Show app section\n    const appSection = document.getElementById('app-section')\n    const authSection = document.getElementById('auth-section')\n    if (appSection) appSection.classList.add('visible')\n    if (authSection) authSection.classList.remove('visible')\n\n    try {\n      // Load contexts\n      console.log('[MAIN] Loading contexts...')\n      await contexts.loadContexts()\n\n      // Sync server time\n      this.syncServerTime()\n\n      // Set today's date\n      notes.setTodayDate()\n\n      // Render calendar\n      calendar.render()\n\n      // Auto-select last used context\n      const lastContext = contexts.restoreLastContext()\n      console.log('[MAIN] Last context:', lastContext)\n\n      if (lastContext) {\n        // Load notes list\n        await notes.loadNotesList(lastContext)\n\n        // Get today's date\n        const todayDate = (state as any).get('today') as string\n\n        // Ensure today's note exists in the list\n        notes.ensureNoteInList(lastContext, todayDate)\n\n        // Load today's note (create if doesn't exist)\n        await notes.loadNote(lastContext, todayDate)\n      }\n\n      console.log('[MAIN] App initialization complete')\n    } catch (error) {\n      console.error('[MAIN] Error initializing app:', error)\n      notifications.error('Failed to initialize app. Please refresh the page.', {\n        title: 'Initialization Error',\n        duration: 0\n      })\n    }\n  }\n\n  private async syncServerTime(): Promise<void> {\n    try {\n      const settings = state.get('userSettings')\n      const timezone = settings.timezone || 'UTC'\n      const clientTime = Date.now()\n\n      const data = await api.getServerTime(timezone)\n      const serverTime = (data.offset || 0) * 1000\n      const roundTripTime = Date.now() - clientTime\n      const offset = serverTime - clientTime + roundTripTime / 2\n\n      state.set('serverTimeOffset', offset)\n    } catch (error) {\n      console.error('Failed to sync server time:', error)\n    }\n\n    // Resync every minute\n    setTimeout(() => this.syncServerTime(), 60000)\n  }\n\n}\n\n// Initialize app when DOM is ready\nconst app = new Application()\n\n// Expose for window.onload and inline scripts\nwindow.__APP__ = app\n\n// Expose modules for debugging (development only)\nif (typeof window !== 'undefined' && window.location.hostname === 'localhost') {\n  window.__DEBUG__ = {\n    app,\n    state,\n    events,\n    notes,\n    contexts,\n    calendar,\n    auth,\n    api,\n    cache,\n    markdownEditor,\n    notifications,\n    ui\n  }\n  console.log('Debug mode enabled. Access modules via window.__DEBUG__')\n}\n\n// Auto-initialize\n;(async () => {\n  // Wait for template to inject GoogleClientID\n  await new Promise(resolve => setTimeout(resolve, 0))\n\n  // Get client ID from template (will be replaced by Jet)\n  const clientIdMeta = document.querySelector('meta[name=\"google-client-id\"]')\n  const googleClientId = clientIdMeta?.getAttribute('content') || window.__GOOGLE_CLIENT_ID__\n\n  if (googleClientId) {\n    await app.init(googleClientId)\n  } else {\n    console.error('Google Client ID not found')\n  }\n})()\n\nexport default app\n"],"names":["state","_state","_listeners","_computed","constructor","this","currentUser","userSettings","theme","weekStart","timezone","dateFormat","uniqueContextMode","showBreadcrumb","showMarkdownEditor","hideNewContextButton","selectedContext","selectedDate","contexts","notes","notesWithDates","currentCalendarMonth","Date","getMonth","currentCalendarYear","getFullYear","isLoggingOut","syncStatus","pending","syncing","serverTimeOffset","Map","get","key","has","set","value","oldValue","_notify","update","changes","Object","entries","forEach","subscribe","callback","Set","add","listeners","delete","subscribeMany","keys","unsubscribers","map","unsub","computed","fn","getState","newValue","error","wildcardListeners","s","now","parts","Intl","DateTimeFormat","timeZone","year","month","day","formatToParts","find","p","type","window","__STATE__","cache","db","dbName","version","pendingWrites","writeTimer","BATCH_DELAY","init","Promise","resolve","reject","request","indexedDB","open","onerror","onsuccess","result","onupgradeneeded","e","target","objectStoreNames","contains","createObjectStore","keyPath","saveNote","note","id","context","date","_localTimestamp","_cachedAt","updated_at","toISOString","scheduleBatchWrite","clearTimeout","setTimeout","flushPendingWrites","size","notesToWrite","Array","from","values","clear","tx","transaction","store","objectStore","put","oncomplete","saveNoteImmediate","getNote","saveNotes","getNotesByContext","getAll","allNotes","filter","n","saveContexts","isArray","ctx","getContexts","deleteNote","EventBus","EventTarget","emit","eventName","detail","dispatchEvent","CustomEvent","on","listener","addEventListener","removeEventListener","once","handler","event","events","EVENT","api","endpoint","options","response","fetch","headers","credentials","ok","data","json","catch","status","isNoteRequest","includes","message","Error","checkAuth","authenticated","login","accessToken","expiresIn","method","body","JSON","stringify","access_token","expires_in","loginWithCode","code","logout","createContext","updateContext","deleteContext","encodeURIComponent","getNotesList","limit","offset","encodedContext","encodedDate","updateSettings","settings","getServerTime","auth","codeClient","initializationPromise","user","initGoogleClient","clientId","checkGoogleLoaded","google","accounts","oauth2","initCodeClient","client_id","scope","ux_mode","handleAuthCodeResponse","loader","document","getElementById","classList","remove","success","signIn","requestCode","signOut","then","err","localStorage","sessionStorage","location","href","reload","clearAllCaches","deleteRequest","deleteDatabase","cacheNames","caches","all","cacheName","signInWithGoogle","saveTimeout","currentNoteContent","currentLoadToken","currentSelectToken","loadNote","loadToken","cachedNote","content","serverUpdatedAt","getTime","cachedUpdatedAt","updateNoteInList","loadNotesList","serverNotes","cachedNotes","noteMap","mergedNotes","sort","a","b","localeCompare","refreshNotesList","updatedNotes","ensureNoteInList","some","newNote","user_id","created_at","updatedNotesWithDates","handleNoteInput","capturedContext","capturedDate","currentContext","currentDate","selectDate","dateStr","selectToken","dateParts","split","parseInt","setTodayDate","Number","getCurrentNoteContent","d","length","nextNote","loadContexts","cachedContexts","navigator","onLine","name","color","newContext","updatedContexts","contextId","currentContexts","c","oldContext","setItem","selectContext","contextName","getSelectedContext","getContextColor","restoreLastContext","firstContext","lastContext","getItem","calendar","monthNames","dayNamesDefault","render","today","dayNames","slice","monthYearEl","textContent","adjustedFirstDay","getDay","daysInMonth","getDate","daysInPrevMonth","grid","html","join","i","String","padStart","classes","push","totalCells","remainingCells","innerHTML","querySelectorAll","dayEl","dataset","prevMonth","nextMonth","goToToday","markdownEditor","container","editor","editorElement","onChangeCallback","isUpdating","updateTimeout","contentVersion","containerId","onChange","ensureQuillLoaded","loadQuill","initQuill","Quill","css","createElement","rel","head","appendChild","script","src","onload","modules","toolbar","header","list","placeholder","formats","markdown","getMarkdown","root","getText","trim","applyToolbarVisibility","querySelector","style","display","enable","delta","getContents","currentList","listCounter","ops","op","insert","text","attrs","attributes","trimEnd","repeat","pop","line","substring","lastIndexOf","blockquote","formattedText","bold","italic","strike","link","setContent","disable","markdownToDelta","setContents","setText","lines","index","headerMatch","match","level","bulletMatch","parseInlineMarkdown","numberedMatch","taskMatch","quoteMatch","startsWith","regex","lastIndex","exec","getContent","setDisabled","disabled","pointerEvents","opacity","editorRoot","setPlaceholderMessage","focus","forceFlush","hasPendingChanges","notifications","queue","maxVisible","defaultDuration","className","setAttribute","show","title","duration","dismissible","onAction","actionLabel","Math","random","notification","element","children","warning","info","escapeHtml","closeBtn","dismiss","actionBtn","requestAnimationFrame","timeout","parentNode","removeChild","processQueue","visibleCount","next","shift","clearAll","div","ui","elements","lastKnownDate","INITIAL_RENDER_COUNT","renderedNotesCount","cacheElements","setupEventListeners","setupStateSubscriptions","setupUserDropdown","setupMobileNavigation","startClock","authSection","appSection","contextSelect","contextColorIndicator","mobileContextSelect","mobileContextColorIndicator","datePicker","breadcrumbContextName","breadcrumbDateName","markdownEditorContainer","saveIndicator","notesList","userEmail","currentTime","contextModal","settingsModal","onboardingModal","syncStatusText","themeToggleMenu","themeToggleSwitch","weekStartSelect","timezoneSelect","mobileNotesToggle","mobileCalendarToggle","sidebar","calendarPanel","sidebarOverlay","calendarOverlay","sidebarClose","calendarClose","editorFullscreenBtn","openFullscreenNote","editorDeleteBtn","dayName","toLocaleDateString","weekday","yy","mm","dd","formattedDateStr","formattedDate","showDeleteNoteModal","async","preventDefault","newTheme","documentElement","getAttribute","setTheme","checked","setupKeyboardShortcuts","modKey","platform","toUpperCase","indexOf","metaKey","ctrlKey","deleteModal","closeDeleteNoteModal","closeAllModals","userDropdown","userDropdownButton","settingsMenuItem","signoutMenuItem","stopPropagation","toggle","showSettingsModal","renderContextsSelect","renderNotesList","_context","updateBreadcrumb","newDate","updateDatePickerDisplay","updateEditorDeleteButton","updateContextIndicator","updateEditorState","email","updateContextSelectorVisibility","updateBreadcrumbVisibility","updateMarkdownEditorVisibility","updateNewContextButtonVisibility","contextsList","optionsHTML","opt","selectedIndex","normalizedColor","normalizeToBulmaColor","background","notesToRender","hasMore","min","loadMoreBtn","updateSaveIndicator","updateSyncStatus","updateThemeIcon","themeIcon","showApp","_skipAnimation","hasNoContexts","__ENV__","hideApp","showError","msg","showSuccess","showWarning","showInfo","showContextModal","nameInput","colorInput","setupColorButtons","selectColorButton","closeContextModal","dateFormatSelect","uniqueContextModeSwitch","showBreadcrumbSwitch","showMarkdownEditorSwitch","hideNewContextButtonSwitch","accordionContent","accordionIcon","iconElement","renderContextsEditList","saveBtn","saveIcon","saveSpinner","saveText","closeSettingsModal","closeOnboardingModal","modal","updateCurrentDateTime","setInterval","timeOptions","hour","minute","second","hour12","dateOptions","timeString","toLocaleTimeString","dateString","displayElement","desktopContextContainer","mobileContextContainer","breadcrumb","mainSection","removeAttribute","desktopNewContextBtn","mobileNewContextBtn","_index","replace","getColorLabel","primary","danger","hiddenInput","buttons","button","newButton","cloneNode","replaceChild","btn","border","borderRadius","colorButtons","toggleMobileSidebar","toggleMobileCalendar","closeMobileSidebar","closeMobileCalendar","tagName","innerWidth","overflow","dateEl","editorEl","fullscreenQuill","readOnly","fontSize","lineHeight","escapeHandler","closeFullscreenNote","showNewContextModal","saveSettings","cancelBtn","currentSettings","iconEl","confirmDeleteNote","showEditContextModal","colorValue","colorsContainer","isActive","borderStyle","selectEditContextColor","closeEditContextModal","confirmEditContext","alert","showDeleteContextModal","nameElement","closeDeleteContextModal","confirmDeleteContext","app","googleClientId","setupEventHandlers","syncServerTime","todayDate","clientTime","serverTime","__APP__","hostname","__DEBUG__","clientIdMeta","__GOOGLE_CLIENT_ID__"],"mappings":"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"}