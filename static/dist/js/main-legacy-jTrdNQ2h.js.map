{"version":3,"file":"main-legacy-jTrdNQ2h.js","sources":["../../../src/services/api.ts","../../../src/services/auth.ts","../../../src/services/notes.ts","../../../src/services/contexts.ts","../../../src/components/Calendar.ts","../../../src/components/Editor.ts","../../../src/components/Notifications.ts","../../../src/components/ui/colors.ts","../../../src/components/UI.ts","../../../src/components/ui/elements.ts","../../../src/main.ts"],"sourcesContent":["/**\n * API Client Module\n * Handles all backend communication\n */\n\nimport { state } from '@/utils/state'\nimport { events, EVENT } from '@/utils/events'\nimport type { User, Context, Note, UserSettings } from '@/types'\n\ninterface AuthResponse {\n  authenticated: boolean\n  user?: User\n}\n\ninterface LoginResponse {\n  success: boolean\n  user?: User\n  error?: string\n}\n\ninterface NoteResponse {\n  note: Note\n}\n\ninterface NotesListResponse {\n  notes: Note[]\n  total?: number\n}\n\ninterface ContextsResponse {\n  contexts: Context[]\n}\n\ninterface ServerTimeResponse {\n  timestamp: number  // Unix timestamp in seconds\n  timezone: string\n  iso: string\n}\n\nexport class APIClient {\n  // Base URL is empty string since we use relative paths\n  // private baseUrl = ''\n\n  async request<T = any>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    try {\n      const response = await fetch(endpoint, {\n        ...options,\n        headers: {\n          ...options.headers,\n          'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n      })\n\n      if (!response.ok) {\n        const data = await response.json().catch(() => ({})) as { error?: string }\n\n        if (response.status === 401 || response.status === 403) {\n          if (!state.get('isLoggingOut')) {\n            // Check if this is a note-related request\n            const isNoteRequest = endpoint.includes('/api/notes')\n            const message = isNoteRequest\n              ? 'Session expired. Your notes are saved locally and will sync when you sign in again.'\n              : 'Session expired. Please login again.'\n\n            events.emit(EVENT.SHOW_ERROR, { message })\n            events.emit('session-expired' as any, { isNoteRequest })\n          }\n          state.set('currentUser', null)\n          throw new Error('Session expired')\n        }\n\n        throw new Error(data.error || `Request failed with status ${response.status}`)\n      }\n\n      return await response.json()\n    } catch (error) {\n      if (!state.get('isLoggingOut')) {\n        // Don't show error notification if it's already been handled\n        if (error instanceof Error && !error.message.includes('Session expired')) {\n          events.emit(EVENT.SHOW_ERROR, {\n            message: error.message || 'An error occurred'\n          })\n        }\n      }\n      throw error\n    }\n  }\n\n  // Auth endpoints\n  async checkAuth(): Promise<AuthResponse> {\n    try {\n      const response = await fetch('/api/auth/me')\n      const data = await response.json()\n      return data\n    } catch (error) {\n      console.error('Auth check failed:', error)\n      return { authenticated: false }\n    }\n  }\n\n  async login(accessToken: string, expiresIn?: number): Promise<LoginResponse> {\n    return await this.request<LoginResponse>('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        access_token: accessToken,\n        expires_in: expiresIn || 3600\n      })\n    })\n  }\n\n  async loginWithCode(code: string): Promise<LoginResponse> {\n    return await this.request<LoginResponse>('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ code })\n    })\n  }\n\n  async logout(): Promise<void> {\n    await this.request('/api/auth/logout', {\n      method: 'POST'\n    })\n  }\n\n  // Contexts endpoints\n  async getContexts(): Promise<ContextsResponse> {\n    return await this.request<ContextsResponse>('/api/contexts')\n  }\n\n  async createContext(data: { name: string; color?: string }): Promise<Context> {\n    return await this.request<Context>('/api/contexts', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async updateContext(id: string, data: { name?: string; color?: string }): Promise<Context> {\n    return await this.request<Context>(`/api/contexts/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async deleteContext(id: string): Promise<void> {\n    await this.request(`/api/contexts/${id}`, {\n      method: 'DELETE'\n    })\n  }\n\n  // Notes endpoints\n  async getNote(context: string, date: string): Promise<NoteResponse> {\n    return await this.request<NoteResponse>(\n      `/api/notes?context=${encodeURIComponent(context)}&date=${date}`\n    )\n  }\n\n  async saveNote(data: { context: string; date: string; content: string; updated_at?: string }): Promise<Note> {\n    return await this.request<Note>('/api/notes', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async getNotesList(context: string, limit = 50, offset = 0): Promise<NotesListResponse> {\n    return await this.request<NotesListResponse>(\n      `/api/notes/list?context=${encodeURIComponent(context)}&limit=${limit}&offset=${offset}`\n    )\n  }\n\n  async deleteNote(context: string, date: string): Promise<void> {\n    const encodedContext = encodeURIComponent(context)\n    const encodedDate = encodeURIComponent(date)\n\n    await this.request(`/api/notes/${encodedContext}/${encodedDate}`, {\n      method: 'DELETE'\n    })\n  }\n\n  // Settings endpoints\n  async updateSettings(settings: Partial<UserSettings>): Promise<UserSettings> {\n    return await this.request<UserSettings>('/api/settings', {\n      method: 'PUT',\n      body: JSON.stringify(settings)\n    })\n  }\n\n  // Time sync\n  async getServerTime(timezone: string): Promise<ServerTimeResponse> {\n    const response = await fetch(`/api/time?timezone=${encodeURIComponent(timezone)}`)\n    return await response.json()\n  }\n}\n\nexport const api = new APIClient()\n","/**\n * Authentication Module\n * Handles Google OAuth and session management\n */\n\nimport { state } from '@/utils/state'\nimport { api } from './api'\nimport { events, EVENT } from '@/utils/events'\n\n// Google OAuth types\ndeclare global {\n  interface Window {\n    google?: {\n      accounts: {\n        oauth2: {\n          initCodeClient: (config: {\n            client_id: string\n            scope: string\n            ux_mode: string\n            callback: (response: { code?: string; error?: string }) => void\n          }) => {\n            requestCode: () => void\n          }\n        }\n      }\n    }\n  }\n}\n\ninterface CodeClient {\n  requestCode: () => void\n}\n\ninterface AuthCodeResponse {\n  code?: string\n  error?: string\n}\n\nclass AuthManager {\n  private codeClient: CodeClient | null = null\n  private initializationPromise: Promise<void> | null = null\n\n  async checkAuth(): Promise<boolean> {\n    const data = await api.checkAuth()\n\n    if (data.authenticated && data.user) {\n      state.update({\n        currentUser: data.user,\n        userSettings: data.user.settings || {\n          theme: 'dark',\n          weekStart: 0,\n          timezone: 'UTC',\n          dateFormat: 'DD-MM-YY',\n          uniqueContextMode: false,\n          showBreadcrumb: false,\n          showMarkdownEditor: false,\n          hideNewContextButton: false\n        }\n      })\n      return true\n    }\n\n    return false\n  }\n\n  async initGoogleClient(clientId: string): Promise<void> {\n    // Return existing initialization promise if already in progress\n    if (this.initializationPromise) {\n      return this.initializationPromise\n    }\n\n    // Return immediately if already initialized\n    if (this.codeClient) {\n      return Promise.resolve()\n    }\n\n    // Create initialization promise\n    this.initializationPromise = new Promise((resolve, reject) => {\n      // Wait for Google API to be loaded\n      const checkGoogleLoaded = () => {\n        if (window.google?.accounts?.oauth2) {\n          try {\n            // Use initCodeClient to get authorization code (which provides refresh token)\n            this.codeClient = window.google.accounts.oauth2.initCodeClient({\n              client_id: clientId,\n              scope: 'https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/userinfo.email',\n              ux_mode: 'popup',\n              callback: (response) => this.handleAuthCodeResponse(response)\n            })\n            console.log('[AUTH] Google code client initialized successfully')\n            resolve()\n          } catch (error) {\n            console.error('[AUTH] Failed to initialize Google client:', error)\n            reject(error)\n          }\n        } else {\n          // Retry after a short delay\n          setTimeout(checkGoogleLoaded, 100)\n        }\n      }\n\n      // Start checking\n      checkGoogleLoaded()\n\n      // Set a timeout to prevent infinite waiting\n      setTimeout(() => {\n        if (!this.codeClient) {\n          reject(new Error('Google API failed to load within timeout'))\n        }\n      }, 10000) // 10 second timeout\n    })\n\n    return this.initializationPromise\n  }\n\n  async handleAuthCodeResponse(response: AuthCodeResponse): Promise<void> {\n    const loader = document.getElementById('landing-loader')\n\n    if (response.error) {\n      if (loader) loader.classList.remove('visible')\n      events.emit(EVENT.SHOW_ERROR, {\n        message: 'OAuth failed: ' + response.error\n      })\n      return\n    }\n\n    if (!response.code) {\n      if (loader) loader.classList.remove('visible')\n      events.emit(EVENT.SHOW_ERROR, {\n        message: 'OAuth failed: No code received'\n      })\n      return\n    }\n\n    try {\n      // Send authorization code to backend to exchange for tokens\n      const data = await api.loginWithCode(response.code)\n\n      if (data.success && data.user) {\n        console.log('[AUTH] Login successful, updating state')\n        console.log('[AUTH] Received hasNoContexts:', (data.user as any).hasNoContexts)\n\n        state.update({\n          currentUser: data.user,\n          hasNoContexts: (data.user as any).hasNoContexts || false,\n          userSettings: data.user.settings || {\n            theme: 'dark',\n            weekStart: 0,\n            timezone: 'UTC',\n            dateFormat: 'DD-MM-YY',\n            uniqueContextMode: false,\n            showBreadcrumb: false,\n            showMarkdownEditor: false,\n            hideNewContextButton: false\n          }\n        })\n\n        console.log('[AUTH] Emitting auth-success event')\n        // Emit event for UI to react (loader will be hidden by showApp)\n        events.emit('auth-success' as any, {})\n      } else {\n        if (loader) loader.classList.remove('visible')\n        events.emit(EVENT.SHOW_ERROR, {\n          message: data.error || 'Login failed'\n        })\n      }\n    } catch (error) {\n      if (loader) loader.classList.remove('visible')\n      const message = error instanceof Error ? error.message : 'Unknown error'\n      events.emit(EVENT.SHOW_ERROR, {\n        message: 'Login failed: ' + message\n      })\n    }\n  }\n\n  async signIn(): Promise<void> {\n    // Show loading indicator immediately\n    const loader = document.getElementById('landing-loader')\n    if (loader) loader.classList.add('visible')\n\n    try {\n      // Wait for initialization to complete if not already done\n      await this.initializationPromise\n\n      if (!this.codeClient) {\n        throw new Error('Google client not initialized')\n      }\n\n      // Request authorization code (will trigger popup)\n      this.codeClient.requestCode()\n    } catch (error) {\n      console.error('[AUTH] Sign in failed:', error)\n      if (loader) loader.classList.remove('visible')\n      events.emit(EVENT.SHOW_ERROR, {\n        message: 'Failed to initialize Google sign-in. Please refresh the page.'\n      })\n    }\n  }\n\n  signOut(): void {\n    console.log('[AUTH] Starting logout...')\n\n    // Call logout endpoint (don't wait for response)\n    fetch('/api/auth/logout', {\n      method: 'POST',\n      credentials: 'same-origin'\n    })\n      .then(() => {\n        console.log('[AUTH] Logout endpoint called')\n      })\n      .catch(err => {\n        console.error('[AUTH] Logout endpoint error:', err)\n      })\n\n    // Clear localStorage and sessionStorage\n    console.log('[AUTH] Clearing storage...')\n    try {\n      localStorage.clear()\n      sessionStorage.clear()\n    } catch (e) {\n      console.error('[AUTH] Storage clear error:', e)\n    }\n\n    // Force reload immediately\n    console.log('[AUTH] Forcing reload...')\n    setTimeout(() => {\n      window.location.href = '/'\n      // Fallback in case href doesn't work\n      setTimeout(() => window.location.reload(), 100)\n    }, 50)\n  }\n\n  async clearAllCaches(): Promise<void> {\n    try {\n      // Clear IndexedDB\n      const dbName = 'DailyNotesDB'\n      const deleteRequest = indexedDB.deleteDatabase(dbName)\n\n      await new Promise<void>((resolve) => {\n        deleteRequest.onsuccess = () => {\n          console.log('[AUTH] IndexedDB cleared')\n          resolve()\n        }\n        deleteRequest.onerror = () => {\n          console.warn('[AUTH] Failed to clear IndexedDB')\n          resolve() // Continue even if this fails\n        }\n      })\n\n      // Clear all Service Worker caches\n      if ('caches' in window) {\n        const cacheNames = await caches.keys()\n        await Promise.all(\n          cacheNames.map(cacheName => {\n            console.log('[AUTH] Deleting cache:', cacheName)\n            return caches.delete(cacheName)\n          })\n        )\n        console.log('[AUTH] All Service Worker caches cleared')\n      }\n\n      // Clear localStorage and sessionStorage\n      localStorage.clear()\n      sessionStorage.clear()\n      console.log('[AUTH] Storage cleared')\n    } catch (error) {\n      console.error('[AUTH] Error clearing caches:', error)\n      // Don't throw - we still want to complete logout\n    }\n  }\n}\n\nexport const auth = new AuthManager()\n\n// Expose auth functions globally for onclick handlers in HTML\nif (typeof window !== 'undefined') {\n  (window as any).signInWithGoogle = () => auth.signIn()\n}\n","/**\n * Notes Module\n * Handles note loading, saving, and listing\n */\n\nimport { state } from '@/utils/state'\nimport { api } from './api'\nimport { cache } from '@/utils/cache'\nimport { events, EVENT } from '@/utils/events'\nimport type { Note } from '@/types'\n\nclass NotesManager {\n  private saveTimeout: number | null = null\n  private currentNoteContent = ''\n  private currentLoadToken = 0 // Token to cancel old load operations\n  private currentSelectToken = 0 // Token to cancel old date selection operations\n\n  async loadNote(context: string, date: string): Promise<Note | null> {\n    if (!context || !date) {\n      return null\n    }\n\n    // Increment token to cancel any previous load operations\n    const loadToken = ++this.currentLoadToken\n    console.log(`[Notes] loadNote started - token: ${loadToken}, context: ${context}, date: ${date}`)\n\n    // Try local cache first (instant load)\n    const cachedNote = await cache.getNote(context, date)\n\n    // Validate token before emitting cached content\n    if (loadToken !== this.currentLoadToken) {\n      console.log(`[Notes] Load cancelled (cache) - token ${loadToken} is stale`)\n      return null\n    }\n\n    if (cachedNote && cachedNote.content) {\n      // Only emit if cache has actual content\n      this.currentNoteContent = cachedNote.content\n      events.emit(EVENT.NOTE_LOADED, {\n        context,\n        date,\n        content: this.currentNoteContent\n      })\n    } else {\n      // No cached note or empty content - show blank editor immediately\n      this.currentNoteContent = ''\n      events.emit(EVENT.NOTE_LOADED, {\n        context,\n        date,\n        content: ''\n      })\n    }\n\n    // Then load from server in background\n    try {\n      const { note } = await api.getNote(context, date)\n\n      // Validate token before applying server data\n      if (loadToken !== this.currentLoadToken) {\n        console.log(`[Notes] Load cancelled (server) - token ${loadToken} is stale`)\n        return null\n      }\n\n      // Determine which version is more recent\n      const serverUpdatedAt = note.updated_at ? new Date(note.updated_at).getTime() : 0\n      const cachedUpdatedAt = cachedNote?.updated_at ? new Date(cachedNote.updated_at).getTime() : 0\n\n      // Only update if server has newer content OR cache is empty\n      const shouldUpdateFromServer =\n        !cachedNote ||\n        serverUpdatedAt > cachedUpdatedAt ||\n        (note.content && !cachedNote.content)\n\n      if (shouldUpdateFromServer) {\n        this.currentNoteContent = note.content || ''\n\n        // Update cache with server data\n        await cache.saveNote({\n          ...note,\n          context,\n          date,\n          content: note.content,\n          updated_at: note.updated_at\n        })\n\n        // Only emit if content actually changed\n        if (!cachedNote || cachedNote.content !== note.content) {\n          events.emit(EVENT.NOTE_LOADED, {\n            context,\n            date,\n            content: this.currentNoteContent\n          })\n        }\n      } else {\n        console.log('[Notes] Cache is newer than server, keeping cached version')\n      }\n\n      return note\n    } catch (error) {\n      // Validate token before handling error\n      if (loadToken !== this.currentLoadToken) {\n        console.log(`[Notes] Load cancelled (error) - token ${loadToken} is stale`)\n        return null\n      }\n\n      // If cached version exists, user already sees it\n      if (!cachedNote) {\n        console.error('Failed to load note:', error)\n        events.emit(EVENT.SHOW_ERROR, {\n          message: 'Failed to load note. Working offline.'\n        })\n      } else {\n        console.warn('[Notes] Server unavailable, using cached version')\n      }\n      return cachedNote\n    }\n  }\n\n  async saveNote(context: string, date: string, content: string): Promise<void> {\n    if (!context || !date) return\n\n    console.log(`[Notes] saveNote called - context: ${context}, date: ${date}, content length: ${content.length}`)\n\n    const now = new Date().toISOString()\n    const note = {\n      context,\n      date,\n      content,\n      updated_at: now\n    }\n\n    // 1. Save to local cache immediately (optimistic)\n    await cache.saveNote(note as Note)\n    this.currentNoteContent = content\n\n    console.log(`[Notes] Saved to cache and updated currentNoteContent`)\n\n    events.emit(EVENT.NOTE_SAVED, { context, date, content })\n\n    // 2. Update note in the list (update content, keep position)\n    this.updateNoteInList(context, date, content)\n\n    // 3. Sync to server immediately (backend will handle Drive sync)\n    console.log(`[Notes] Syncing to server - content length: ${content.length}`)\n    try {\n      await api.saveNote({ context, date, content, updated_at: now })\n      console.log(`[Notes] Successfully synced to server`)\n    } catch (error) {\n      console.error('[Notes] Failed to sync to server:', error)\n      // Note is still saved locally in cache, will retry on next app load\n    }\n  }\n\n  async loadNotesList(context: string, limit = 50, offset = 0): Promise<Note[]> {\n    if (!context) {\n      state.update({\n        notes: [],\n        notesWithDates: []\n      })\n      return []\n    }\n\n    try {\n      const data = await api.getNotesList(context, limit, offset)\n      const serverNotes = data.notes || []\n\n      // Get cached notes from IndexedDB for this context\n      const cachedNotes = await cache.getNotesByContext(context)\n\n      // Merge: prioritize server notes, but include cached notes not on server\n      const noteMap = new Map<string, Note>()\n\n      // Add all server notes first (authoritative)\n      serverNotes.forEach(note => {\n        noteMap.set(note.date, note)\n      })\n\n      // Add cached notes that don't exist on server (local-only or pending sync)\n      cachedNotes.forEach(note => {\n        if (!noteMap.has(note.date)) {\n          noteMap.set(note.date, note)\n        }\n      })\n\n      // Convert back to array and sort by date (newest first)\n      const mergedNotes = Array.from(noteMap.values()).sort((a, b) => {\n        return b.date.localeCompare(a.date)\n      })\n\n      const notesWithDates = mergedNotes.map(note => note.date)\n\n      state.update({\n        notes: mergedNotes,\n        notesWithDates\n      })\n\n      return mergedNotes\n    } catch (error) {\n      console.error('Failed to load notes list:', error)\n      return []\n    }\n  }\n\n  async refreshNotesList(context: string): Promise<void> {\n    await this.loadNotesList(context)\n  }\n\n  updateNoteInList(context: string, date: string, content: string): void {\n    const notes = state.get('notes')\n\n    // Find and update the note\n    const updatedNotes = notes.map(note => {\n      if (note.date === date && note.context === context) {\n        return {\n          ...note,\n          content: content,\n          updated_at: new Date().toISOString()\n        }\n      }\n      return note\n    })\n\n    // Update state\n    state.set('notes', updatedNotes)\n  }\n\n  ensureNoteInList(context: string, date: string): void {\n    const notes = state.get('notes')\n    const notesWithDates = state.get('notesWithDates')\n\n    // Check if note already exists in the list\n    const noteExists = notes.some(note => note.date === date)\n\n    if (!noteExists) {\n      // Create a placeholder note in the list\n      const newNote: Note = {\n        id: `temp-${context}-${date}`,\n        user_id: state.get('currentUser')?.id || '',\n        context: context,\n        date: date,\n        content: '',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }\n\n      // Add to notes list and sort by date (newest first)\n      const updatedNotes = [...notes, newNote].sort((a, b) => {\n        return b.date.localeCompare(a.date)\n      })\n\n      // Add to dates list\n      const updatedNotesWithDates = [...notesWithDates, date]\n\n      // Update state\n      state.update({\n        notes: updatedNotes,\n        notesWithDates: updatedNotesWithDates\n      })\n    }\n  }\n\n  handleNoteInput(content: string): void {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout)\n    }\n\n    // Update current content IMMEDIATELY to track user input\n    this.currentNoteContent = content\n\n    // Capture current context and date at the time of input\n    const capturedContext = state.get('selectedContext')\n    const capturedDate = state.get('selectedDate')\n\n    if (!capturedContext || !capturedDate) return\n\n    // Debounce save - reduced from 1000ms to 500ms for better UX\n    this.saveTimeout = window.setTimeout(() => {\n      // Re-validate that context and date haven't changed\n      const currentContext = state.get('selectedContext')\n      const currentDate = state.get('selectedDate')\n\n      // Only save if context/date haven't changed\n      // We don't check content anymore because currentNoteContent is updated immediately\n      if (currentContext === capturedContext && currentDate === capturedDate) {\n        console.log(`[Notes] Saving note - context: ${capturedContext}, date: ${capturedDate}`)\n        // Use the LATEST content from currentNoteContent, not the captured one\n        this.saveNote(capturedContext, capturedDate, this.currentNoteContent)\n      } else {\n        console.log(\n          `[Notes] Save cancelled - context/date changed from ${capturedContext}/${capturedDate} to ${currentContext}/${currentDate}`\n        )\n      }\n    }, 500)\n  }\n\n  async selectDate(dateStr: string): Promise<void> {\n    // Increment token to cancel any previous select operations\n    const selectToken = ++this.currentSelectToken\n    console.log(`[Notes] selectDate started - token: ${selectToken}, date: ${dateStr}`)\n\n    const context = state.get('selectedContext')\n\n    // Parse the date\n    const dateParts = dateStr.split('-')\n    const year = parseInt(dateParts[0])\n    const month = parseInt(dateParts[1]) - 1\n\n    // Update calendar month to show the selected date\n    state.update({\n      selectedDate: dateStr,\n      currentCalendarMonth: month,\n      currentCalendarYear: year\n    })\n\n    // Validate token before proceeding\n    if (selectToken !== this.currentSelectToken) {\n      console.log(`[Notes] selectDate cancelled - token ${selectToken} is stale`)\n      return\n    }\n\n    events.emit(EVENT.DATE_CHANGED, { date: dateStr })\n\n    // Load note for this date\n    if (context) {\n      // Validate token again before loading\n      if (selectToken !== this.currentSelectToken) {\n        console.log(`[Notes] selectDate cancelled before load - token ${selectToken} is stale`)\n        return\n      }\n\n      // Create note in local list immediately if it doesn't exist\n      this.ensureNoteInList(context, dateStr)\n      await this.loadNote(context, dateStr)\n    }\n  }\n\n  setTodayDate(): void {\n    const dateStr = (state as any).get('today') as string\n    const [year, month] = dateStr.split('-').map(Number)\n\n    state.update({\n      selectedDate: dateStr,\n      currentCalendarMonth: month - 1,\n      currentCalendarYear: year\n    })\n  }\n\n  getCurrentNoteContent(): string {\n    return this.currentNoteContent\n  }\n\n  async deleteNote(context: string, date: string): Promise<void> {\n    if (!context || !date) return\n\n    console.log(`[Notes] Deleting note - context: ${context}, date: ${date}`)\n\n    // Cancel any pending save operations for this note\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout)\n      this.saveTimeout = null\n      console.log('[Notes] Cancelled pending save operation')\n    }\n\n    // 1. Remove from local cache immediately (optimistic)\n    await cache.deleteNote(context, date)\n\n    // 2. Remove from the notes list in state\n    const notes = state.get('notes')\n    const updatedNotes = notes.filter(note => !(note.date === date && note.context === context))\n\n    const notesWithDates = state.get('notesWithDates')\n    const updatedNotesWithDates = notesWithDates.filter(d => d !== date)\n\n    state.update({\n      notes: updatedNotes,\n      notesWithDates: updatedNotesWithDates\n    })\n\n    // 3. If the deleted note was currently selected, clear the editor and select another note\n    const selectedDate = state.get('selectedDate')\n    if (selectedDate === date) {\n      // Clear current note content IMMEDIATELY to prevent race conditions\n      this.currentNoteContent = ''\n\n      // Select the most recent note or today\n      if (updatedNotes.length > 0) {\n        // Select the first note (most recent)\n        const nextNote = updatedNotes[0]\n        await this.selectDate(nextNote.date)\n      } else {\n        // No notes left, select today and clear editor\n        this.setTodayDate()\n        events.emit(EVENT.NOTE_LOADED, {\n          context,\n          date,\n          content: ''\n        })\n      }\n    }\n\n    // 4. Sync deletion to server immediately (backend will handle Drive sync)\n    try {\n      await api.deleteNote(context, date)\n      console.log('[Notes] Note deleted from server')\n    } catch (error) {\n      console.error('[Notes] Failed to delete note from server:', error)\n      // Note is still deleted locally, server will sync on next app load\n    }\n\n    console.log('[Notes] Note deleted locally and synced')\n  }\n}\n\nexport const notes = new NotesManager()\n","/**\n * Contexts Module\n * Handles context (project) management\n */\n\nimport { state } from '@/utils/state'\nimport { api } from './api'\nimport { cache } from '@/utils/cache'\nimport { events, EVENT } from '@/utils/events'\nimport type { Context } from '@/types'\n\nclass ContextsManager {\n  async loadContexts(): Promise<void> {\n    // Try local cache first (instant)\n    const cachedContexts = await cache.getContexts()\n    console.log('[CONTEXTS] Cached contexts:', cachedContexts)\n    if (cachedContexts.length > 0) {\n      state.set('contexts', cachedContexts)\n    }\n\n    // Load from server in background\n    try {\n      console.log('[CONTEXTS] Fetching contexts from server...')\n      const response = await api.getContexts()\n      console.log('[CONTEXTS] Server response:', response)\n      // Handle null/undefined contexts gracefully\n      const contexts = response?.contexts || []\n      console.log('[CONTEXTS] Parsed contexts:', contexts)\n      await cache.saveContexts(contexts)\n      state.set('contexts', contexts)\n      events.emit(EVENT.CONTEXTS_LOADED, { contexts })\n    } catch (error) {\n      console.error('[CONTEXTS] Failed to load contexts from server:', error)\n      // Only show error if we have no contexts at all AND it's a real network error\n      if (cachedContexts.length === 0 && !navigator.onLine) {\n        events.emit(EVENT.SHOW_ERROR, {\n          message: 'Failed to load contexts. Working offline.'\n        })\n      }\n      // If online but failed, don't show error - user might just have 0 contexts\n    }\n  }\n\n  async createContext(name: string, color?: string): Promise<Context> {\n    const newContext: Context = {\n      id: `temp-${Date.now()}`,\n      user_id: state.get('currentUser')?.id || '',\n      name,\n      color: color || 'primary',\n      created_at: new Date().toISOString()\n    }\n\n    // 1. Update UI immediately (optimistic)\n    const currentContexts = state.get('contexts')\n    const updatedContexts = [...currentContexts, newContext]\n\n    await cache.saveContexts(updatedContexts)\n    state.set('contexts', updatedContexts)\n    state.set('selectedContext', name)\n\n    // 2. Sync to server immediately\n    try {\n      await api.createContext({ name, color })\n      console.log('[CONTEXTS] Successfully synced new context to server')\n      // Reload contexts to get server-assigned ID\n      await this.loadContexts()\n    } catch (error) {\n      console.error('[CONTEXTS] Failed to sync context to server:', error)\n      // Context is still saved locally, will retry on next app load\n    }\n\n    return newContext\n  }\n\n  async updateContext(contextId: string, name: string, color: string): Promise<boolean> {\n    try {\n      await api.updateContext(contextId, { name, color })\n\n      // Update local state\n      const currentContexts = state.get('contexts')\n      const updatedContexts = currentContexts.map(c => (c.id === contextId ? { ...c, name, color } : c))\n\n      await cache.saveContexts(updatedContexts)\n      state.set('contexts', updatedContexts)\n\n      // Update selected context if it was the one being edited\n      const selectedContext = state.get('selectedContext')\n      const oldContext = currentContexts.find(c => c.id === contextId)\n      if (selectedContext === oldContext?.name) {\n        state.set('selectedContext', name)\n        localStorage.setItem('lastContext', name)\n      }\n\n      events.emit(EVENT.SHOW_SUCCESS, { message: 'Context updated successfully' })\n      return true\n    } catch (error) {\n      events.emit(EVENT.SHOW_ERROR, { message: 'Failed to update context' })\n      return false\n    }\n  }\n\n  async deleteContext(contextId: string): Promise<void> {\n    try {\n      await api.deleteContext(contextId)\n\n      const currentContexts = state.get('contexts')\n      const updatedContexts = currentContexts.filter(c => c.id !== contextId)\n\n      await cache.saveContexts(updatedContexts)\n      state.set('contexts', updatedContexts)\n\n      events.emit(EVENT.SHOW_SUCCESS, { message: 'Context deleted successfully' })\n    } catch (error) {\n      events.emit(EVENT.SHOW_ERROR, { message: 'Failed to delete context' })\n    }\n  }\n\n  selectContext(contextName: string | null): void {\n    state.set('selectedContext', contextName)\n    events.emit(EVENT.CONTEXT_CHANGED, { context: contextName })\n\n    // Save last used context to localStorage\n    if (contextName) {\n      localStorage.setItem('lastContext', contextName)\n    }\n  }\n\n  getSelectedContext(): string | null {\n    return state.get('selectedContext')\n  }\n\n  getContextColor(contextName: string): string {\n    const contexts = state.get('contexts')\n    const context = contexts.find(c => c.name === contextName)\n    // Normalize old hex colors\n    const color = context?.color || 'primary'\n    const bulmaColors = ['text', 'link', 'primary', 'info', 'success', 'warning', 'danger']\n    return bulmaColors.includes(color) ? color : 'primary'\n  }\n\n  restoreLastContext(): string | null {\n    const contexts = state.get('contexts')\n    const settings = state.get('userSettings')\n    const uniqueContextMode = settings.uniqueContextMode || false\n\n    console.log('[CONTEXTS] restoreLastContext - contexts:', contexts)\n    console.log('[CONTEXTS] uniqueContextMode:', uniqueContextMode)\n\n    // If no contexts available, return null\n    if (!contexts || contexts.length === 0) {\n      console.log('[CONTEXTS] No contexts available')\n      return null\n    }\n\n    // If unique context mode is enabled, always select first context\n    if (uniqueContextMode) {\n      const firstContext = contexts[0].name\n      console.log('[CONTEXTS] Unique context mode - selecting first context:', firstContext)\n      this.selectContext(firstContext)\n      return firstContext\n    }\n\n    const lastContext = localStorage.getItem('lastContext')\n    console.log('[CONTEXTS] lastContext from localStorage:', lastContext)\n\n    // Try to restore last used context\n    if (lastContext) {\n      const contextExists = contexts.some(c => c.name === lastContext)\n      console.log('[CONTEXTS] lastContext exists?', contextExists)\n      if (contextExists) {\n        console.log('[CONTEXTS] Selecting last context:', lastContext)\n        this.selectContext(lastContext)\n        return lastContext\n      }\n    }\n\n    // If no last context or it doesn't exist, select first context\n    const firstContext = contexts[0].name\n    console.log('[CONTEXTS] Selecting first context:', firstContext)\n    this.selectContext(firstContext)\n    return firstContext\n  }\n}\n\nexport const contexts = new ContextsManager()\n","/**\n * Calendar Module\n * Handles calendar rendering and navigation\n */\n\nimport { state } from '@/utils/state'\nimport { notes } from '@/services/notes'\n\nclass Calendar {\n  private monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ]\n  private dayNamesDefault = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n\n  render(): void {\n    const settings = state.get('userSettings')\n    const weekStart = settings.weekStart || 0\n    const month = state.get('currentCalendarMonth')\n    const year = state.get('currentCalendarYear')\n    const selectedDate = state.get('selectedDate')\n    const today = (state as any).get('today') as string\n    const notesWithDates = state.get('notesWithDates')\n\n    const dayNames = [\n      ...this.dayNamesDefault.slice(weekStart),\n      ...this.dayNamesDefault.slice(0, weekStart)\n    ]\n\n    const monthYearEl = document.getElementById('calendar-month-year')\n    if (monthYearEl) {\n      monthYearEl.textContent = `${this.monthNames[month]} ${year}`\n    }\n\n    const firstDayOfMonth = new Date(year, month, 1).getDay()\n    const adjustedFirstDay = (firstDayOfMonth - weekStart + 7) % 7\n    const daysInMonth = new Date(year, month + 1, 0).getDate()\n    const daysInPrevMonth = new Date(year, month, 0).getDate()\n\n    const grid = document.getElementById('calendar-grid')\n    if (!grid) return\n\n    // Render day headers\n    let html = dayNames.map(day => `<div class=\"calendar-day-header\">${day}</div>`).join('')\n\n    // Render previous month's trailing days\n    for (let i = adjustedFirstDay - 1; i >= 0; i--) {\n      const day = daysInPrevMonth - i\n      html += `<div class=\"calendar-day other-month\">${day}</div>`\n    }\n\n    // Render current month's days\n    for (let day = 1; day <= daysInMonth; day++) {\n      const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`\n      const classes = ['calendar-day']\n\n      if (dateStr === today) classes.push('today')\n      if (dateStr === selectedDate) classes.push('selected')\n      if (notesWithDates.includes(dateStr)) classes.push('has-note')\n\n      html += `<div class=\"${classes.join(' ')}\" data-date=\"${dateStr}\">${day}</div>`\n    }\n\n    // Render next month's leading days\n    const totalCells = adjustedFirstDay + daysInMonth\n    const remainingCells = totalCells % 7 === 0 ? 0 : 7 - (totalCells % 7)\n    for (let day = 1; day <= remainingCells; day++) {\n      html += `<div class=\"calendar-day other-month\">${day}</div>`\n    }\n\n    grid.innerHTML = html\n\n    // Add click handlers\n    grid.querySelectorAll('.calendar-day:not(.other-month)').forEach(dayEl => {\n      dayEl.addEventListener('click', () => {\n        const dateStr = (dayEl as HTMLElement).dataset.date\n        if (dateStr) {\n          notes.selectDate(dateStr)\n        }\n      })\n    })\n  }\n\n  prevMonth(): void {\n    let month = state.get('currentCalendarMonth')\n    let year = state.get('currentCalendarYear')\n\n    month--\n    if (month < 0) {\n      month = 11\n      year--\n    }\n\n    state.update({\n      currentCalendarMonth: month,\n      currentCalendarYear: year\n    })\n\n    this.render()\n  }\n\n  nextMonth(): void {\n    let month = state.get('currentCalendarMonth')\n    let year = state.get('currentCalendarYear')\n\n    month++\n    if (month > 11) {\n      month = 0\n      year++\n    }\n\n    state.update({\n      currentCalendarMonth: month,\n      currentCalendarYear: year\n    })\n\n    this.render()\n  }\n\n  goToToday(): void {\n    const today = (state as any).get('today') as string\n    notes.selectDate(today)\n  }\n}\n\nexport const calendar = new Calendar()\n","/**\n * Markdown Editor Module\n * Modern WYSIWYG markdown editor using Quill\n */\n\nimport { state } from '@/utils/state'\n\n// Quill types\ndeclare global {\n  interface Window {\n    Quill?: any\n  }\n}\n\ninterface QuillDelta {\n  ops: QuillOp[]\n}\n\ninterface QuillOp {\n  insert: string | object\n  attributes?: Record<string, any>\n}\n\nclass MarkdownEditor {\n  private container: HTMLElement | null = null\n  private editor: any = null\n  private editorElement: HTMLElement | null = null\n  private onChangeCallback: ((content: string) => void) | null = null\n  private isUpdating = false\n  private currentNoteContent = ''\n  private updateTimeout: number | null = null\n  private contentVersion = 0 // Track version to ignore stale events\n\n  async init(containerId: string, onChange: (content: string) => void): Promise<void> {\n    this.container = document.getElementById(containerId)\n    if (!this.container) {\n      console.error('[MarkdownEditor] Container not found:', containerId)\n      return\n    }\n\n    this.onChangeCallback = onChange\n\n    // Don't load Quill yet - wait until actually needed (lazy loading)\n    // This saves ~300KB on initial page load\n    this.container.innerHTML =\n      '<div style=\"padding: 1rem; color: var(--bulma-text-light); opacity: 0.6;\">Editor loading...</div>'\n  }\n\n  async ensureQuillLoaded(): Promise<void> {\n    // Only load Quill when first needed\n    if (!this.editor) {\n      await this.loadQuill()\n      this.render()\n      this.initQuill()\n    }\n  }\n\n  private async loadQuill(): Promise<void> {\n    if (window.Quill) return\n\n    // Load Quill CSS locally\n    const css = document.createElement('link')\n    css.rel = 'stylesheet'\n    css.href = '/static/vendor/quill/quill.snow.css'\n    document.head.appendChild(css)\n\n    // Load Quill JS locally\n    const script = document.createElement('script')\n    script.src = '/static/vendor/quill/quill.min.js'\n    document.head.appendChild(script)\n\n    // Wait for Quill to load\n    await new Promise<void>(resolve => {\n      script.onload = () => resolve()\n    })\n  }\n\n  private render(): void {\n    if (!this.container) return\n\n    this.container.innerHTML = `\n      <div class=\"quill-editor-wrapper\">\n        <div id=\"quill-editor\"></div>\n      </div>\n    `\n\n    this.editorElement = document.getElementById('quill-editor')\n  }\n\n  private initQuill(): void {\n    if (!window.Quill) {\n      console.error('[MarkdownEditor] Quill not loaded')\n      return\n    }\n\n    try {\n      this.editor = new window.Quill(this.editorElement, {\n        theme: 'snow',\n        modules: {\n          toolbar: [\n            [{ header: [1, 2, 3, false] }],\n            ['bold', 'italic', 'strike'],\n            [{ list: 'ordered' }, { list: 'bullet' }],\n            ['blockquote', 'code-block'],\n            ['link'],\n            ['clean']\n          ]\n        },\n        placeholder: 'Start writing your notes...',\n        formats: ['bold', 'italic', 'strike', 'header', 'list', 'code-block', 'blockquote', 'link']\n      })\n\n      // Listen for text changes\n      this.editor.on('text-change', () => {\n        if (this.isUpdating) return\n\n        if (this.onChangeCallback) {\n          const markdown = this.getMarkdown()\n          this.onChangeCallback(markdown)\n        }\n      })\n\n      // Force placeholder to hide on focus when editor is empty\n      this.editor.root.addEventListener('focus', () => {\n        if (this.editor.getText().trim() === '') {\n          this.editor.root.dataset.placeholder = ''\n        }\n      })\n\n      // Restore placeholder on blur if editor is still empty\n      this.editor.root.addEventListener('blur', () => {\n        if (this.editor.getText().trim() === '') {\n          this.editor.root.dataset.placeholder = 'Start writing your notes...'\n        }\n      })\n\n      // Apply toolbar visibility based on user settings after initialization\n      this.applyToolbarVisibility()\n    } catch (error) {\n      console.error('[MarkdownEditor] Error initializing editor:', error)\n    }\n  }\n\n  private applyToolbarVisibility(): void {\n    const settings = state.get('userSettings')\n    const showMarkdownEditor = settings.showMarkdownEditor === true\n\n    const toolbar = this.container?.querySelector('.ql-toolbar') as HTMLElement\n    if (toolbar) {\n      toolbar.style.display = showMarkdownEditor ? '' : 'none'\n    }\n\n    // Editor enabled state should be based on context selection only\n    // Toolbar visibility is separate from editor interactivity\n    if (this.editor) {\n      const context = state.get('selectedContext')\n      this.editor.enable(context ? true : false)\n    }\n  }\n\n  private getMarkdown(): string {\n    if (!this.editor) return ''\n\n    const delta = this.editor.getContents()\n    let markdown = ''\n    let currentList: string | null = null\n    let listCounter = 0\n\n    delta.ops.forEach((op: QuillOp) => {\n      if (!op.insert) return\n\n      const text = typeof op.insert === 'string' ? op.insert : ''\n      const attrs = op.attributes || {}\n\n      // Handle newlines with formatting\n      if (text === '\\n') {\n        // Check for headers\n        if (attrs.header) {\n          markdown = markdown.trimEnd()\n          markdown = '#'.repeat(attrs.header) + ' ' + markdown.split('\\n').pop()\n          markdown += '\\n\\n'\n        }\n        // Check for lists\n        else if (attrs.list) {\n          if (attrs.list !== currentList) {\n            currentList = attrs.list\n            listCounter = 1\n          }\n          const line = markdown.split('\\n').pop()!\n          markdown = markdown.substring(0, markdown.lastIndexOf('\\n') + 1)\n\n          if (attrs.list === 'ordered') {\n            markdown += `${listCounter++}. ${line}\\n`\n          } else if (attrs.list === 'bullet') {\n            markdown += `- ${line}\\n`\n          } else if (attrs.list === 'check') {\n            markdown += `- [ ] ${line}\\n`\n          }\n        } else {\n          currentList = null\n          listCounter = 0\n          if (attrs.blockquote) {\n            const line = markdown.split('\\n').pop()!\n            markdown = markdown.substring(0, markdown.lastIndexOf('\\n') + 1)\n            markdown += `> ${line}\\n`\n          } else if (attrs['code-block']) {\n            markdown += '\\n```\\n'\n          } else {\n            markdown += '\\n'\n          }\n        }\n      } else {\n        let formattedText = text\n\n        // Apply inline formatting\n        if (attrs.bold) {\n          formattedText = `**${formattedText}**`\n        }\n        if (attrs.italic) {\n          formattedText = `*${formattedText}*`\n        }\n        if (attrs.strike) {\n          formattedText = `~~${formattedText}~~`\n        }\n        if (attrs.code) {\n          formattedText = `\\`${formattedText}\\``\n        }\n        if (attrs.link) {\n          formattedText = `[${formattedText}](${attrs.link})`\n        }\n\n        markdown += formattedText\n      }\n    })\n\n    return markdown.trim()\n  }\n\n  async setContent(content: string): Promise<void> {\n    // Lazy load Quill when content is set\n    await this.ensureQuillLoaded()\n\n    if (!this.editor) return\n\n    // Increment version to invalidate any pending events from previous setContent calls\n    this.contentVersion++\n    const currentVersion = this.contentVersion\n    console.log('[Editor] setContent called - version:', currentVersion, 'content length:', content.length)\n\n    // Clear any pending update timeout\n    if (this.updateTimeout) {\n      clearTimeout(this.updateTimeout)\n      this.updateTimeout = null\n    }\n\n    // CRITICAL: Disable the editor completely to prevent ANY text-change events\n    // This is more robust than just setting a flag\n    this.editor.disable()\n    this.isUpdating = true\n\n    try {\n      if (!content) {\n        this.editor.setText('')\n        this.currentNoteContent = ''\n      } else {\n        // Convert markdown to Quill Delta\n        const delta = this.markdownToDelta(content)\n        this.editor.setContents(delta)\n\n        // Track the current content for comparison\n        this.currentNoteContent = content\n      }\n    } finally {\n      // Re-enable editor after a delay to ensure all Quill internal events complete\n      this.updateTimeout = window.setTimeout(() => {\n        console.log('[Editor] Unlocking editor - version:', currentVersion)\n        this.isUpdating = false\n        this.updateTimeout = null\n\n        // Only re-enable if we have a context\n        const context = state.get('selectedContext')\n        if (context && this.editor) {\n          this.editor.enable(true)\n        }\n      }, 600)\n    }\n  }\n\n  private markdownToDelta(markdown: string): QuillDelta {\n    const ops: QuillOp[] = []\n    const lines = markdown.split('\\n')\n\n    lines.forEach((line, index) => {\n      // Headers\n      const headerMatch = line.match(/^(#{1,3})\\s+(.+)$/)\n      if (headerMatch) {\n        const level = headerMatch[1].length\n        ops.push({ insert: headerMatch[2] })\n        ops.push({ insert: '\\n', attributes: { header: level } })\n        return\n      }\n\n      // Bullet list\n      const bulletMatch = line.match(/^-\\s+(.+)$/)\n      if (bulletMatch) {\n        const text = this.parseInlineMarkdown(bulletMatch[1])\n        ops.push(...text)\n        ops.push({ insert: '\\n', attributes: { list: 'bullet' } })\n        return\n      }\n\n      // Numbered list\n      const numberedMatch = line.match(/^\\d+\\.\\s+(.+)$/)\n      if (numberedMatch) {\n        const text = this.parseInlineMarkdown(numberedMatch[1])\n        ops.push(...text)\n        ops.push({ insert: '\\n', attributes: { list: 'ordered' } })\n        return\n      }\n\n      // Task list\n      const taskMatch = line.match(/^-\\s+\\[([ x])\\]\\s+(.+)$/)\n      if (taskMatch) {\n        const text = this.parseInlineMarkdown(taskMatch[2])\n        ops.push(...text)\n        ops.push({ insert: '\\n', attributes: { list: 'check' } })\n        return\n      }\n\n      // Blockquote\n      const quoteMatch = line.match(/^>\\s+(.+)$/)\n      if (quoteMatch) {\n        const text = this.parseInlineMarkdown(quoteMatch[1])\n        ops.push(...text)\n        ops.push({ insert: '\\n', attributes: { blockquote: true } })\n        return\n      }\n\n      // Code block\n      if (line.startsWith('```')) {\n        ops.push({ insert: '\\n', attributes: { 'code-block': true } })\n        return\n      }\n\n      // Regular text with inline formatting\n      if (line.trim()) {\n        const text = this.parseInlineMarkdown(line)\n        ops.push(...text)\n      }\n\n      // Add newline if not last line\n      if (index < lines.length - 1) {\n        ops.push({ insert: '\\n' })\n      }\n    })\n\n    return { ops }\n  }\n\n  private parseInlineMarkdown(text: string): QuillOp[] {\n    const ops: QuillOp[] = []\n\n    // Parse inline formatting: bold, italic, strike, code, links\n    const regex = /(\\*\\*([^*]+)\\*\\*)|(\\*([^*]+)\\*)|(~~([^~]+)~~)|(`([^`]+)`)|(\\[([^\\]]+)\\]\\(([^)]+)\\))/g\n    let lastIndex = 0\n    let match: RegExpExecArray | null\n\n    while ((match = regex.exec(text)) !== null) {\n      // Add text before match\n      if (match.index > lastIndex) {\n        ops.push({ insert: text.substring(lastIndex, match.index) })\n      }\n\n      // Bold\n      if (match[1]) {\n        ops.push({ insert: match[2], attributes: { bold: true } })\n      }\n      // Italic\n      else if (match[3]) {\n        ops.push({ insert: match[4], attributes: { italic: true } })\n      }\n      // Strike\n      else if (match[5]) {\n        ops.push({ insert: match[6], attributes: { strike: true } })\n      }\n      // Code\n      else if (match[7]) {\n        ops.push({ insert: match[8], attributes: { code: true } })\n      }\n      // Link\n      else if (match[9]) {\n        ops.push({ insert: match[10], attributes: { link: match[11] } })\n      }\n\n      lastIndex = regex.lastIndex\n    }\n\n    // Add remaining text\n    if (lastIndex < text.length) {\n      ops.push({ insert: text.substring(lastIndex) })\n    }\n\n    return ops.length > 0 ? ops : [{ insert: text }]\n  }\n\n  getContent(): string {\n    return this.getMarkdown()\n  }\n\n  async setDisabled(disabled: boolean): Promise<void> {\n    // Only load editor if we're enabling it\n    if (!disabled) {\n      await this.ensureQuillLoaded()\n    }\n\n    if (!this.editor) return\n    this.editor.enable(!disabled)\n\n    const toolbar = this.container?.querySelector('.ql-toolbar') as HTMLElement\n    if (toolbar) {\n      toolbar.style.pointerEvents = disabled ? 'none' : 'auto'\n      toolbar.style.opacity = disabled ? '0.5' : '1'\n    }\n\n    // Update placeholder based on disabled state\n    const editorRoot = this.editor.root\n    if (editorRoot && disabled) {\n      editorRoot.dataset.placeholder = 'Select a context to start writing...'\n    } else if (editorRoot) {\n      editorRoot.dataset.placeholder = 'Start writing your notes...'\n    }\n  }\n\n  setPlaceholderMessage(message: string): void {\n    // Ensure Quill is loaded first\n    this.ensureQuillLoaded().then(() => {\n      if (!this.editor) return\n\n      const editorRoot = this.editor.root\n      if (editorRoot) {\n        editorRoot.dataset.placeholder = message\n      }\n    })\n  }\n\n  focus(): void {\n    if (this.editor) {\n      this.editor.focus()\n    }\n  }\n\n  /**\n   * Force flush any pending changes immediately\n   * Used before context/date changes to prevent data loss\n   */\n  forceFlush(): void {\n    if (!this.editor || this.isUpdating) return\n\n    const markdown = this.getMarkdown()\n\n    // Clear any pending debounced save\n    if (this.onChangeCallback) {\n      this.onChangeCallback(markdown)\n    }\n  }\n\n  /**\n   * Check if there are pending changes\n   */\n  hasPendingChanges(): boolean {\n    // If there's no editor, no pending changes\n    if (!this.editor) return false\n\n    const currentContent = this.getMarkdown()\n    return currentContent !== this.currentNoteContent\n  }\n}\n\nexport const markdownEditor = new MarkdownEditor()\n","/**\n * Professional Notification System\n * Handles toast notifications with queuing, stacking, and animations\n */\n\ninterface NotificationOptions {\n  type?: 'success' | 'error' | 'warning' | 'info'\n  title?: string\n  message: string\n  duration?: number\n  dismissible?: boolean\n  onAction?: () => void\n  actionLabel?: string\n}\n\ninterface Notification extends NotificationOptions {\n  id: string\n  element: HTMLElement | null\n  timeout?: number\n}\n\nclass NotificationManager {\n  private container: HTMLElement\n  private notifications = new Map<string, Notification>()\n  private queue: Notification[] = []\n  private readonly maxVisible = 3\n  private readonly defaultDuration = 5000\n\n  constructor() {\n    this.container = this.init()\n  }\n\n  private init(): HTMLElement {\n    // Create notification container\n    const container = document.createElement('div')\n    container.id = 'notification-container'\n    container.className = 'notification-container'\n    container.setAttribute('role', 'region')\n    container.setAttribute('aria-label', 'Notifications')\n    document.body.appendChild(container)\n    return container\n  }\n\n  /**\n   * Show a notification\n   */\n  show(options: NotificationOptions): string {\n    const {\n      type = 'info',\n      title,\n      message,\n      duration = this.defaultDuration,\n      dismissible = true,\n      onAction,\n      actionLabel = 'Action'\n    } = options\n\n    const id = `notification-${Date.now()}-${Math.random()}`\n\n    const notification: Notification = {\n      id,\n      type,\n      title,\n      message,\n      duration,\n      dismissible,\n      onAction,\n      actionLabel,\n      element: null\n    }\n\n    // Add to queue if at max capacity\n    const visibleCount = this.container.children.length\n    if (visibleCount >= this.maxVisible) {\n      this.queue.push(notification)\n      return id\n    }\n\n    this.render(notification)\n    return id\n  }\n\n  private render(notification: Notification): void {\n    const { id, type, title, message, duration, dismissible, onAction, actionLabel } = notification\n\n    // Create notification element\n    const element = document.createElement('div')\n    element.className = `notification-toast notification-${type}`\n    element.setAttribute('role', 'alert')\n    element.setAttribute('aria-live', type === 'error' ? 'assertive' : 'polite')\n    element.dataset.id = id\n\n    // Icon mapping\n    const icons = {\n      success: 'check_circle',\n      error: 'error',\n      warning: 'warning',\n      info: 'info'\n    }\n\n    // Build HTML\n    element.innerHTML = `\n      <div class=\"notification-icon\">\n        <span class=\"material-symbols-outlined\">${icons[type!]}</span>\n      </div>\n      <div class=\"notification-content\">\n        ${title ? `<div class=\"notification-title\">${this.escapeHtml(title)}</div>` : ''}\n        <div class=\"notification-message\">${this.escapeHtml(message)}</div>\n      </div>\n      ${\n        onAction\n          ? `\n        <button class=\"notification-action\" aria-label=\"${actionLabel}\">\n          ${actionLabel}\n        </button>\n      `\n          : ''\n      }\n      ${\n        dismissible\n          ? `\n        <button class=\"notification-close\" aria-label=\"Close notification\">\n          <span class=\"material-symbols-outlined\">close</span>\n        </button>\n      `\n          : ''\n      }\n    `\n\n    // Add event listeners\n    if (dismissible) {\n      const closeBtn = element.querySelector('.notification-close')\n      closeBtn?.addEventListener('click', () => this.dismiss(id))\n    }\n\n    if (onAction) {\n      const actionBtn = element.querySelector('.notification-action')\n      actionBtn?.addEventListener('click', () => {\n        onAction()\n        this.dismiss(id)\n      })\n    }\n\n    // Add to DOM with animation\n    this.container.appendChild(element)\n    notification.element = element\n    this.notifications.set(id, notification)\n\n    // Trigger animation\n    requestAnimationFrame(() => {\n      element.classList.add('notification-visible')\n    })\n\n    // Auto-dismiss after duration\n    if (duration && duration > 0) {\n      notification.timeout = window.setTimeout(() => {\n        this.dismiss(id)\n      }, duration)\n    }\n  }\n\n  dismiss(id: string): void {\n    const notification = this.notifications.get(id)\n    if (!notification) return\n\n    const { element, timeout } = notification\n\n    // Clear timeout\n    if (timeout) {\n      clearTimeout(timeout)\n    }\n\n    // Animate out\n    element?.classList.remove('notification-visible')\n    element?.classList.add('notification-hiding')\n\n    // Remove from DOM after animation\n    setTimeout(() => {\n      if (element?.parentNode) {\n        element.parentNode.removeChild(element)\n      }\n      this.notifications.delete(id)\n\n      // Show next queued notification\n      this.processQueue()\n    }, 300)\n  }\n\n  private processQueue(): void {\n    const visibleCount = this.container.children.length\n    if (this.queue.length > 0 && visibleCount < this.maxVisible) {\n      const next = this.queue.shift()\n      if (next) {\n        this.render(next)\n      }\n    }\n  }\n\n  // Convenience methods\n  success(message: string, options: Partial<NotificationOptions> = {}): string {\n    return this.show({ type: 'success', message, title: 'Success', ...options })\n  }\n\n  error(message: string, options: Partial<NotificationOptions> = {}): string {\n    return this.show({\n      type: 'error',\n      message,\n      title: 'Error',\n      duration: 7000, // Longer for errors\n      ...options\n    })\n  }\n\n  warning(message: string, options: Partial<NotificationOptions> = {}): string {\n    return this.show({ type: 'warning', message, title: 'Warning', ...options })\n  }\n\n  info(message: string, options: Partial<NotificationOptions> = {}): string {\n    return this.show({ type: 'info', message, ...options })\n  }\n\n  // Clear all notifications\n  clearAll(): void {\n    this.notifications.forEach(notification => {\n      this.dismiss(notification.id)\n    })\n    this.queue = []\n  }\n\n  // Utility: Escape HTML\n  private escapeHtml(text: string): string {\n    const div = document.createElement('div')\n    div.textContent = text\n    return div.innerHTML\n  }\n}\n\n// Create singleton instance\nexport const notifications = new NotificationManager()\n","/**\n * Color Utilities\n */\n\nexport function getColorLabel(color: string): string {\n    const labels: { [key: string]: string } = {\n        'text': 'Text (Gray)',\n        'link': 'Link (Blue)',\n        'primary': 'Primary (Cyan)',\n        'info': 'Info (Light Blue)',\n        'success': 'Success (Green)',\n        'warning': 'Warning (Yellow)',\n        'danger': 'Danger (Red)'\n    }\n    return labels[color] || color\n}\n\nexport function normalizeToBulmaColor(color: string): string {\n    // If it's already a Bulma color name, return it\n    const bulmaColors = ['text', 'link', 'primary', 'info', 'success', 'warning', 'danger']\n    if (bulmaColors.includes(color)) {\n        return color\n    }\n\n    // Map old hex colors to closest Bulma color\n    const hexToColor: { [key: string]: string } = {\n        '#485fc7': 'primary',\n        '#3e8ed0': 'info',\n        '#48c78e': 'success',\n        '#ffe08a': 'warning',\n        '#f14668': 'danger'\n    }\n\n    return hexToColor[color] || 'primary'\n}\n\nexport function setupColorButtons(hiddenInputId: string, containerId: string): void {\n    const hiddenInput = document.getElementById(hiddenInputId) as HTMLInputElement | null\n\n    // Get fresh button references each time\n    const buttons = document.querySelectorAll(`#${containerId} .color-btn`)\n    if (!buttons.length) return\n\n    buttons.forEach(button => {\n        // Remove old listeners by cloning\n        const newButton = button.cloneNode(true) as Element\n        const parent = button.parentNode\n        if (parent) {\n            parent.replaceChild(newButton, button)\n        }\n    })\n\n    // Get fresh references after cloning\n    const colorButtons = document.querySelectorAll(`#${containerId} .color-btn`)\n\n    colorButtons.forEach(button => {\n        button.addEventListener('click', (e) => {\n            e.preventDefault()\n            const color = (button as HTMLElement).dataset.color\n\n            // Update hidden input\n            if (hiddenInput && color) hiddenInput.value = color\n\n            // Update active state - get fresh references again\n            const allButtons = document.querySelectorAll(`#${containerId} .color-btn`)\n            allButtons.forEach(btn => {\n                const element = btn as HTMLElement\n                element.classList.remove('is-active')\n                element.style.border = '3px solid transparent'\n                element.style.borderRadius = '8px'\n            })\n\n            const element = button as HTMLElement\n            element.classList.add('is-active')\n            element.style.border = '3px solid var(--bulma-text)'\n            element.style.borderRadius = '8px'\n        })\n    })\n}\n\nexport function selectColorButton(color: string, containerId: string, hiddenInputId: string): void {\n    const colorButtons = document.querySelectorAll(`#${containerId} .color-btn`)\n    const hiddenInput = document.getElementById(hiddenInputId) as HTMLInputElement | null\n\n    if (hiddenInput) hiddenInput.value = color\n\n    colorButtons.forEach(btn => {\n        const element = btn as HTMLElement\n        element.classList.remove('is-active')\n        element.style.border = '3px solid transparent'\n        element.style.borderRadius = '8px'\n\n        if (element.dataset.color === color) {\n            element.classList.add('is-active')\n            element.style.border = `3px solid var(--bulma-text)`\n            element.style.borderRadius = '8px'\n        }\n    })\n}\n","/**\n * UI Module\n * Handles all UI rendering and user interactions\n */\n\nimport { state } from '@/utils/state'\nimport { contexts } from '@/services/contexts'\nimport { calendar } from '@/components/Calendar'\nimport { notes } from '@/services/notes'\nimport { events } from '@/utils/events'\nimport { api } from '@/services/api'\nimport { notifications } from '@/components/Notifications'\nimport { markdownEditor } from '@/components/Editor'\nimport { auth } from '@/services/auth'\nimport { cacheElements } from './ui/elements'\nimport { normalizeToBulmaColor, getColorLabel, setupColorButtons, selectColorButton } from './ui/colors'\nimport type { UIElements, SyncStatusOptions, NotificationOptions } from './ui/types'\n\nexport class UIManager {\n    elements: UIElements;\n    lastKnownDate: string | null;\n    INITIAL_RENDER_COUNT: number;\n    renderedNotesCount: number;\n    clockStarted: boolean;\n\n    constructor() {\n        this.elements = {} as UIElements;\n        this.lastKnownDate = null;\n        // Virtual scrolling optimization\n        this.INITIAL_RENDER_COUNT = 50; // Only render first 50 notes initially\n        this.renderedNotesCount = this.INITIAL_RENDER_COUNT;\n        this.clockStarted = false;\n    }\n\n    init(): void {\n        this.elements = cacheElements()\n        this.setupEventListeners()\n        this.setupStateSubscriptions()\n        this.setupUserDropdown()\n        this.setupMobileNavigation()\n        // Clock will start after server time sync in showApp()\n    }\n\n    setupEventListeners(): void {\n        // Editor fullscreen button\n        const editorFullscreenBtn = document.getElementById('editor-fullscreen-btn');\n        if (editorFullscreenBtn) {\n            editorFullscreenBtn.addEventListener('click', () => {\n                this.openFullscreenNote();\n            });\n        }\n\n        // Editor delete button\n        const editorDeleteBtn = document.getElementById('editor-delete-note-btn');\n        if (editorDeleteBtn) {\n            editorDeleteBtn.addEventListener('click', () => {\n                const context = state.get('selectedContext');\n                const dateStr = state.get('selectedDate');\n\n                if (context && dateStr) {\n                    // Get formatted date for display\n                    const settings = state.get('userSettings');\n                    const timezone = settings.timezone || 'UTC';\n                    const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n                    const [year, month, day] = dateStr.split('-').map(Number);\n                    const dateObj = new Date(year, month - 1, day);\n\n                    // Get the day name\n                    const dayName = dateObj.toLocaleDateString('en-US', {\n                        weekday: 'long',\n                        timeZone: timezone\n                    });\n\n                    // Format date\n                    const yy = String(year).substring(2);\n                    const mm = String(month).padStart(2, '0');\n                    const dd = String(day).padStart(2, '0');\n\n                    let formattedDateStr: string;\n                    if (dateFormat === 'MM-DD-YY') {\n                        formattedDateStr = `${mm}-${dd}-${yy}`;\n                    } else {\n                        formattedDateStr = `${dd}-${mm}-${yy}`;\n                    }\n\n                    const formattedDate = `${dayName}, ${formattedDateStr}`;\n\n                    // Show modal\n                    this.showDeleteNoteModal(context, dateStr, formattedDate);\n                }\n            });\n        }\n\n        // Context selection (desktop)\n        // Just update state - the CONTEXT_CHANGED event handler will do the rest\n        this.elements.contextSelect?.addEventListener('change', (e) => {\n            const context = (e.target as HTMLSelectElement).value;\n            console.log('[UI] Desktop context selector changed:', context);\n            contexts.selectContext(context);\n        });\n\n        // Context selection (mobile)\n        // Just update state - the CONTEXT_CHANGED event handler will do the rest\n        this.elements.mobileContextSelect?.addEventListener('change', (e) => {\n            const context = (e.target as HTMLSelectElement).value;\n            console.log('[UI] Mobile context selector changed:', context);\n            contexts.selectContext(context);\n        });\n\n        // Date picker\n        this.elements.datePicker?.addEventListener('change', async (e) => {\n            const dateStr = (e.target as HTMLInputElement).value;\n            // Check if this date is already selected\n            const currentDate = state.get('selectedDate');\n            if (currentDate === dateStr) {\n                console.log('[UI] Date picker: date already selected, skipping:', dateStr);\n                return;\n            }\n            await notes.selectDate(dateStr);\n        });\n\n        // Calendar navigation\n        document.getElementById('prev-month')?.addEventListener('click', () => {\n            calendar.prevMonth();\n        });\n\n        document.getElementById('next-month')?.addEventListener('click', () => {\n            calendar.nextMonth();\n        });\n\n        // Theme toggle\n        this.elements.themeToggleMenu?.addEventListener('click', async (e) => {\n            e.preventDefault();\n            const currentTheme = document.documentElement.getAttribute('data-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n            this.setTheme(newTheme);\n\n            const settings = state.get('userSettings');\n            state.set('userSettings', { ...settings, theme: newTheme });\n\n            try {\n                await api.updateSettings({ ...settings, theme: newTheme });\n            } catch (err) {\n                console.error('Failed to save theme:', err);\n            }\n        });\n\n        this.elements.themeToggleSwitch?.addEventListener('change', (e) => {\n            this.setTheme((e.target as HTMLInputElement).checked ? 'dark' : 'light');\n        });\n\n        // Keyboard shortcuts\n        this.setupKeyboardShortcuts();\n    }\n\n    setupKeyboardShortcuts(): void {\n        document.addEventListener('keydown', (e) => {\n            const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n            const modKey = isMac ? e.metaKey : e.ctrlKey;\n\n            // Cmd/Ctrl+K: Focus context selector\n            if (modKey && e.key === 'k') {\n                e.preventDefault();\n                this.elements.contextSelect?.focus();\n                return;\n            }\n\n            // Cmd/Ctrl+S: Force sync\n            if (modKey && e.key === 's') {\n                e.preventDefault();\n                events.emit('sync-force' as any, undefined);\n                return;\n            }\n\n            // Cmd/Ctrl+/: Focus editor (handled by markdown editor)\n            if (modKey && e.key === '/') {\n                e.preventDefault();\n                return;\n            }\n\n            // Escape: Close modals\n            if (e.key === 'Escape') {\n                // Check if delete modal is open (highest priority)\n                const deleteModal = document.getElementById('delete-note-modal');\n                if (deleteModal?.classList.contains('is-active')) {\n                    this.closeDeleteNoteModal();\n                    return;\n                }\n\n                this.closeAllModals();\n                return;\n            }\n        });\n    }\n\n    setupUserDropdown(): void {\n        const userDropdown = document.getElementById('user-dropdown');\n        const userDropdownButton = document.getElementById('user-dropdown-button');\n        const settingsMenuItem = document.getElementById('settings-menu-item');\n        const signoutMenuItem = document.getElementById('signout-menu-item');\n\n        if (!userDropdown || !userDropdownButton) return;\n\n        // Toggle dropdown\n        userDropdownButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            userDropdown.classList.toggle('is-active');\n        });\n\n        // Settings click\n        settingsMenuItem?.addEventListener('click', (e) => {\n            e.preventDefault();\n            userDropdown.classList.remove('is-active');\n            this.showSettingsModal();\n        });\n\n        // Sign out click\n        signoutMenuItem?.addEventListener('click', (e) => {\n            e.preventDefault();\n            userDropdown.classList.remove('is-active');\n            auth.signOut();\n        });\n\n        // Close when clicking outside\n        document.addEventListener('click', (e) => {\n            if (!userDropdown.contains(e.target as Node)) {\n                userDropdown.classList.remove('is-active');\n            }\n        });\n\n        // Close on escape\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape' && userDropdown.classList.contains('is-active')) {\n                userDropdown.classList.remove('is-active');\n            }\n        });\n    }\n\n    setupStateSubscriptions(): void {\n        // Re-render UI when contexts change\n        state.subscribe('contexts', () => {\n            this.renderContextsSelect();\n        });\n\n        // Update calendar when month/year changes\n        state.subscribeMany(['currentCalendarMonth', 'currentCalendarYear'], () => {\n            calendar.render();\n        });\n\n        // Update UI when notes list changes\n        state.subscribe('notes', () => {\n            this.renderNotesList();\n            calendar.render();\n        });\n\n        // Update breadcrumb when context changes\n        state.subscribe('selectedContext', (_context) => {\n            this.updateBreadcrumb();\n            // Reset virtual scrolling when switching contexts\n            this.renderedNotesCount = this.INITIAL_RENDER_COUNT;\n        });\n\n        // Update date picker when selected date changes\n        state.subscribe('selectedDate', (newDate) => {\n            if (this.elements.datePicker && newDate) {\n                this.elements.datePicker.value = newDate as string;\n                this.updateDatePickerDisplay(newDate as string);\n            }\n            this.renderNotesList(); // Update active state\n            calendar.render();\n            this.updateBreadcrumb();\n            this.updateEditorDeleteButton(); // Update delete button visibility\n        });\n\n        // Update date picker display when date format changes\n        state.subscribe('userSettings', () => {\n            const selectedDate = state.get('selectedDate');\n            if (selectedDate) {\n                this.updateDatePickerDisplay(selectedDate);\n            }\n            this.updateBreadcrumb();\n        });\n\n        // Update context indicator when selected context changes\n        state.subscribe('selectedContext', (selectedContext) => {\n            // Update the select dropdown values (both desktop and mobile)\n            if (this.elements.contextSelect && selectedContext) {\n                this.elements.contextSelect.value = selectedContext;\n            }\n            if (this.elements.mobileContextSelect && selectedContext) {\n                this.elements.mobileContextSelect.value = selectedContext;\n            }\n            this.updateContextIndicator();\n            this.updateEditorState();\n        });\n\n        // Update user email when user changes\n        state.subscribe('currentUser', (user) => {\n            if (this.elements.userEmail && user) {\n                this.elements.userEmail.textContent = user.email || '';\n            }\n        });\n\n        // Update theme when settings change\n        state.subscribe('userSettings', (settings) => {\n            if (settings.theme) {\n                this.setTheme(settings.theme);\n            }\n            // Update context selector visibility based on uniqueContextMode\n            this.updateContextSelectorVisibility();\n            // Update breadcrumb visibility\n            this.updateBreadcrumbVisibility();\n            // Update markdown editor visibility\n            this.updateMarkdownEditorVisibility();\n            // Update new context button visibility\n            this.updateNewContextButtonVisibility();\n        });\n    }\n\n    renderContextsSelect(): void {\n        const contextsList = state.get('contexts');\n        const selectedContext = state.get('selectedContext');\n\n        const optionsHTML = '<option value=\"\">Select context...</option>' +\n            contextsList.map(c =>\n                `<option value=\"${c.name}\" data-color=\"${c.color || 'primary'}\">${c.name}</option>`\n            ).join('');\n\n        // Update desktop selector\n        if (this.elements.contextSelect) {\n            this.elements.contextSelect.innerHTML = optionsHTML;\n            if (selectedContext) {\n                this.elements.contextSelect.value = selectedContext;\n            }\n        }\n\n        // Update mobile selector\n        if (this.elements.mobileContextSelect) {\n            this.elements.mobileContextSelect.innerHTML = optionsHTML;\n            if (selectedContext) {\n                this.elements.mobileContextSelect.value = selectedContext;\n            }\n        }\n\n        this.updateContextIndicator();\n    }\n\n    updateContextIndicator(): void {\n        // Update desktop indicator\n        if (this.elements.contextSelect && this.elements.contextColorIndicator) {\n            const opt = this.elements.contextSelect.options[this.elements.contextSelect.selectedIndex] as HTMLOptionElement;\n\n            if (opt?.dataset.color && opt.value !== '') {\n                const normalizedColor = normalizeToBulmaColor(opt.dataset.color);\n                this.elements.contextColorIndicator.style.background = `var(--bulma-${normalizedColor})`;\n                this.elements.contextColorIndicator.style.opacity = '1';\n            } else {\n                this.elements.contextColorIndicator.style.background = 'var(--bulma-grey-light)';\n                this.elements.contextColorIndicator.style.opacity = '0.3';\n            }\n        }\n\n        // Update mobile indicator\n        if (this.elements.mobileContextSelect && this.elements.mobileContextColorIndicator) {\n            const opt = this.elements.mobileContextSelect.options[this.elements.mobileContextSelect.selectedIndex] as HTMLOptionElement;\n\n            if (opt?.dataset.color && opt.value !== '') {\n                const normalizedColor = normalizeToBulmaColor(opt.dataset.color);\n                this.elements.mobileContextColorIndicator.style.background = `var(--bulma-${normalizedColor})`;\n                this.elements.mobileContextColorIndicator.style.opacity = '1';\n            } else {\n                this.elements.mobileContextColorIndicator.style.background = 'var(--bulma-grey-light)';\n                this.elements.mobileContextColorIndicator.style.opacity = '0.3';\n            }\n        }\n    }\n\n    renderNotesList(): void {\n        const notesList = state.get('notes');\n        const selectedDate = state.get('selectedDate');\n        const settings = state.get('userSettings');\n        const timezone = settings.timezone || 'UTC';\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n        if (!this.elements.notesList) return;\n\n        if (notesList.length === 0) {\n            this.elements.notesList.innerHTML = '<li class=\"has-text-centered py-6 has-text-grey-light\">No notes yet</li>';\n            return;\n        }\n\n        // Virtual scrolling: only render visible notes\n        const notesToRender = notesList.slice(0, this.renderedNotesCount);\n        const hasMore = notesList.length > this.renderedNotesCount;\n\n        this.elements.notesList.innerHTML = notesToRender.map(note => {\n            const [year, month, day] = note.date.split('-').map(Number);\n            const dateObj = new Date(year, month - 1, day);\n\n            // Get the day name in English\n            const dayName = dateObj.toLocaleDateString('en-US', {\n                weekday: 'long',\n                timeZone: timezone\n            });\n\n            // Format date based on user preference\n            const yy = String(year).substring(2); // Get last 2 digits of year\n            const mm = String(month).padStart(2, '0');\n            const dd = String(day).padStart(2, '0');\n\n            let dateStr: string;\n            if (dateFormat === 'MM-DD-YY') {\n                dateStr = `${mm}-${dd}-${yy}`;\n            } else {\n                dateStr = `${dd}-${mm}-${yy}`;\n            }\n\n            // Format: \"Monday, 24-10-25.md\" or \"Monday, 10-24-25.md\" depending on dateFormat\n            const formattedDate = `${dayName}, ${dateStr}.md`;\n\n            const isActive = note.date === selectedDate;\n\n            return `\n                <li>\n                    <a\n                        class=\"${isActive ? 'is-active' : ''}\"\n                        data-date=\"${note.date}\"\n                    >\n                        ${formattedDate}\n                    </a>\n                </li>\n            `;\n        }).join('');\n\n        // Add \"Load More\" button if there are more notes\n        if (hasMore) {\n            this.elements.notesList.innerHTML += `\n                <li class=\"has-text-centered py-3\">\n                    <button class=\"button is-small is-ghost\" id=\"load-more-notes\" style=\"opacity: 0.7;\">\n                        <span class=\"icon\">\n                            <span class=\"material-symbols-outlined\">expand_more</span>\n                        </span>\n                        <span>Load ${Math.min(50, notesList.length - this.renderedNotesCount)} more</span>\n                    </button>\n                </li>\n            `;\n        }\n\n        // Add click handlers for notes\n        this.elements.notesList.querySelectorAll('a[data-date]').forEach(link => {\n            link.addEventListener('click', async (e) => {\n                e.preventDefault(); // Prevent default link behavior\n                const dateStr = (link as HTMLElement).dataset.date;\n                if (dateStr) {\n                    // Check if this date is already selected\n                    const currentDate = state.get('selectedDate');\n                    if (currentDate === dateStr) {\n                        console.log('[UI] Date already selected, skipping:', dateStr);\n                        return;\n                    }\n                    await notes.selectDate(dateStr);\n                }\n            });\n        });\n\n        // Add click handler for \"Load More\" button\n        const loadMoreBtn = document.getElementById('load-more-notes');\n        if (loadMoreBtn) {\n            loadMoreBtn.addEventListener('click', () => {\n                this.renderedNotesCount += 50;\n                this.renderNotesList();\n            });\n        }\n    }\n\n    updateEditorState(): void {\n        // Editor state is now managed by the markdown editor module\n        const context = state.get('selectedContext');\n        const contextsList = state.get('contexts') || [];\n\n        // Update editor state based on context\n        if (context) {\n            markdownEditor.setDisabled(false);\n        } else {\n            // First ensure Quill is loaded before setting placeholder\n            markdownEditor.ensureQuillLoaded().then(() => {\n                markdownEditor.setDisabled(true);\n                markdownEditor.setContent('');\n\n                // If there are no contexts at all, show a message to create the first one\n                if (contextsList.length === 0) {\n                    // Wait a bit to ensure setDisabled has applied\n                    setTimeout(() => {\n                        markdownEditor.setPlaceholderMessage('Click \"New Context\" to create your first context and start writing notes.');\n                    }, 100);\n                }\n            });\n        }\n\n        // Show/hide delete button based on context\n        this.updateEditorDeleteButton();\n    }\n\n    updateEditorDeleteButton(): void {\n        const editorDeleteBtn = document.getElementById('editor-delete-note-btn');\n        const editorFullscreenBtn = document.getElementById('editor-fullscreen-btn');\n\n        const context = state.get('selectedContext');\n        const selectedDate = state.get('selectedDate');\n\n        // Show buttons only if we have both context and selected date\n        if (context && selectedDate) {\n            if (editorDeleteBtn) editorDeleteBtn.style.display = 'flex';\n            if (editorFullscreenBtn) editorFullscreenBtn.style.display = 'flex';\n        } else {\n            if (editorDeleteBtn) editorDeleteBtn.style.display = 'none';\n            if (editorFullscreenBtn) editorFullscreenBtn.style.display = 'none';\n        }\n    }\n\n    updateSaveIndicator(status: string): void {\n        if (!this.elements.saveIndicator) return;\n\n        this.elements.saveIndicator.className = `save-indicator ${status}`;\n\n        if (status === 'saved') {\n            this.elements.saveIndicator.textContent = 'Saved locally ✓';\n            setTimeout(() => {\n                if (this.elements.saveIndicator) {\n                    this.elements.saveIndicator.textContent = '';\n                }\n            }, 2000);\n        } else {\n            this.elements.saveIndicator.textContent = '';\n        }\n    }\n\n    updateSyncStatus({ pending, syncing }: SyncStatusOptions): void {\n        if (!this.elements.syncStatus || !this.elements.syncStatusText) return;\n\n        // Show sync indicator when there are pending operations or actively syncing\n        if (pending > 0 || syncing) {\n            this.elements.syncStatus.style.display = 'flex';\n\n            if (syncing) {\n                this.elements.syncStatusText.textContent = `Syncing ${pending} note${pending !== 1 ? 's' : ''}...`;\n                this.elements.syncStatus.classList.add('is-syncing');\n                this.elements.syncStatus.classList.remove('is-pending');\n            } else {\n                this.elements.syncStatusText.textContent = `${pending} note${pending !== 1 ? 's' : ''} pending sync`;\n                this.elements.syncStatus.classList.add('is-pending');\n                this.elements.syncStatus.classList.remove('is-syncing');\n            }\n        } else {\n            // Hide after successful sync with a brief delay\n            setTimeout(() => {\n                if (this.elements.syncStatus) {\n                    this.elements.syncStatus.style.display = 'none';\n                    this.elements.syncStatus.classList.remove('is-syncing', 'is-pending');\n                }\n            }, 1000);\n        }\n    }\n\n    setTheme(theme: string): void {\n        document.documentElement.setAttribute('data-theme', theme);\n        if (this.elements.themeToggleSwitch) {\n            this.elements.themeToggleSwitch.checked = theme === 'dark';\n        }\n        this.updateThemeIcon();\n        localStorage.setItem('theme', theme);\n    }\n\n    updateThemeIcon(): void {\n        const theme = document.documentElement.getAttribute('data-theme');\n        const themeIcon = this.elements.themeToggleMenu?.querySelector('.material-symbols-outlined');\n        if (themeIcon) {\n            themeIcon.textContent = theme === 'dark' ? 'light_mode' : 'dark_mode';\n        }\n    }\n\n    showApp(_skipAnimation: boolean = false): void {\n        console.log('[UI] showApp called');\n        console.log('[UI] authSection:', this.elements.authSection);\n        console.log('[UI] appSection:', this.elements.appSection);\n\n        if (!this.elements.authSection || !this.elements.appSection) {\n            console.error('[UI] Missing elements!');\n            return;\n        }\n\n        // Hide loader if visible\n        const loader = document.getElementById('landing-loader');\n        if (loader) {\n            console.log('[UI] Hiding loader');\n            loader.classList.remove('visible');\n        }\n\n        // Simple: hide auth, show app\n        console.log('[UI] Hiding auth section');\n        this.elements.authSection.classList.remove('visible');\n\n        console.log('[UI] Showing app section');\n        this.elements.appSection.classList.add('visible');\n\n        console.log('[UI] App section display:', window.getComputedStyle(this.elements.appSection).display);\n\n        // Update context selector visibility based on settings\n        this.updateContextSelectorVisibility();\n\n        // Update breadcrumb and markdown editor visibility\n        this.updateBreadcrumbVisibility();\n        this.updateMarkdownEditorVisibility();\n\n        // Update new context button visibility\n        this.updateNewContextButtonVisibility();\n\n        // Update editor state (to show proper placeholder message)\n        this.updateEditorState();\n\n        // Start clock (after server time sync is complete)\n        this.startClock();\n\n        // Check if user has no contexts (new user or deleted all contexts)\n        // We use hasNoContexts from the backend response, NOT from local state\n        // because local state might not be loaded yet\n        const hasNoContexts = (state as any).get('hasNoContexts');\n\n        console.log('[UI] showApp - hasNoContexts:', hasNoContexts);\n\n        // Show onboarding modal when user has no contexts\n        // This happens when:\n        // - New user (never created a context)\n        // - User deleted all their contexts\n        if (hasNoContexts) {\n            console.log('[UI] Showing onboarding modal');\n            setTimeout(() => {\n                this.elements.onboardingModal?.classList.add('is-active');\n            }, 500);\n        } else {\n            console.log('[UI] NOT showing onboarding modal');\n        }\n    }\n\n    hideApp(): void {\n        if (!this.elements.authSection || !this.elements.appSection) return;\n\n        // Simple: hide app, show auth\n        this.elements.appSection.classList.remove('visible');\n        this.elements.authSection.classList.add('visible');\n    }\n\n    showError(message: string | { title?: string; message?: string; duration?: number }, options: NotificationOptions = {}): void {\n        // Handle different error types\n        let title = 'Error';\n        let duration = 7000;\n        let msg = '';\n\n        if (typeof message === 'object') {\n            // Structured error\n            title = message.title || 'Error';\n            msg = message.message || 'An error occurred';\n            duration = message.duration || 7000;\n        } else {\n            msg = message;\n        }\n\n        // Check if it's a network error\n        if (msg.includes('network') || msg.includes('offline')) {\n            title = 'Connection Error';\n            duration = 10000; // Longer for network issues\n        }\n\n        notifications.error(msg, { title, duration, ...options });\n    }\n\n    showSuccess(message: string, options: NotificationOptions = {}): void {\n        notifications.success(message, { duration: 3000, ...options });\n    }\n\n    showWarning(message: string, options: NotificationOptions = {}): void {\n        notifications.warning(message, { duration: 5000, ...options });\n    }\n\n    showInfo(message: string, options: NotificationOptions = {}): void {\n        notifications.info(message, { duration: 4000, ...options });\n    }\n\n    // Modal methods\n    showContextModal(): void {\n        this.elements.contextModal?.classList.add('is-active');\n        const nameInput = document.getElementById('context-name') as HTMLInputElement | null;\n        const colorInput = document.getElementById('context-color') as HTMLInputElement | null;\n        if (nameInput) nameInput.value = '';\n        if (colorInput) colorInput.value = 'primary';\n\n        // Setup color buttons handlers\n        setupColorButtons('context-color', 'context-color-buttons');\n\n        // Reset to primary\n        selectColorButton('primary', 'context-color-buttons', 'context-color');\n\n        nameInput?.focus();\n    }\n\n    closeContextModal(): void {\n        this.elements.contextModal?.classList.remove('is-active');\n    }\n\n    showSettingsModal(): void {\n        const settings = state.get('userSettings');\n\n        if (this.elements.weekStartSelect) {\n            this.elements.weekStartSelect.value = String(settings.weekStart);\n        }\n        if (this.elements.timezoneSelect) {\n            this.elements.timezoneSelect.value = settings.timezone;\n        }\n        const dateFormatSelect = document.getElementById('date-format-select') as HTMLSelectElement | null;\n        if (dateFormatSelect) {\n            dateFormatSelect.value = settings.dateFormat || 'DD-MM-YY';\n        }\n        const uniqueContextModeSwitch = document.getElementById('unique-context-mode-switch') as HTMLInputElement | null;\n        if (uniqueContextModeSwitch) {\n            uniqueContextModeSwitch.checked = settings.uniqueContextMode || false;\n        }\n        const showBreadcrumbSwitch = document.getElementById('show-breadcrumb-switch') as HTMLInputElement | null;\n        if (showBreadcrumbSwitch) {\n            showBreadcrumbSwitch.checked = settings.showBreadcrumb === true;\n        }\n        const showMarkdownEditorSwitch = document.getElementById('show-markdown-editor-switch') as HTMLInputElement | null;\n        if (showMarkdownEditorSwitch) {\n            showMarkdownEditorSwitch.checked = settings.showMarkdownEditor === true;\n        }\n        const hideNewContextButtonSwitch = document.getElementById('hide-new-context-button-switch') as HTMLInputElement | null;\n        if (hideNewContextButtonSwitch) {\n            hideNewContextButtonSwitch.checked = settings.hideNewContextButton === true;\n        }\n\n        // Reset accordion to collapsed state\n        const accordionContent = document.getElementById('contexts-accordion-content') as HTMLElement | null;\n        const accordionIcon = document.getElementById('contexts-accordion-icon');\n        if (accordionContent) {\n            accordionContent.style.display = 'none';\n            accordionContent.style.opacity = '1'; // Reset opacity\n        }\n        if (accordionIcon) {\n            const iconElement = accordionIcon.querySelector('.material-symbols-outlined');\n            if (iconElement) iconElement.textContent = 'expand_more';\n        }\n\n        // Render contexts list\n        this.renderContextsEditList();\n\n        // Reset save button state\n        const saveBtn = document.getElementById('settings-save-btn') as HTMLButtonElement | null;\n        const saveIcon = document.getElementById('settings-save-icon');\n        const saveSpinner = document.getElementById('settings-save-spinner') as HTMLElement | null;\n        const saveText = document.getElementById('settings-save-text');\n\n        if (saveBtn) saveBtn.disabled = false;\n        if (saveIcon) {\n            saveIcon.style.display = 'inline-flex';\n            const iconElement = saveIcon.querySelector('.material-symbols-outlined');\n            if (iconElement) iconElement.textContent = 'check';\n        }\n        if (saveSpinner) saveSpinner.style.display = 'none';\n        if (saveText) saveText.textContent = 'Save';\n\n        this.elements.settingsModal?.classList.add('is-active');\n    }\n\n    closeSettingsModal(): void {\n        // Reset accordion to collapsed state before closing\n        const accordionContent = document.getElementById('contexts-accordion-content') as HTMLElement | null;\n        const accordionIcon = document.getElementById('contexts-accordion-icon');\n        if (accordionContent) {\n            accordionContent.style.display = 'none';\n            accordionContent.style.opacity = '1'; // Reset opacity\n        }\n        if (accordionIcon) {\n            const iconElement = accordionIcon.querySelector('.material-symbols-outlined');\n            if (iconElement) iconElement.textContent = 'expand_more';\n        }\n\n        this.elements.settingsModal?.classList.remove('is-active');\n    }\n\n    closeOnboardingModal(): void {\n        this.elements.onboardingModal?.classList.remove('is-active');\n        // No need to store in localStorage anymore since we use backend isFirstLogin flag\n    }\n\n    showDeleteNoteModal(context: string, date: string, formattedDate: string): void {\n        const modal = document.getElementById('delete-note-modal') as HTMLElement & { dataset: { context?: string; date?: string } } | null;\n        const message = document.getElementById('delete-note-message');\n\n        if (modal && message) {\n            // Store the note info for later use\n            modal.dataset.context = context;\n            modal.dataset.date = date;\n\n            // Update message with formatted date\n            message.textContent = `Are you sure you want to delete the note for ${formattedDate}?`;\n\n            modal.classList.add('is-active');\n        }\n    }\n\n    closeDeleteNoteModal(): void {\n        const modal = document.getElementById('delete-note-modal') as HTMLElement & { dataset: { context?: string; date?: string } } | null;\n        if (modal) {\n            modal.classList.remove('is-active');\n            delete modal.dataset.context;\n            delete modal.dataset.date;\n        }\n    }\n\n    closeAllModals(): void {\n        this.closeContextModal();\n        this.closeSettingsModal();\n        this.closeOnboardingModal();\n        this.closeDeleteNoteModal();\n    }\n\n    // Clock\n    startClock(): void {\n        if (this.clockStarted) {\n            console.log('[UI] Clock already started, skipping');\n            return;\n        }\n        this.clockStarted = true;\n        console.log('[UI] Starting clock with server time sync');\n        this.updateCurrentDateTime();\n        setInterval(() => this.updateCurrentDateTime(), 1000);\n    }\n\n    updateCurrentDateTime(): void {\n        const settings = state.get('userSettings');\n        const timezone = settings.timezone || 'UTC';\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n        const serverTimeOffset = state.get('serverTimeOffset');\n        const now = new Date(Date.now() + serverTimeOffset);\n\n        // Determine locale based on user's date format preference\n        // MM-DD-YY: Use en-US (American format)\n        // DD-MM-YY: Use browser locale or fallback to en-GB (European format)\n        let locale: string;\n        if (dateFormat === 'MM-DD-YY') {\n            locale = 'en-US';\n        } else {\n            // Try to use the browser's locale, fallback to 'en-GB' if not available\n            locale = navigator.language || navigator.languages?.[0] || 'en-GB';\n        }\n\n        const timeOptions: Intl.DateTimeFormatOptions = {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n            timeZone: timezone\n        };\n\n        const dateOptions: Intl.DateTimeFormatOptions = {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            timeZone: timezone\n        };\n\n        const timeString = now.toLocaleTimeString(locale, timeOptions);\n        const dateString = now.toLocaleDateString(locale, dateOptions);\n\n        if (this.elements.currentTime) {\n            this.elements.currentTime.textContent = timeString;\n        }\n        if (this.elements.currentDate) {\n            this.elements.currentDate.textContent = dateString;\n        }\n        // Update mobile clock\n        if (this.elements.mobileCurrentTime) {\n            this.elements.mobileCurrentTime.textContent = timeString;\n        }\n        if (this.elements.mobileCurrentDate) {\n            this.elements.mobileCurrentDate.textContent = dateString;\n        }\n\n        // Check if day changed and update calendar\n        const currentDate = (state as any).get('today') as string;\n        if (this.lastKnownDate && this.lastKnownDate !== currentDate) {\n            calendar.render();\n        }\n        this.lastKnownDate = currentDate as string | null;\n    }\n\n    updateDatePickerDisplay(dateStr: string): void {\n        const displayElement = document.getElementById('date-picker-display');\n        if (!displayElement || !dateStr) return;\n\n        const settings = state.get('userSettings');\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n        const [year, month, day] = dateStr.split('-').map(Number);\n\n        // Format date based on user preference\n        const yy = String(year).substring(2); // Get last 2 digits of year\n        const mm = String(month).padStart(2, '0');\n        const dd = String(day).padStart(2, '0');\n\n        let formattedDate: string;\n        if (dateFormat === 'MM-DD-YY') {\n            formattedDate = `${mm}/${dd}/${yy}`;\n        } else {\n            formattedDate = `${dd}/${mm}/${yy}`;\n        }\n\n        displayElement.textContent = formattedDate;\n    }\n\n    updateContextSelectorVisibility(): void {\n        const settings = state.get('userSettings');\n        const uniqueContextMode = settings.uniqueContextMode || false;\n\n        // Get context selector containers (both desktop and mobile)\n        const desktopContextContainer = document.getElementById('desktop-context-selector');\n        const mobileContextContainer = document.getElementById('mobile-context-selector');\n\n        if (uniqueContextMode) {\n            // Hide context selectors\n            if (desktopContextContainer) {\n                desktopContextContainer.style.display = 'none';\n            }\n            if (mobileContextContainer) {\n                mobileContextContainer.style.display = 'none';\n            }\n        } else {\n            // Show context selectors\n            if (desktopContextContainer) {\n                desktopContextContainer.style.display = '';\n            }\n            if (mobileContextContainer) {\n                mobileContextContainer.style.display = '';\n            }\n        }\n    }\n\n    updateBreadcrumbVisibility(): void {\n        const settings = state.get('userSettings');\n        const showBreadcrumb = settings.showBreadcrumb === true;\n\n        const breadcrumb = document.getElementById('drive-breadcrumb');\n        const mainSection = document.querySelector('.main-section');\n\n        // Show/hide breadcrumb\n        if (breadcrumb) {\n            breadcrumb.style.display = showBreadcrumb ? '' : 'none';\n        }\n\n        // Set data attribute that CSS will use to adjust spacing\n        if (mainSection) {\n            if (showBreadcrumb) {\n                mainSection.removeAttribute('data-hide-breadcrumb');\n            } else {\n                mainSection.setAttribute('data-hide-breadcrumb', 'true');\n            }\n        }\n    }\n\n    updateMarkdownEditorVisibility(): void {\n        const settings = state.get('userSettings');\n        const showMarkdownEditor = settings.showMarkdownEditor === true;\n\n        // Get the Quill toolbar\n        const toolbar = document.querySelector('.ql-toolbar') as HTMLElement | null;\n        if (toolbar) {\n            toolbar.style.display = showMarkdownEditor ? '' : 'none';\n        }\n\n        // The editor itself should remain enabled based on context selection,\n        // regardless of toolbar visibility\n        const context = state.get('selectedContext');\n        // Editor should be enabled if we have a context, regardless of toolbar visibility\n        markdownEditor.setDisabled(context ? false : true);\n    }\n\n    updateNewContextButtonVisibility(): void {\n        const settings = state.get('userSettings');\n        const hideNewContextButton = settings.hideNewContextButton === true;\n\n        // Get new context buttons (both desktop and mobile)\n        const desktopNewContextBtn = document.getElementById('desktop-new-context-btn');\n        const mobileNewContextBtn = document.getElementById('mobile-new-context-btn');\n\n        // Hide or show buttons\n        if (desktopNewContextBtn) {\n            desktopNewContextBtn.style.display = hideNewContextButton ? 'none' : '';\n        }\n        if (mobileNewContextBtn) {\n            mobileNewContextBtn.style.display = hideNewContextButton ? 'none' : '';\n        }\n    }\n\n    renderContextsEditList(): void {\n        const contextsList = state.get('contexts');\n        const container = document.getElementById('contexts-edit-list');\n\n        if (!container) return;\n\n        if (contextsList.length === 0) {\n            container.innerHTML = '<p class=\"has-text-centered has-text-grey-light py-5\">No contexts yet. Create your first context to get started!</p>';\n            return;\n        }\n\n        container.innerHTML = contextsList.map((ctx, _index) => {\n            // Normalize old hex colors to Bulma colors\n            const normalizedColor = normalizeToBulmaColor(ctx.color);\n\n            return `\n            <div class=\"is-flex is-align-items-center is-justify-content-space-between mb-3\"\n                 style=\"padding: 0.75rem 1rem; background: var(--bulma-scheme-main-bis); border-left: 3px solid var(--bulma-${normalizedColor}); border-radius: 6px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\">\n                <div class=\"is-flex is-align-items-center\" style=\"gap: 0.75rem; flex: 1; min-width: 0;\">\n                    <span style=\"display: block; width: 12px; height: 12px; background: var(--bulma-${normalizedColor}); border-radius: 50%; flex-shrink: 0;\"></span>\n                    <span style=\"font-size: 0.9rem; font-weight: 500; color: var(--bulma-text); overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\">${ctx.name}</span>\n                </div>\n                <div class=\"is-flex is-align-items-center\" style=\"gap: 0.35rem;\">\n                    <button class=\"button is-small context-action-btn context-edit-btn\"\n                            onclick=\"window.showEditContextModal('${ctx.id}')\"\n                            title=\"Edit context\"\n                            style=\"padding: 0.35rem; border: none; background: transparent; border-radius: 50%; width: 32px; height: 32px;\">\n                        <span class=\"icon is-small\">\n                            <span class=\"material-symbols-outlined\" style=\"font-size: 18px; color: var(--bulma-grey);\">edit</span>\n                        </span>\n                    </button>\n                    <button class=\"button is-small context-action-btn context-delete-btn\"\n                            onclick=\"window.showDeleteContextModal('${ctx.id}', '${ctx.name.replace(/'/g, \"\\\\'\")}')\"\n                            title=\"Delete context\"\n                            style=\"padding: 0.35rem; border: none; background: transparent; border-radius: 50%; width: 32px; height: 32px;\">\n                        <span class=\"icon is-small\">\n                            <span class=\"material-symbols-outlined\" style=\"font-size: 18px; color: var(--bulma-grey);\">delete</span>\n                        </span>\n                    </button>\n                </div>\n            </div>\n        `;\n        }).join('');\n    }\n\n\n    setupMobileNavigation(): void {\n        // Toggle sidebar (notes list)\n        this.elements.mobileNotesToggle?.addEventListener('click', () => {\n            this.toggleMobileSidebar();\n        });\n\n        // Toggle calendar\n        this.elements.mobileCalendarToggle?.addEventListener('click', () => {\n            this.toggleMobileCalendar();\n        });\n\n        // Close sidebar\n        this.elements.sidebarClose?.addEventListener('click', () => {\n            this.closeMobileSidebar();\n        });\n\n        // Close calendar\n        this.elements.calendarClose?.addEventListener('click', () => {\n            this.closeMobileCalendar();\n        });\n\n        // Close on overlay click\n        this.elements.sidebarOverlay?.addEventListener('click', () => {\n            this.closeMobileSidebar();\n        });\n\n        this.elements.calendarOverlay?.addEventListener('click', () => {\n            this.closeMobileCalendar();\n        });\n\n        // Close mobile panels when selecting a note\n        if (this.elements.notesList) {\n            this.elements.notesList.addEventListener('click', (e) => {\n                if ((e.target as HTMLElement).tagName === 'A' && window.innerWidth <= 768) {\n                    this.closeMobileSidebar();\n                }\n            });\n        }\n\n        // Clean up mobile panel states on resize\n        window.addEventListener('resize', () => {\n            if (window.innerWidth > 768) {\n                // Remove mobile panel classes and reset styles when returning to desktop\n                if (this.elements.sidebar) {\n                    this.elements.sidebar.classList.remove('mobile-panel', 'active');\n                    this.elements.sidebar.style.display = '';\n                }\n                if (this.elements.calendarPanel) {\n                    this.elements.calendarPanel.classList.remove('mobile-panel', 'active');\n                    this.elements.calendarPanel.style.display = '';\n                }\n                if (this.elements.sidebarOverlay) {\n                    this.elements.sidebarOverlay.classList.remove('active');\n                }\n                if (this.elements.calendarOverlay) {\n                    this.elements.calendarOverlay.classList.remove('active');\n                }\n                document.body.style.overflow = '';\n            }\n        });\n    }\n\n    toggleMobileSidebar(): void {\n        if (!this.elements.sidebar || !this.elements.sidebarOverlay) return;\n\n        // Only work on mobile screens\n        if (window.innerWidth > 768) return;\n\n        const isActive = this.elements.sidebar.classList.contains('mobile-panel');\n\n        if (!isActive) {\n            // Add mobile-panel class and show\n            this.elements.sidebar.classList.add('mobile-panel');\n            this.elements.sidebar.style.display = 'flex';\n        }\n\n        // Toggle active state\n        this.elements.sidebar.classList.toggle('active');\n        this.elements.sidebarOverlay.classList.toggle('active');\n\n        // Prevent body scroll when panel is open\n        if (this.elements.sidebar.classList.contains('active')) {\n            document.body.style.overflow = 'hidden';\n        } else {\n            document.body.style.overflow = '';\n        }\n    }\n\n    closeMobileSidebar(): void {\n        if (!this.elements.sidebar || !this.elements.sidebarOverlay) return;\n\n        this.elements.sidebar.classList.remove('active');\n        this.elements.sidebarOverlay.classList.remove('active');\n        document.body.style.overflow = '';\n    }\n\n    toggleMobileCalendar(): void {\n        if (!this.elements.calendarPanel || !this.elements.calendarOverlay) return;\n\n        // Only work on mobile screens\n        if (window.innerWidth > 768) return;\n\n        const isActive = this.elements.calendarPanel.classList.contains('mobile-panel');\n\n        if (!isActive) {\n            // Add mobile-panel class and show\n            this.elements.calendarPanel.classList.add('mobile-panel');\n            this.elements.calendarPanel.style.display = 'flex';\n        }\n\n        // Toggle active state\n        this.elements.calendarPanel.classList.toggle('active');\n        this.elements.calendarOverlay.classList.toggle('active');\n\n        // Prevent body scroll when panel is open\n        if (this.elements.calendarPanel.classList.contains('active')) {\n            document.body.style.overflow = 'hidden';\n        } else {\n            document.body.style.overflow = '';\n        }\n    }\n\n    closeMobileCalendar(): void {\n        if (!this.elements.calendarPanel || !this.elements.calendarOverlay) return;\n\n        this.elements.calendarPanel.classList.remove('active');\n        this.elements.calendarOverlay.classList.remove('active');\n        document.body.style.overflow = '';\n    }\n\n    updateBreadcrumb(): void {\n        const context = state.get('selectedContext');\n        const selectedDate = state.get('selectedDate');\n        const settings = state.get('userSettings');\n        const timezone = settings.timezone || 'UTC';\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n        if (this.elements.breadcrumbContextName && context) {\n            this.elements.breadcrumbContextName.textContent = context;\n        }\n\n        if (this.elements.breadcrumbDateName && selectedDate) {\n            // Format date the same way as notes list\n            const [year, month, day] = selectedDate.split('-').map(Number);\n            const dateObj = new Date(year, month - 1, day);\n\n            // Get the day name in English\n            const dayName = dateObj.toLocaleDateString('en-US', {\n                weekday: 'long',\n                timeZone: timezone\n            });\n\n            // Format date based on user preference\n            const yy = String(year).substring(2); // Get last 2 digits of year\n            const mm = String(month).padStart(2, '0');\n            const dd = String(day).padStart(2, '0');\n\n            let dateStr: string;\n            if (dateFormat === 'MM-DD-YY') {\n                dateStr = `${mm}-${dd}-${yy}`;\n            } else {\n                dateStr = `${dd}-${mm}-${yy}`;\n            }\n\n            // Format: \"Monday, 24-10-25.md\" or \"Monday, 10-24-25.md\" depending on dateFormat\n            const formattedDate = `${dayName}, ${dateStr}.md`;\n            this.elements.breadcrumbDateName.textContent = formattedDate;\n        }\n    }\n\n    openFullscreenNote(): void {\n        const context = state.get('selectedContext');\n        const selectedDate = state.get('selectedDate');\n\n        if (!context || !selectedDate) return;\n\n        // Format date for display\n        const settings = state.get('userSettings');\n        const timezone = settings.timezone || 'UTC';\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n        const [year, month, day] = selectedDate.split('-').map(Number);\n        const dateObj = new Date(year, month - 1, day);\n\n        const dayName = dateObj.toLocaleDateString('en-US', {\n            weekday: 'long',\n            timeZone: timezone\n        });\n\n        const yy = String(year).substring(2);\n        const mm = String(month).padStart(2, '0');\n        const dd = String(day).padStart(2, '0');\n\n        let dateStr: string;\n        if (dateFormat === 'MM-DD-YY') {\n            dateStr = `${mm}-${dd}-${yy}`;\n        } else {\n            dateStr = `${dd}-${mm}-${yy}`;\n        }\n\n        const formattedDate = `${dayName}, ${dateStr}.md`;\n\n        // Get modal elements\n        const modal = document.getElementById('fullscreen-note-modal');\n        const dateEl = document.getElementById('fullscreen-note-date');\n        const editorEl = document.getElementById('fullscreen-note-editor');\n\n        if (!modal || !dateEl || !editorEl) return;\n\n        // Set date\n        dateEl.textContent = formattedDate;\n\n        // Get current note content using the markdown editor\n        const content = markdownEditor.getContent();\n\n        // Create a read-only Quill instance for fullscreen\n        if ((window as any).Quill) {\n            // Clear previous instance if exists\n            editorEl.innerHTML = '';\n\n            const fullscreenQuill = new (window as any).Quill(editorEl, {\n                theme: 'snow',\n                readOnly: true,\n                modules: {\n                    toolbar: false\n                }\n            });\n\n            fullscreenQuill.root.innerHTML = content;\n\n            // Style the editor\n            fullscreenQuill.root.style.fontSize = '16px';\n            fullscreenQuill.root.style.lineHeight = '1.6';\n        } else {\n            // Fallback if Quill not loaded\n            editorEl.innerHTML = content;\n        }\n\n        // Show modal\n        modal.classList.add('is-active');\n\n        // Add escape key listener\n        const escapeHandler = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                this.closeFullscreenNote();\n                document.removeEventListener('keydown', escapeHandler);\n            }\n        };\n        document.addEventListener('keydown', escapeHandler);\n    }\n\n    closeFullscreenNote(): void {\n        const modal = document.getElementById('fullscreen-note-modal');\n        if (modal) {\n            modal.classList.remove('is-active');\n        }\n    }\n}\n\nexport const ui = new UIManager();\n\n// Expose globally for browser compatibility and HTML onclick handlers\nif (typeof window !== 'undefined') {\n    (window as any).ui = ui;\n\n    // Context modal handlers\n    (window as any).showNewContextModal = () => ui.showContextModal();\n    (window as any).closeContextModal = () => ui.closeContextModal();\n\n    (window as any).createContext = async () => {\n        const nameInput = document.getElementById('context-name') as HTMLInputElement | null;\n        const colorInput = document.getElementById('context-color') as HTMLInputElement | null;\n\n        const name = nameInput?.value.trim();\n        const color = colorInput?.value;\n\n        if (!name) return;\n\n        await contexts.createContext(name, color);\n        ui.closeContextModal();\n\n        await notes.loadNotesList(name);\n        const selectedDate = state.get('selectedDate');\n        if (selectedDate) {\n            await notes.loadNote(name, selectedDate);\n        }\n    };\n\n    // Settings modal handlers\n    (window as any).showSettingsModal = () => ui.showSettingsModal();\n    (window as any).closeSettingsModal = () => ui.closeSettingsModal();\n\n    (window as any).saveSettings = async () => {\n        const saveBtn = document.getElementById('settings-save-btn') as HTMLButtonElement | null;\n        const saveIcon = document.getElementById('settings-save-icon');\n        const saveSpinner = document.getElementById('settings-save-spinner');\n        const saveText = document.getElementById('settings-save-text');\n        const cancelBtn = document.getElementById('settings-cancel-btn') as HTMLButtonElement | null;\n\n        const weekStartSelect = document.getElementById('week-start-select') as HTMLSelectElement | null;\n        const timezoneSelect = document.getElementById('timezone-select') as HTMLSelectElement | null;\n        const dateFormatSelect = document.getElementById('date-format-select') as HTMLSelectElement | null;\n        const uniqueContextModeSwitch = document.getElementById('unique-context-mode-switch') as HTMLInputElement | null;\n        const showBreadcrumbSwitch = document.getElementById('show-breadcrumb-switch') as HTMLInputElement | null;\n        const showMarkdownEditorSwitch = document.getElementById('show-markdown-editor-switch') as HTMLInputElement | null;\n        const hideNewContextButtonSwitch = document.getElementById('hide-new-context-button-switch') as HTMLInputElement | null;\n        const currentSettings = state.get('userSettings');\n\n        const weekStart = parseInt(weekStartSelect?.value || '0');\n        const timezone = timezoneSelect?.value || 'UTC';\n        const dateFormat = dateFormatSelect?.value || 'DD-MM-YY';\n        const uniqueContextMode = uniqueContextModeSwitch?.checked || false;\n        const showBreadcrumb = showBreadcrumbSwitch?.checked === true;\n        const showMarkdownEditor = showMarkdownEditorSwitch?.checked === true;\n        const hideNewContextButton = hideNewContextButtonSwitch?.checked === true;\n        const theme = currentSettings.theme || 'dark';\n\n        // Show loading state\n        if (saveBtn) saveBtn.disabled = true;\n        if (cancelBtn) cancelBtn.disabled = true;\n        if (saveIcon) (saveIcon as HTMLElement).style.display = 'none';\n        if (saveSpinner) (saveSpinner as HTMLElement).style.display = 'inline-block';\n        if (saveText) saveText.textContent = 'Saving...';\n\n        try {\n            await api.updateSettings({ theme, weekStart, timezone, dateFormat, uniqueContextMode, showBreadcrumb, showMarkdownEditor, hideNewContextButton });\n\n            state.set('userSettings', { theme, weekStart, timezone, dateFormat, uniqueContextMode, showBreadcrumb, showMarkdownEditor, hideNewContextButton });\n            calendar.render();\n\n            // Show success state briefly\n            if (saveText) saveText.textContent = 'Saved!';\n            if (saveSpinner) (saveSpinner as HTMLElement).style.display = 'none';\n            if (saveIcon) {\n                (saveIcon as HTMLElement).style.display = 'inline-flex';\n                const iconEl = saveIcon.querySelector('.material-symbols-outlined');\n                if (iconEl) iconEl.textContent = 'check_circle';\n            }\n\n            // Wait a bit before closing to show success\n            await new Promise(resolve => setTimeout(resolve, 500));\n\n            ui.closeSettingsModal();\n\n            // Re-render notes list to update date format\n            ui.renderNotesList();\n\n            // Update UI based on unique context mode\n            ui.updateContextSelectorVisibility();\n\n            // Update breadcrumb and markdown editor visibility\n            ui.updateBreadcrumbVisibility();\n            ui.updateMarkdownEditorVisibility();\n\n            // Update new context button visibility\n            ui.updateNewContextButtonVisibility();\n\n            // If unique context mode is enabled, select first context\n            if (uniqueContextMode) {\n                const contextsList = state.get('contexts');\n                if (contextsList && contextsList.length > 0) {\n                    contexts.selectContext(contextsList[0].name);\n                    notes.setTodayDate();\n                    notes.loadNotesList(contextsList[0].name);\n                }\n            }\n        } catch (error) {\n            console.error('Failed to save settings:', error);\n            notifications.error('Failed to save settings');\n\n            // Reset button state on error\n            if (saveText) saveText.textContent = 'Save';\n            if (saveSpinner) (saveSpinner as HTMLElement).style.display = 'none';\n            if (saveIcon) {\n                (saveIcon as HTMLElement).style.display = 'inline-flex';\n                const iconEl = saveIcon.querySelector('.material-symbols-outlined');\n                if (iconEl) iconEl.textContent = 'check';\n            }\n        } finally {\n            // Re-enable buttons\n            if (saveBtn) saveBtn.disabled = false;\n            if (cancelBtn) cancelBtn.disabled = false;\n        }\n    };\n\n    // Onboarding modal handlers\n    (window as any).closeOnboardingModal = () => ui.closeOnboardingModal();\n\n    // Delete note modal handlers\n    (window as any).closeDeleteNoteModal = () => ui.closeDeleteNoteModal();\n\n    (window as any).confirmDeleteNote = async () => {\n        const modal = document.getElementById('delete-note-modal') as HTMLElement & { dataset: { context?: string; date?: string } } | null;\n        if (!modal) return;\n\n        const context = modal.dataset.context;\n        const dateStr = modal.dataset.date;\n\n        if (context && dateStr) {\n            // Close modal first\n            ui.closeDeleteNoteModal();\n\n            // Delete note immediately (notes module will handle UI updates)\n            await notes.deleteNote(context, dateStr);\n        }\n    };\n\n    // Edit context modal handlers\n    (window as any).showEditContextModal = (contextId: string) => {\n        const contextsList = state.get('contexts');\n        const context = contextsList.find(c => c.id === contextId);\n        if (!context) return;\n\n        const modal = document.getElementById('edit-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        const nameInput = document.getElementById('edit-context-name') as HTMLInputElement | null;\n        const colorValue = document.getElementById('edit-context-color-value') as HTMLInputElement | null;\n        const colorsContainer = document.getElementById('edit-context-colors');\n\n        if (!modal || !nameInput || !colorValue || !colorsContainer) return;\n\n        // Set values\n        nameInput.value = context.name;\n        const normalizedColor = normalizeToBulmaColor(context.color);\n        colorValue.value = normalizedColor;\n\n        // Render color buttons\n        const colors = ['text', 'link', 'primary', 'info', 'success', 'warning', 'danger'];\n        colorsContainer.innerHTML = colors.map(color => {\n            const isActive = normalizedColor === color;\n            const borderStyle = isActive ? 'border: 3px solid var(--bulma-text)' : 'border: 3px solid transparent';\n            return `\n                <button type=\"button\" class=\"button color-btn ${isActive ? 'is-active' : ''}\"\n                        data-color=\"${color}\"\n                        onclick=\"window.selectEditContextColor('${color}')\"\n                        title=\"${getColorLabel(color)}\"\n                        style=\"width: 32px; height: 32px; padding: 3px; ${borderStyle}; border-radius: 6px;\">\n                    <span style=\"display: block; width: 100%; height: 100%; background: var(--bulma-${color}); border-radius: 4px;\"></span>\n                </button>\n            `;\n        }).join('');\n\n        // Store context ID and show modal\n        modal.dataset.contextId = contextId;\n        modal.classList.add('is-active');\n    };\n\n    (window as any).selectEditContextColor = (color: string) => {\n        const colorValue = document.getElementById('edit-context-color-value') as HTMLInputElement | null;\n        if (!colorValue) return;\n\n        colorValue.value = color;\n\n        // Update button states\n        const buttons = document.querySelectorAll('#edit-context-colors .color-btn');\n        buttons.forEach(btn => {\n            const btnColor = (btn as HTMLElement).dataset.color;\n            if (btnColor === color) {\n                btn.classList.add('is-active');\n                (btn as HTMLElement).style.border = '3px solid var(--bulma-text)';\n            } else {\n                btn.classList.remove('is-active');\n                (btn as HTMLElement).style.border = '3px solid transparent';\n            }\n        });\n    };\n\n    (window as any).closeEditContextModal = () => {\n        const modal = document.getElementById('edit-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        if (modal) {\n            modal.classList.remove('is-active');\n            delete modal.dataset.contextId;\n        }\n    };\n\n    (window as any).confirmEditContext = async () => {\n        const modal = document.getElementById('edit-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        if (!modal) return;\n\n        const contextId = modal.dataset.contextId;\n        const nameInput = document.getElementById('edit-context-name') as HTMLInputElement | null;\n        const colorValue = document.getElementById('edit-context-color-value') as HTMLInputElement | null;\n\n        if (!contextId || !nameInput || !colorValue) return;\n\n        const name = nameInput.value.trim();\n        const color = colorValue.value;\n\n        if (!name) {\n            alert('Please enter a context name');\n            return;\n        }\n\n        // Close modal\n        (window as any).closeEditContextModal();\n\n        // Update context\n        await contexts.updateContext(contextId, name, color);\n\n        // Refresh UI\n        ui.renderContextsEditList();\n        ui.renderContextsSelect();\n    };\n\n    // Delete context modal handlers\n    (window as any).showDeleteContextModal = (contextId: string, contextName: string) => {\n        const modal = document.getElementById('delete-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        const nameElement = document.getElementById('delete-context-name');\n\n        if (modal && nameElement) {\n            nameElement.textContent = contextName;\n            modal.dataset.contextId = contextId;\n            modal.classList.add('is-active');\n        }\n    };\n\n    (window as any).closeDeleteContextModal = () => {\n        const modal = document.getElementById('delete-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        if (modal) {\n            modal.classList.remove('is-active');\n            delete modal.dataset.contextId;\n        }\n    };\n\n    (window as any).confirmDeleteContext = async () => {\n        const modal = document.getElementById('delete-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        if (!modal) return;\n\n        const contextId = modal.dataset.contextId;\n\n        if (contextId) {\n            // Close modal first\n            (window as any).closeDeleteContextModal();\n\n            // Delete context (will also delete all its notes)\n            await contexts.deleteContext(contextId);\n\n            // Refresh UI\n            ui.renderContextsEditList();\n            ui.renderContextsSelect();\n        }\n    };\n}\n","/**\n * DOM Element Caching\n */\n\nimport type { UIElements } from './types'\n\nexport function cacheElements(): UIElements {\n    return {\n        // Sections\n        authSection: document.getElementById('auth-section'),\n        appSection: document.getElementById('app-section'),\n\n        // Context\n        contextSelect: document.getElementById('context-select') as HTMLSelectElement | null,\n        contextColorIndicator: document.getElementById('context-color-indicator'),\n\n        // Mobile context\n        mobileContextSelect: document.getElementById('mobile-context-select') as HTMLSelectElement | null,\n        mobileContextColorIndicator: document.getElementById('mobile-context-color-indicator'),\n\n        // Date\n        datePicker: document.getElementById('date-picker') as HTMLInputElement | null,\n\n        // Breadcrumb\n        breadcrumbContextName: document.getElementById('breadcrumb-context-name'),\n        breadcrumbDateName: document.getElementById('breadcrumb-date-name'),\n\n        // Editor\n        markdownEditorContainer: document.getElementById('markdown-editor-container'),\n        saveIndicator: document.getElementById('save-indicator'),\n\n        // Notes list\n        notesList: document.getElementById('notes-list'),\n\n        // User\n        userEmail: document.getElementById('user-email'),\n\n        // Time\n        currentTime: document.getElementById('current-time'),\n        currentDate: document.getElementById('current-date'),\n\n        // Mobile Time\n        mobileCurrentTime: document.getElementById('mobile-current-time'),\n        mobileCurrentDate: document.getElementById('mobile-current-date'),\n\n        // Modals\n        contextModal: document.getElementById('context-modal'),\n        settingsModal: document.getElementById('settings-modal'),\n        onboardingModal: document.getElementById('onboarding-modal'),\n\n        // Sync status\n        syncStatus: document.getElementById('sync-status'),\n        syncStatusText: document.getElementById('sync-status-text'),\n\n        // Theme\n        themeToggleMenu: document.getElementById('theme-toggle-menu'),\n        themeToggleSwitch: document.getElementById('theme-toggle-switch') as HTMLInputElement | null,\n\n        // Settings\n        weekStartSelect: document.getElementById('week-start-select') as HTMLSelectElement | null,\n        timezoneSelect: document.getElementById('timezone-select') as HTMLSelectElement | null,\n\n        // Mobile navigation\n        mobileNotesToggle: document.getElementById('mobile-notes-toggle'),\n        mobileCalendarToggle: document.getElementById('mobile-calendar-toggle'),\n        sidebar: document.querySelector('.sidebar') as HTMLElement | null,\n        calendarPanel: document.querySelector('.calendar-panel') as HTMLElement | null,\n        sidebarOverlay: document.getElementById('sidebar-overlay'),\n        calendarOverlay: document.getElementById('calendar-overlay'),\n        sidebarClose: document.getElementById('sidebar-close'),\n        calendarClose: document.getElementById('calendar-close'),\n    }\n}\n","/**\n * Main Application Entry Point\n * Initializes and coordinates all modules\n */\n\nimport { state } from '@utils/state'\nimport { cache } from '@utils/cache'\nimport { events, EVENT } from '@utils/events'\nimport { SyncQueue } from '@utils/sync'\nimport { api } from '@services/api'\nimport { auth } from '@services/auth'\nimport { notes } from '@services/notes'\nimport { contexts } from '@services/contexts'\nimport { calendar } from '@components/Calendar'\nimport { markdownEditor } from '@components/Editor'\nimport { notifications } from '@components/Notifications'\nimport { ui } from '@components/UI'\n\ndeclare global {\n  interface Window {\n    __APP__?: Application\n    __GOOGLE_CLIENT_ID__?: string\n    __DEBUG__?: any\n  }\n}\n\nclass Application {\n  private syncQueue: SyncQueue | null = null\n\n  async init(googleClientId: string): Promise<void> {\n    console.log('[MAIN] Initializing with client ID:', googleClientId)\n\n    // Initialize cache\n    try {\n      await cache.init()\n      console.log('Cache initialized')\n    } catch (err) {\n      console.warn('IndexedDB not available', err)\n    }\n\n    // Initialize sync queue\n    this.syncQueue = new SyncQueue(api)\n\n    // Setup event handlers\n    this.setupEventHandlers()\n\n    // Initialize UI Manager\n    ui.init()\n\n    // Initialize Markdown Editor\n    await markdownEditor.init('markdown-editor-container', (content: string) => {\n      notes.handleNoteInput(content)\n    })\n\n    // Check authentication\n    const isAuthenticated = await auth.checkAuth()\n\n    if (isAuthenticated) {\n      await this.showApp()\n    } else {\n      // Hide app and show auth section\n      const appSection = document.getElementById('app-section')\n      const authSection = document.getElementById('auth-section')\n      if (appSection) appSection.classList.remove('visible')\n      if (authSection) authSection.classList.add('visible')\n    }\n\n    // Make body visible after determining which section to show\n    document.body.classList.add('loaded')\n\n    // Initialize Google OAuth client (async, will wait for script to load)\n    auth.initGoogleClient(googleClientId).catch(error => {\n      console.error('[MAIN] Failed to initialize Google client:', error)\n    })\n  }\n\n  private setupEventHandlers(): void {\n    // Sync events\n    events.on('sync-add' as any, (e: CustomEvent) => {\n      this.syncQueue?.add(e.detail)\n    })\n\n    events.on('sync-force' as any, () => {\n      if (this.syncQueue && this.syncQueue.getPendingCount() > 0) {\n        this.syncQueue.process()\n      }\n    })\n\n    events.on(EVENT.SYNC_STATUS, (e: CustomEvent) => {\n      ui.updateSyncStatus(e.detail)\n    })\n\n    events.on(EVENT.OPERATION_SYNCED, (e: CustomEvent) => {\n      console.log('Synced to server:', e.detail.type)\n    })\n\n    events.on(EVENT.SYNC_ERROR, (e: CustomEvent) => {\n      const { error, maxRetriesReached, retryCount, maxRetries } = e.detail\n\n      if (maxRetriesReached) {\n        notifications.error(\n          'Failed to sync note after multiple attempts. Please check your connection.',\n          {\n            title: 'Sync Failed',\n            duration: 5000\n          }\n        )\n      } else if (retryCount) {\n        console.warn(`Sync retry ${retryCount}/${maxRetries}:`, error)\n      }\n    })\n\n    // Session expired handling\n    events.on('session-expired' as any, (e: CustomEvent) => {\n      if (e.detail.isNoteRequest) {\n        notifications.warning(\n          'Session expired. Your notes are saved locally and will sync when you sign in again.',\n          {\n            title: 'Session Expired',\n            duration: 10000\n          }\n        )\n      }\n    })\n\n    // Note events\n    events.on(EVENT.NOTE_LOADED, (e: CustomEvent) => {\n      markdownEditor.setContent(e.detail.content)\n    })\n\n    events.on(EVENT.NOTE_SAVED, () => {\n      console.log('[Note] Saved')\n    })\n\n    // Context events\n    events.on(EVENT.CONTEXT_CHANGED, async (e: CustomEvent) => {\n      const context = e.detail.context\n\n      // Force flush any pending editor changes\n      markdownEditor.forceFlush()\n\n      // Wait for flush to process\n      await new Promise(resolve => setTimeout(resolve, 100))\n\n      if (context) {\n        let selectedDate = state.get('selectedDate')\n        if (!selectedDate) {\n          selectedDate = (state as any).get('today') as string\n        }\n\n        // Load notes list for context\n        await notes.loadNotesList(context)\n\n        calendar.render()\n        if (selectedDate) {\n          notes.ensureNoteInList(context, selectedDate)\n          await notes.loadNote(context, selectedDate)\n        }\n      } else {\n        markdownEditor.setContent('')\n      }\n    })\n\n    // Date events\n    events.on(EVENT.DATE_CHANGED, async (e: CustomEvent) => {\n      const dateStr = e.detail.date\n      const context = state.get('selectedContext')\n\n      // Force flush pending changes\n      markdownEditor.forceFlush()\n      await new Promise(resolve => setTimeout(resolve, 100))\n\n      if (context) {\n        const currentContext = state.get('selectedContext')\n        const currentDate = state.get('selectedDate')\n\n        if (currentContext !== context || currentDate !== dateStr) {\n          console.log('[MAIN] Context/date changed during handler, skipping')\n          return\n        }\n\n        await notes.loadNote(context, dateStr)\n      }\n    })\n\n    // Auth events\n    events.on('auth-success' as any, async () => {\n      await this.showApp()\n    })\n\n    events.on('auth-logout' as any, () => {\n      markdownEditor.setContent('')\n    })\n\n    // UI events\n    events.on(EVENT.SHOW_ERROR, (e: CustomEvent) => {\n      if (e.detail.message) {\n        notifications.error(e.detail.message)\n      }\n    })\n\n    events.on(EVENT.SHOW_SUCCESS, (e: CustomEvent) => {\n      if (e.detail.message) {\n        notifications.success(e.detail.message)\n      }\n    })\n  }\n\n  private async showApp(): Promise<void> {\n    console.log('[MAIN] showApp called')\n\n    try {\n      // Load contexts\n      console.log('[MAIN] Loading contexts...')\n      await contexts.loadContexts()\n\n      // Sync server time (MUST complete before setting today's date or showing UI)\n      await this.syncServerTime()\n\n      // Set today's date\n      notes.setTodayDate()\n\n      // Render calendar\n      calendar.render()\n\n      // Auto-select last used context\n      const lastContext = contexts.restoreLastContext()\n      console.log('[MAIN] Last context:', lastContext)\n\n      if (lastContext) {\n        // Load notes list\n        await notes.loadNotesList(lastContext)\n\n        // Get today's date\n        const todayDate = (state as any).get('today') as string\n\n        // Ensure today's note exists in the list\n        notes.ensureNoteInList(lastContext, todayDate)\n\n        // Load today's note (create if doesn't exist)\n        await notes.loadNote(lastContext, todayDate)\n      }\n\n      // Show app UI and onboarding modal if needed (clock will start here with correct time)\n      ui.showApp()\n\n      console.log('[MAIN] App initialization complete')\n    } catch (error) {\n      console.error('[MAIN] Error initializing app:', error)\n      notifications.error('Failed to initialize app. Please refresh the page.', {\n        title: 'Initialization Error',\n        duration: 0\n      })\n    }\n  }\n\n  private async syncServerTime(): Promise<void> {\n    try {\n      const settings = state.get('userSettings')\n      const timezone = settings.timezone || 'UTC'\n      const clientTime = Date.now()\n\n      const data = await api.getServerTime(timezone)\n      const serverTime = (data.timestamp || 0) * 1000 // Backend returns timestamp, not offset\n      const roundTripTime = Date.now() - clientTime\n      const offset = serverTime - clientTime + roundTripTime / 2\n\n      console.log('[MAIN] Server time synced. Offset:', offset, 'ms')\n      state.set('serverTimeOffset', offset)\n    } catch (error) {\n      console.error('Failed to sync server time:', error)\n      // Set offset to 0 as fallback\n      state.set('serverTimeOffset', 0)\n    }\n\n    // Resync every minute\n    setTimeout(() => this.syncServerTime(), 60000)\n  }\n\n}\n\n// Initialize app when DOM is ready\nconst app = new Application()\n\n// Expose for window.onload and inline scripts\nwindow.__APP__ = app\n\n// Expose modules for debugging (development only)\nif (typeof window !== 'undefined' && window.location.hostname === 'localhost') {\n  window.__DEBUG__ = {\n    app,\n    state,\n    events,\n    notes,\n    contexts,\n    calendar,\n    auth,\n    api,\n    cache,\n    markdownEditor,\n    notifications,\n    ui\n  }\n  console.log('Debug mode enabled. Access modules via window.__DEBUG__')\n}\n\n// Auto-initialize\n;(async () => {\n  // Wait for template to inject GoogleClientID\n  await new Promise(resolve => setTimeout(resolve, 0))\n\n  // Get client ID from template (will be replaced by Jet)\n  const clientIdMeta = document.querySelector('meta[name=\"google-client-id\"]')\n  const googleClientId = clientIdMeta?.getAttribute('content') || window.__GOOGLE_CLIENT_ID__\n\n  if (googleClientId) {\n    await app.init(googleClientId)\n  } else {\n    console.error('Google Client ID not found')\n  }\n})()\n\nexport default app\n"],"names":["api","request","endpoint","options","response","fetch","headers","credentials","ok","data","json","catch","status","state","get","isNoteRequest","includes","message","events","emit","EVENT","SHOW_ERROR","set","Error","error","checkAuth","console","authenticated","login","accessToken","expiresIn","this","method","body","JSON","stringify","access_token","expires_in","loginWithCode","code","logout","getContexts","createContext","updateContext","id","deleteContext","getNote","context","date","encodeURIComponent","saveNote","getNotesList","limit","offset","deleteNote","encodedContext","encodedDate","updateSettings","settings","getServerTime","timezone","auth","codeClient","initializationPromise","user","update","currentUser","userSettings","theme","weekStart","dateFormat","uniqueContextMode","showBreadcrumb","showMarkdownEditor","hideNewContextButton","initGoogleClient","clientId","Promise","resolve","reject","checkGoogleLoaded","window","google","accounts","oauth2","initCodeClient","client_id","scope","ux_mode","callback","handleAuthCodeResponse","log","setTimeout","loader","document","getElementById","classList","remove","success","hasNoContexts","signIn","add","requestCode","signOut","then","err","localStorage","clear","sessionStorage","e","location","href","reload","clearAllCaches","dbName","deleteRequest","indexedDB","deleteDatabase","onsuccess","onerror","warn","cacheNames","caches","keys","all","map","cacheName","delete","signInWithGoogle","notes","saveTimeout","currentNoteContent","currentLoadToken","currentSelectToken","loadNote","loadToken","cachedNote","cache","content","NOTE_LOADED","note","serverUpdatedAt","updated_at","Date","getTime","cachedUpdatedAt","length","now","toISOString","NOTE_SAVED","updateNoteInList","loadNotesList","notesWithDates","serverNotes","cachedNotes","getNotesByContext","noteMap","Map","forEach","has","mergedNotes","Array","from","values","sort","a","b","localeCompare","refreshNotesList","updatedNotes","ensureNoteInList","some","newNote","user_id","created_at","updatedNotesWithDates","handleNoteInput","clearTimeout","capturedContext","capturedDate","currentContext","currentDate","selectDate","dateStr","selectToken","dateParts","split","year","parseInt","month","selectedDate","currentCalendarMonth","currentCalendarYear","DATE_CHANGED","setTodayDate","Number","getCurrentNoteContent","filter","d","nextNote","contexts","loadContexts","cachedContexts","saveContexts","CONTEXTS_LOADED","navigator","onLine","name","color","newContext","updatedContexts","contextId","currentContexts","c","selectedContext","oldContext","find","setItem","SHOW_SUCCESS","selectContext","contextName","CONTEXT_CHANGED","getSelectedContext","getContextColor","restoreLastContext","firstContext","lastContext","getItem","contextExists","calendar","monthNames","dayNamesDefault","render","today","dayNames","slice","monthYearEl","textContent","adjustedFirstDay","getDay","daysInMonth","getDate","daysInPrevMonth","grid","html","day","join","i","String","padStart","classes","push","totalCells","remainingCells","innerHTML","querySelectorAll","dayEl","addEventListener","dataset","prevMonth","nextMonth","goToToday","markdownEditor","container","editor","editorElement","onChangeCallback","isUpdating","updateTimeout","contentVersion","init","containerId","onChange","ensureQuillLoaded","loadQuill","initQuill","Quill","css","createElement","rel","head","appendChild","script","src","onload","modules","toolbar","header","list","placeholder","formats","on","markdown","getMarkdown","root","getText","trim","applyToolbarVisibility","querySelector","style","display","enable","delta","getContents","currentList","listCounter","ops","op","insert","text","attrs","attributes","trimEnd","repeat","pop","line","substring","lastIndexOf","blockquote","formattedText","bold","italic","strike","link","setContent","currentVersion","disable","markdownToDelta","setContents","setText","lines","index","headerMatch","match","level","bulletMatch","parseInlineMarkdown","numberedMatch","taskMatch","quoteMatch","startsWith","regex","lastIndex","exec","getContent","setDisabled","disabled","pointerEvents","opacity","editorRoot","setPlaceholderMessage","focus","forceFlush","hasPendingChanges","notifications","queue","maxVisible","defaultDuration","constructor","className","setAttribute","show","type","title","duration","dismissible","onAction","actionLabel","Math","random","notification","element","children","warning","info","escapeHtml","closeBtn","dismiss","actionBtn","requestAnimationFrame","timeout","parentNode","removeChild","processQueue","visibleCount","next","shift","clearAll","div","normalizeToBulmaColor","ui","elements","lastKnownDate","INITIAL_RENDER_COUNT","renderedNotesCount","clockStarted","authSection","appSection","contextSelect","contextColorIndicator","mobileContextSelect","mobileContextColorIndicator","datePicker","breadcrumbContextName","breadcrumbDateName","markdownEditorContainer","saveIndicator","notesList","userEmail","currentTime","mobileCurrentTime","mobileCurrentDate","contextModal","settingsModal","onboardingModal","syncStatus","syncStatusText","themeToggleMenu","themeToggleSwitch","weekStartSelect","timezoneSelect","mobileNotesToggle","mobileCalendarToggle","sidebar","calendarPanel","sidebarOverlay","calendarOverlay","sidebarClose","calendarClose","setupEventListeners","setupStateSubscriptions","setupUserDropdown","setupMobileNavigation","editorFullscreenBtn","openFullscreenNote","editorDeleteBtn","dayName","toLocaleDateString","weekday","timeZone","yy","mm","dd","formattedDateStr","formattedDate","showDeleteNoteModal","target","value","async","preventDefault","newTheme","documentElement","getAttribute","setTheme","checked","setupKeyboardShortcuts","modKey","platform","toUpperCase","indexOf","metaKey","ctrlKey","key","deleteModal","contains","closeDeleteNoteModal","closeAllModals","userDropdown","userDropdownButton","settingsMenuItem","signoutMenuItem","stopPropagation","toggle","showSettingsModal","subscribe","renderContextsSelect","subscribeMany","renderNotesList","_context","updateBreadcrumb","newDate","updateDatePickerDisplay","updateEditorDeleteButton","updateContextIndicator","updateEditorState","email","updateContextSelectorVisibility","updateBreadcrumbVisibility","updateMarkdownEditorVisibility","updateNewContextButtonVisibility","contextsList","optionsHTML","opt","selectedIndex","normalizedColor","background","notesToRender","hasMore","min","loadMoreBtn","updateSaveIndicator","updateSyncStatus","pending","syncing","updateThemeIcon","themeIcon","showApp","_skipAnimation","getComputedStyle","startClock","hideApp","showError","msg","showSuccess","showWarning","showInfo","showContextModal","nameInput","colorInput","hiddenInputId","hiddenInput","buttons","button","newButton","cloneNode","parent","replaceChild","btn","border","borderRadius","setupColorButtons","colorButtons","selectColorButton","closeContextModal","dateFormatSelect","uniqueContextModeSwitch","showBreadcrumbSwitch","showMarkdownEditorSwitch","hideNewContextButtonSwitch","accordionContent","accordionIcon","iconElement","renderContextsEditList","saveBtn","saveIcon","saveSpinner","saveText","closeSettingsModal","closeOnboardingModal","modal","updateCurrentDateTime","setInterval","serverTimeOffset","locale","language","languages","timeOptions","hour","minute","second","hour12","dateOptions","timeString","toLocaleTimeString","dateString","displayElement","desktopContextContainer","mobileContextContainer","breadcrumb","mainSection","removeAttribute","desktopNewContextBtn","mobileNewContextBtn","ctx","_index","replace","toggleMobileSidebar","toggleMobileCalendar","closeMobileSidebar","closeMobileCalendar","tagName","innerWidth","overflow","dateEl","editorEl","fullscreenQuill","readOnly","fontSize","lineHeight","escapeHandler","closeFullscreenNote","removeEventListener","showNewContextModal","saveSettings","cancelBtn","currentSettings","iconEl","confirmDeleteNote","showEditContextModal","colorValue","colorsContainer","isActive","borderStyle","primary","danger","getColorLabel","selectEditContextColor","closeEditContextModal","confirmEditContext","alert","showDeleteContextModal","nameElement","closeDeleteContextModal","confirmDeleteContext","app","syncQueue","googleClientId","SyncQueue","setupEventHandlers","detail","getPendingCount","process","SYNC_STATUS","OPERATION_SYNCED","SYNC_ERROR","maxRetriesReached","retryCount","maxRetries","syncServerTime","todayDate","clientTime","serverTime","timestamp","__APP__","hostname","__DEBUG__","clientIdMeta","__GOOGLE_CLIENT_ID__"],"mappings":"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"}