{"version":3,"file":"main-legacy-C3j0E62H.js","sources":["../../../src/services/api.ts","../../../src/services/auth.ts","../../../src/services/notes.ts","../../../src/services/contexts.ts","../../../src/components/Calendar.ts","../../../src/components/Editor.ts","../../../src/components/Notifications.ts","../../../src/components/ui/colors.ts","../../../src/components/UI.ts","../../../src/components/ui/elements.ts","../../../src/main.ts"],"sourcesContent":["/**\n * API Client Module\n * Handles all backend communication\n */\n\nimport { state } from '@/utils/state'\nimport { events, EVENT } from '@/utils/events'\nimport type { User, Context, Note, UserSettings } from '@/types'\n\ninterface AuthResponse {\n  authenticated: boolean\n  user?: User\n}\n\ninterface LoginResponse {\n  success: boolean\n  user?: User\n  error?: string\n}\n\ninterface NoteResponse {\n  note: Note\n}\n\ninterface NotesListResponse {\n  notes: Note[]\n  total?: number\n}\n\ninterface ContextsResponse {\n  contexts: Context[]\n}\n\ninterface ServerTimeResponse {\n  timestamp: number  // Unix timestamp in seconds\n  timezone: string\n  iso: string\n}\n\nexport class APIClient {\n  // Base URL is empty string since we use relative paths\n  // private baseUrl = ''\n\n  async request<T = any>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    try {\n      const response = await fetch(endpoint, {\n        ...options,\n        headers: {\n          ...options.headers,\n          'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n      })\n\n      if (!response.ok) {\n        const data = await response.json().catch(() => ({})) as { error?: string }\n\n        if (response.status === 401 || response.status === 403) {\n          if (!state.get('isLoggingOut')) {\n            // Check if this is a note-related request\n            const isNoteRequest = endpoint.includes('/api/notes')\n            const message = isNoteRequest\n              ? 'Session expired. Your notes are saved locally and will sync when you sign in again.'\n              : 'Session expired. Please login again.'\n\n            events.emit(EVENT.SHOW_ERROR, { message })\n            events.emit('session-expired' as any, { isNoteRequest })\n          }\n          state.set('currentUser', null)\n          throw new Error('Session expired')\n        }\n\n        throw new Error(data.error || `Request failed with status ${response.status}`)\n      }\n\n      return await response.json()\n    } catch (error) {\n      if (!state.get('isLoggingOut')) {\n        // Don't show error notification if it's already been handled\n        if (error instanceof Error && !error.message.includes('Session expired')) {\n          events.emit(EVENT.SHOW_ERROR, {\n            message: error.message || 'An error occurred'\n          })\n        }\n      }\n      throw error\n    }\n  }\n\n  // Auth endpoints\n  async checkAuth(): Promise<AuthResponse> {\n    try {\n      const response = await fetch('/api/auth/me')\n      const data = await response.json()\n      return data\n    } catch (error) {\n      console.error('Auth check failed:', error)\n      return { authenticated: false }\n    }\n  }\n\n  async login(accessToken: string, expiresIn?: number): Promise<LoginResponse> {\n    return await this.request<LoginResponse>('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        access_token: accessToken,\n        expires_in: expiresIn || 3600\n      })\n    })\n  }\n\n  async loginWithCode(code: string): Promise<LoginResponse> {\n    return await this.request<LoginResponse>('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ code })\n    })\n  }\n\n  async logout(): Promise<void> {\n    await this.request('/api/auth/logout', {\n      method: 'POST'\n    })\n  }\n\n  // Contexts endpoints\n  async getContexts(): Promise<ContextsResponse> {\n    return await this.request<ContextsResponse>('/api/contexts')\n  }\n\n  async createContext(data: { name: string; color?: string }): Promise<Context> {\n    return await this.request<Context>('/api/contexts', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async updateContext(id: string, data: { name?: string; color?: string }): Promise<Context> {\n    return await this.request<Context>(`/api/contexts/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async deleteContext(id: string): Promise<void> {\n    await this.request(`/api/contexts/${id}`, {\n      method: 'DELETE'\n    })\n  }\n\n  // Notes endpoints\n  async getNote(context: string, date: string): Promise<NoteResponse> {\n    return await this.request<NoteResponse>(\n      `/api/notes?context=${encodeURIComponent(context)}&date=${date}`\n    )\n  }\n\n  async saveNote(data: { context: string; date: string; content: string; updated_at?: string }): Promise<Note> {\n    return await this.request<Note>('/api/notes', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async getNotesList(context: string, limit = 50, offset = 0): Promise<NotesListResponse> {\n    return await this.request<NotesListResponse>(\n      `/api/notes/list?context=${encodeURIComponent(context)}&limit=${limit}&offset=${offset}`\n    )\n  }\n\n  async deleteNote(context: string, date: string): Promise<void> {\n    const encodedContext = encodeURIComponent(context)\n    const encodedDate = encodeURIComponent(date)\n\n    await this.request(`/api/notes/${encodedContext}/${encodedDate}`, {\n      method: 'DELETE'\n    })\n  }\n\n  // Settings endpoints\n  async updateSettings(settings: Partial<UserSettings>): Promise<UserSettings> {\n    return await this.request<UserSettings>('/api/settings', {\n      method: 'PUT',\n      body: JSON.stringify(settings)\n    })\n  }\n\n  // Time sync\n  async getServerTime(timezone: string): Promise<ServerTimeResponse> {\n    const response = await fetch(`/api/time?timezone=${encodeURIComponent(timezone)}`)\n    return await response.json()\n  }\n}\n\nexport const api = new APIClient()\n","/**\n * Authentication Module\n * Handles Google OAuth and session management\n */\n\nimport { state } from '@/utils/state'\nimport { api } from './api'\nimport { events, EVENT } from '@/utils/events'\n\n// Google OAuth types\ndeclare global {\n  interface Window {\n    google?: {\n      accounts: {\n        oauth2: {\n          initCodeClient: (config: {\n            client_id: string\n            scope: string\n            ux_mode: string\n            callback: (response: { code?: string; error?: string }) => void\n          }) => {\n            requestCode: () => void\n          }\n        }\n      }\n    }\n  }\n}\n\ninterface CodeClient {\n  requestCode: () => void\n}\n\ninterface AuthCodeResponse {\n  code?: string\n  error?: string\n}\n\nclass AuthManager {\n  private codeClient: CodeClient | null = null\n  private initializationPromise: Promise<void> | null = null\n\n  async checkAuth(): Promise<boolean> {\n    const data = await api.checkAuth()\n\n    if (data.authenticated && data.user) {\n      state.update({\n        currentUser: data.user,\n        userSettings: data.user.settings || {\n          theme: 'dark',\n          weekStart: 0,\n          timezone: 'UTC',\n          dateFormat: 'DD-MM-YY',\n          uniqueContextMode: false,\n          showBreadcrumb: false,\n          showMarkdownEditor: false,\n          hideNewContextButton: false\n        }\n      })\n      return true\n    }\n\n    return false\n  }\n\n  async initGoogleClient(clientId: string): Promise<void> {\n    // Return existing initialization promise if already in progress\n    if (this.initializationPromise) {\n      return this.initializationPromise\n    }\n\n    // Return immediately if already initialized\n    if (this.codeClient) {\n      return Promise.resolve()\n    }\n\n    // Create initialization promise\n    this.initializationPromise = new Promise((resolve, reject) => {\n      // Wait for Google API to be loaded\n      const checkGoogleLoaded = () => {\n        if (window.google?.accounts?.oauth2) {\n          try {\n            // Use initCodeClient to get authorization code (which provides refresh token)\n            this.codeClient = window.google.accounts.oauth2.initCodeClient({\n              client_id: clientId,\n              scope: 'https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/userinfo.email',\n              ux_mode: 'popup',\n              callback: (response) => this.handleAuthCodeResponse(response)\n            })\n            console.log('[AUTH] Google code client initialized successfully')\n            resolve()\n          } catch (error) {\n            console.error('[AUTH] Failed to initialize Google client:', error)\n            reject(error)\n          }\n        } else {\n          // Retry after a short delay\n          setTimeout(checkGoogleLoaded, 100)\n        }\n      }\n\n      // Start checking\n      checkGoogleLoaded()\n\n      // Set a timeout to prevent infinite waiting\n      setTimeout(() => {\n        if (!this.codeClient) {\n          reject(new Error('Google API failed to load within timeout'))\n        }\n      }, 10000) // 10 second timeout\n    })\n\n    return this.initializationPromise\n  }\n\n  async handleAuthCodeResponse(response: AuthCodeResponse): Promise<void> {\n    const loader = document.getElementById('landing-loader')\n\n    if (response.error) {\n      if (loader) loader.classList.remove('visible')\n      events.emit(EVENT.SHOW_ERROR, {\n        message: 'OAuth failed: ' + response.error\n      })\n      return\n    }\n\n    if (!response.code) {\n      if (loader) loader.classList.remove('visible')\n      events.emit(EVENT.SHOW_ERROR, {\n        message: 'OAuth failed: No code received'\n      })\n      return\n    }\n\n    try {\n      // Send authorization code to backend to exchange for tokens\n      const data = await api.loginWithCode(response.code)\n\n      if (data.success && data.user) {\n        console.log('[AUTH] Login successful, updating state')\n        console.log('[AUTH] Received hasNoContexts:', (data.user as any).hasNoContexts)\n\n        state.update({\n          currentUser: data.user,\n          hasNoContexts: (data.user as any).hasNoContexts || false,\n          userSettings: data.user.settings || {\n            theme: 'dark',\n            weekStart: 0,\n            timezone: 'UTC',\n            dateFormat: 'DD-MM-YY',\n            uniqueContextMode: false,\n            showBreadcrumb: false,\n            showMarkdownEditor: false,\n            hideNewContextButton: false\n          }\n        })\n\n        console.log('[AUTH] Emitting auth-success event')\n        // Emit event for UI to react (loader will be hidden by showApp)\n        events.emit('auth-success' as any, {})\n      } else {\n        if (loader) loader.classList.remove('visible')\n        events.emit(EVENT.SHOW_ERROR, {\n          message: data.error || 'Login failed'\n        })\n      }\n    } catch (error) {\n      if (loader) loader.classList.remove('visible')\n      const message = error instanceof Error ? error.message : 'Unknown error'\n      events.emit(EVENT.SHOW_ERROR, {\n        message: 'Login failed: ' + message\n      })\n    }\n  }\n\n  async signIn(): Promise<void> {\n    // Show loading indicator immediately\n    const loader = document.getElementById('landing-loader')\n    if (loader) loader.classList.add('visible')\n\n    try {\n      // Wait for initialization to complete if not already done\n      await this.initializationPromise\n\n      if (!this.codeClient) {\n        throw new Error('Google client not initialized')\n      }\n\n      // Request authorization code (will trigger popup)\n      this.codeClient.requestCode()\n    } catch (error) {\n      console.error('[AUTH] Sign in failed:', error)\n      if (loader) loader.classList.remove('visible')\n      events.emit(EVENT.SHOW_ERROR, {\n        message: 'Failed to initialize Google sign-in. Please refresh the page.'\n      })\n    }\n  }\n\n  signOut(): void {\n    console.log('[AUTH] Starting logout...')\n\n    // Clear all client-side storage synchronously\n    try {\n      localStorage.clear()\n      sessionStorage.clear()\n      console.log('[AUTH] Client storage cleared')\n    } catch (e) {\n      console.error('[AUTH] Storage clear error:', e)\n    }\n\n    // Navigate to logout endpoint - server will handle session cleanup and redirect\n    console.log('[AUTH] Navigating to logout endpoint...')\n    window.location.href = '/api/auth/logout'\n  }\n\n  async clearAllCaches(): Promise<void> {\n    try {\n      // Clear IndexedDB\n      const dbName = 'DailyNotesDB'\n      const deleteRequest = indexedDB.deleteDatabase(dbName)\n\n      await new Promise<void>((resolve) => {\n        deleteRequest.onsuccess = () => {\n          console.log('[AUTH] IndexedDB cleared')\n          resolve()\n        }\n        deleteRequest.onerror = () => {\n          console.warn('[AUTH] Failed to clear IndexedDB')\n          resolve() // Continue even if this fails\n        }\n      })\n\n      // Clear all Service Worker caches\n      if ('caches' in window) {\n        const cacheNames = await caches.keys()\n        await Promise.all(\n          cacheNames.map(cacheName => {\n            console.log('[AUTH] Deleting cache:', cacheName)\n            return caches.delete(cacheName)\n          })\n        )\n        console.log('[AUTH] All Service Worker caches cleared')\n      }\n\n      // Unregister all service workers\n      if ('serviceWorker' in navigator) {\n        const registrations = await navigator.serviceWorker.getRegistrations()\n        await Promise.all(\n          registrations.map(registration => {\n            console.log('[AUTH] Unregistering service worker')\n            return registration.unregister()\n          })\n        )\n        console.log('[AUTH] All service workers unregistered')\n      }\n\n      // Clear cookies\n      document.cookie.split(';').forEach(cookie => {\n        const eqPos = cookie.indexOf('=')\n        const name = eqPos > -1 ? cookie.substring(0, eqPos).trim() : cookie.trim()\n        // Set cookie to expire in the past\n        document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`\n        document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;domain=${window.location.hostname}`\n      })\n      console.log('[AUTH] Cookies cleared')\n\n      // Clear localStorage and sessionStorage\n      localStorage.clear()\n      sessionStorage.clear()\n      console.log('[AUTH] Storage cleared')\n    } catch (error) {\n      console.error('[AUTH] Error clearing caches:', error)\n      // Don't throw - we still want to complete logout\n    }\n  }\n}\n\nexport const auth = new AuthManager()\n\n// Expose auth functions globally for onclick handlers in HTML\nif (typeof window !== 'undefined') {\n  (window as any).signInWithGoogle = () => auth.signIn()\n}\n","/**\n * Notes Module\n * Handles note loading, saving, and listing\n */\n\nimport { state } from '@/utils/state'\nimport { api } from './api'\nimport { cache } from '@/utils/cache'\nimport { events, EVENT } from '@/utils/events'\nimport type { Note } from '@/types'\n\nclass NotesManager {\n  private saveTimeout: number | null = null\n  private currentNoteContent = ''\n  private currentLoadToken = 0 // Token to cancel old load operations\n  private currentSelectToken = 0 // Token to cancel old date selection operations\n\n  async loadNote(context: string, date: string): Promise<Note | null> {\n    if (!context || !date) {\n      return null\n    }\n\n    // Increment token to cancel any previous load operations\n    const loadToken = ++this.currentLoadToken\n    console.log(`[Notes] loadNote started - token: ${loadToken}, context: ${context}, date: ${date}`)\n\n    // Try local cache first (instant load)\n    const cachedNote = await cache.getNote(context, date)\n\n    // Validate token before emitting cached content\n    if (loadToken !== this.currentLoadToken) {\n      console.log(`[Notes] Load cancelled (cache) - token ${loadToken} is stale`)\n      return null\n    }\n\n    if (cachedNote && cachedNote.content) {\n      // Only emit if cache has actual content\n      this.currentNoteContent = cachedNote.content\n      events.emit(EVENT.NOTE_LOADED, {\n        context,\n        date,\n        content: this.currentNoteContent\n      })\n    } else {\n      // No cached note or empty content - show blank editor immediately\n      this.currentNoteContent = ''\n      events.emit(EVENT.NOTE_LOADED, {\n        context,\n        date,\n        content: ''\n      })\n    }\n\n    // Then load from server in background\n    try {\n      const { note } = await api.getNote(context, date)\n\n      // Validate token before applying server data\n      if (loadToken !== this.currentLoadToken) {\n        console.log(`[Notes] Load cancelled (server) - token ${loadToken} is stale`)\n        return null\n      }\n\n      // Determine which version is more recent\n      const serverUpdatedAt = note.updated_at ? new Date(note.updated_at).getTime() : 0\n      const cachedUpdatedAt = cachedNote?.updated_at ? new Date(cachedNote.updated_at).getTime() : 0\n\n      // Only update if server has newer content OR cache is empty\n      const shouldUpdateFromServer =\n        !cachedNote ||\n        serverUpdatedAt > cachedUpdatedAt ||\n        (note.content && !cachedNote.content)\n\n      if (shouldUpdateFromServer) {\n        this.currentNoteContent = note.content || ''\n\n        // Update cache with server data\n        await cache.saveNote({\n          ...note,\n          context,\n          date,\n          content: note.content,\n          updated_at: note.updated_at\n        })\n\n        // Only emit if content actually changed\n        if (!cachedNote || cachedNote.content !== note.content) {\n          events.emit(EVENT.NOTE_LOADED, {\n            context,\n            date,\n            content: this.currentNoteContent\n          })\n        }\n      } else {\n        console.log('[Notes] Cache is newer than server, keeping cached version')\n      }\n\n      return note\n    } catch (error) {\n      // Validate token before handling error\n      if (loadToken !== this.currentLoadToken) {\n        console.log(`[Notes] Load cancelled (error) - token ${loadToken} is stale`)\n        return null\n      }\n\n      // If cached version exists, user already sees it\n      if (!cachedNote) {\n        console.error('Failed to load note:', error)\n        events.emit(EVENT.SHOW_ERROR, {\n          message: 'Failed to load note. Working offline.'\n        })\n      } else {\n        console.warn('[Notes] Server unavailable, using cached version')\n      }\n      return cachedNote\n    }\n  }\n\n  async saveNote(context: string, date: string, content: string): Promise<void> {\n    if (!context || !date) return\n\n    console.log(`[Notes] saveNote called - context: ${context}, date: ${date}, content length: ${content.length}`)\n\n    const now = new Date().toISOString()\n    const note = {\n      context,\n      date,\n      content,\n      updated_at: now\n    }\n\n    // 1. Save to local cache immediately (optimistic)\n    await cache.saveNote(note as Note)\n    this.currentNoteContent = content\n\n    console.log(`[Notes] Saved to cache and updated currentNoteContent`)\n\n    events.emit(EVENT.NOTE_SAVED, { context, date, content })\n\n    // 2. Update note in the list (update content, keep position)\n    this.updateNoteInList(context, date, content)\n\n    // 3. Sync to server immediately (backend will handle Drive sync)\n    console.log(`[Notes] Syncing to server - content length: ${content.length}`)\n    try {\n      await api.saveNote({ context, date, content, updated_at: now })\n      console.log(`[Notes] Successfully synced to server`)\n    } catch (error) {\n      console.error('[Notes] Failed to sync to server:', error)\n      // Note is still saved locally in cache, will retry on next app load\n    }\n  }\n\n  async loadNotesList(context: string, limit = 50, offset = 0): Promise<Note[]> {\n    if (!context) {\n      state.update({\n        notes: [],\n        notesWithDates: []\n      })\n      return []\n    }\n\n    try {\n      const data = await api.getNotesList(context, limit, offset)\n      const serverNotes = data.notes || []\n\n      // Get cached notes from IndexedDB for this context\n      const cachedNotes = await cache.getNotesByContext(context)\n\n      // Merge: prioritize server notes, but include cached notes not on server\n      const noteMap = new Map<string, Note>()\n\n      // Add all server notes first (authoritative)\n      serverNotes.forEach(note => {\n        noteMap.set(note.date, note)\n      })\n\n      // Add cached notes that don't exist on server (local-only or pending sync)\n      cachedNotes.forEach(note => {\n        if (!noteMap.has(note.date)) {\n          noteMap.set(note.date, note)\n        }\n      })\n\n      // Convert back to array and sort by date (newest first)\n      const mergedNotes = Array.from(noteMap.values()).sort((a, b) => {\n        return b.date.localeCompare(a.date)\n      })\n\n      const notesWithDates = mergedNotes.map(note => note.date)\n\n      state.update({\n        notes: mergedNotes,\n        notesWithDates\n      })\n\n      return mergedNotes\n    } catch (error) {\n      console.error('Failed to load notes list:', error)\n      return []\n    }\n  }\n\n  async refreshNotesList(context: string): Promise<void> {\n    await this.loadNotesList(context)\n  }\n\n  updateNoteInList(context: string, date: string, content: string): void {\n    const notes = state.get('notes')\n\n    // Find and update the note\n    const updatedNotes = notes.map(note => {\n      if (note.date === date && note.context === context) {\n        return {\n          ...note,\n          content: content,\n          updated_at: new Date().toISOString()\n        }\n      }\n      return note\n    })\n\n    // Update state\n    state.set('notes', updatedNotes)\n  }\n\n  ensureNoteInList(context: string, date: string): void {\n    const notes = state.get('notes')\n    const notesWithDates = state.get('notesWithDates')\n\n    // Check if note already exists in the list\n    const noteExists = notes.some(note => note.date === date)\n\n    if (!noteExists) {\n      // Create a placeholder note in the list\n      const newNote: Note = {\n        id: `temp-${context}-${date}`,\n        user_id: state.get('currentUser')?.id || '',\n        context: context,\n        date: date,\n        content: '',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }\n\n      // Add to notes list and sort by date (newest first)\n      const updatedNotes = [...notes, newNote].sort((a, b) => {\n        return b.date.localeCompare(a.date)\n      })\n\n      // Add to dates list\n      const updatedNotesWithDates = [...notesWithDates, date]\n\n      // Update state\n      state.update({\n        notes: updatedNotes,\n        notesWithDates: updatedNotesWithDates\n      })\n    }\n  }\n\n  handleNoteInput(content: string): void {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout)\n    }\n\n    // Update current content IMMEDIATELY to track user input\n    this.currentNoteContent = content\n\n    // Capture current context and date at the time of input\n    const capturedContext = state.get('selectedContext')\n    const capturedDate = state.get('selectedDate')\n\n    if (!capturedContext || !capturedDate) return\n\n    // Debounce save - reduced from 1000ms to 500ms for better UX\n    this.saveTimeout = window.setTimeout(() => {\n      // Re-validate that context and date haven't changed\n      const currentContext = state.get('selectedContext')\n      const currentDate = state.get('selectedDate')\n\n      // Only save if context/date haven't changed\n      // We don't check content anymore because currentNoteContent is updated immediately\n      if (currentContext === capturedContext && currentDate === capturedDate) {\n        console.log(`[Notes] Saving note - context: ${capturedContext}, date: ${capturedDate}`)\n        // Use the LATEST content from currentNoteContent, not the captured one\n        this.saveNote(capturedContext, capturedDate, this.currentNoteContent)\n      } else {\n        console.log(\n          `[Notes] Save cancelled - context/date changed from ${capturedContext}/${capturedDate} to ${currentContext}/${currentDate}`\n        )\n      }\n    }, 500)\n  }\n\n  async selectDate(dateStr: string): Promise<void> {\n    // Increment token to cancel any previous select operations\n    const selectToken = ++this.currentSelectToken\n    console.log(`[Notes] selectDate started - token: ${selectToken}, date: ${dateStr}`)\n\n    const context = state.get('selectedContext')\n\n    // Parse the date\n    const dateParts = dateStr.split('-')\n    const year = parseInt(dateParts[0])\n    const month = parseInt(dateParts[1]) - 1\n\n    // Update calendar month to show the selected date\n    state.update({\n      selectedDate: dateStr,\n      currentCalendarMonth: month,\n      currentCalendarYear: year\n    })\n\n    // Validate token before proceeding\n    if (selectToken !== this.currentSelectToken) {\n      console.log(`[Notes] selectDate cancelled - token ${selectToken} is stale`)\n      return\n    }\n\n    events.emit(EVENT.DATE_CHANGED, { date: dateStr })\n\n    // Load note for this date\n    if (context) {\n      // Validate token again before loading\n      if (selectToken !== this.currentSelectToken) {\n        console.log(`[Notes] selectDate cancelled before load - token ${selectToken} is stale`)\n        return\n      }\n\n      // Create note in local list immediately if it doesn't exist\n      this.ensureNoteInList(context, dateStr)\n      await this.loadNote(context, dateStr)\n    }\n  }\n\n  setTodayDate(): void {\n    const dateStr = (state as any).get('today') as string\n    const [year, month] = dateStr.split('-').map(Number)\n\n    state.update({\n      selectedDate: dateStr,\n      currentCalendarMonth: month - 1,\n      currentCalendarYear: year\n    })\n  }\n\n  getCurrentNoteContent(): string {\n    return this.currentNoteContent\n  }\n\n  async deleteNote(context: string, date: string): Promise<void> {\n    if (!context || !date) return\n\n    console.log(`[Notes] Deleting note - context: ${context}, date: ${date}`)\n\n    // Cancel any pending save operations for this note\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout)\n      this.saveTimeout = null\n      console.log('[Notes] Cancelled pending save operation')\n    }\n\n    // 1. Remove from local cache immediately (optimistic)\n    await cache.deleteNote(context, date)\n\n    // 2. Remove from the notes list in state\n    const notes = state.get('notes')\n    const updatedNotes = notes.filter(note => !(note.date === date && note.context === context))\n\n    const notesWithDates = state.get('notesWithDates')\n    const updatedNotesWithDates = notesWithDates.filter(d => d !== date)\n\n    state.update({\n      notes: updatedNotes,\n      notesWithDates: updatedNotesWithDates\n    })\n\n    // 3. If the deleted note was currently selected, clear the editor and select another note\n    const selectedDate = state.get('selectedDate')\n    if (selectedDate === date) {\n      // Clear current note content IMMEDIATELY to prevent race conditions\n      this.currentNoteContent = ''\n\n      // Select the most recent note or today\n      if (updatedNotes.length > 0) {\n        // Select the first note (most recent)\n        const nextNote = updatedNotes[0]\n        await this.selectDate(nextNote.date)\n      } else {\n        // No notes left, select today and clear editor\n        this.setTodayDate()\n        events.emit(EVENT.NOTE_LOADED, {\n          context,\n          date,\n          content: ''\n        })\n      }\n    }\n\n    // 4. Sync deletion to server immediately (backend will handle Drive sync)\n    try {\n      await api.deleteNote(context, date)\n      console.log('[Notes] Note deleted from server')\n    } catch (error) {\n      console.error('[Notes] Failed to delete note from server:', error)\n      // Note is still deleted locally, server will sync on next app load\n    }\n\n    console.log('[Notes] Note deleted locally and synced')\n  }\n}\n\nexport const notes = new NotesManager()\n","/**\n * Contexts Module\n * Handles context (project) management\n */\n\nimport { state } from '@/utils/state'\nimport { api } from './api'\nimport { cache } from '@/utils/cache'\nimport { events, EVENT } from '@/utils/events'\nimport type { Context } from '@/types'\n\nclass ContextsManager {\n  async loadContexts(): Promise<void> {\n    // Try local cache first (instant)\n    const cachedContexts = await cache.getContexts()\n    console.log('[CONTEXTS] Cached contexts:', cachedContexts)\n    if (cachedContexts.length > 0) {\n      state.set('contexts', cachedContexts)\n    }\n\n    // Load from server in background\n    try {\n      console.log('[CONTEXTS] Fetching contexts from server...')\n      const response = await api.getContexts()\n      console.log('[CONTEXTS] Server response:', response)\n      // Handle null/undefined contexts gracefully\n      const contexts = response?.contexts || []\n      console.log('[CONTEXTS] Parsed contexts:', contexts)\n      await cache.saveContexts(contexts)\n      state.set('contexts', contexts)\n      events.emit(EVENT.CONTEXTS_LOADED, { contexts })\n    } catch (error) {\n      console.error('[CONTEXTS] Failed to load contexts from server:', error)\n      // Only show error if we have no contexts at all AND it's a real network error\n      if (cachedContexts.length === 0 && !navigator.onLine) {\n        events.emit(EVENT.SHOW_ERROR, {\n          message: 'Failed to load contexts. Working offline.'\n        })\n      }\n      // If online but failed, don't show error - user might just have 0 contexts\n    }\n  }\n\n  async createContext(name: string, color?: string): Promise<Context> {\n    const newContext: Context = {\n      id: `temp-${Date.now()}`,\n      user_id: state.get('currentUser')?.id || '',\n      name,\n      color: color || 'primary',\n      created_at: new Date().toISOString()\n    }\n\n    // 1. Update UI immediately (optimistic)\n    const currentContexts = state.get('contexts')\n    const updatedContexts = [...currentContexts, newContext]\n\n    await cache.saveContexts(updatedContexts)\n    state.set('contexts', updatedContexts)\n    state.set('selectedContext', name)\n\n    // 2. Sync to server immediately\n    try {\n      await api.createContext({ name, color })\n      console.log('[CONTEXTS] Successfully synced new context to server')\n      // Reload contexts to get server-assigned ID\n      await this.loadContexts()\n    } catch (error) {\n      console.error('[CONTEXTS] Failed to sync context to server:', error)\n      // Context is still saved locally, will retry on next app load\n    }\n\n    return newContext\n  }\n\n  async updateContext(contextId: string, name: string, color: string): Promise<boolean> {\n    try {\n      await api.updateContext(contextId, { name, color })\n\n      // Update local state\n      const currentContexts = state.get('contexts')\n      const updatedContexts = currentContexts.map(c => (c.id === contextId ? { ...c, name, color } : c))\n\n      await cache.saveContexts(updatedContexts)\n      state.set('contexts', updatedContexts)\n\n      // Update selected context if it was the one being edited\n      const selectedContext = state.get('selectedContext')\n      const oldContext = currentContexts.find(c => c.id === contextId)\n      if (selectedContext === oldContext?.name) {\n        state.set('selectedContext', name)\n        localStorage.setItem('lastContext', name)\n      }\n\n      events.emit(EVENT.SHOW_SUCCESS, { message: 'Context updated successfully' })\n      return true\n    } catch (error) {\n      events.emit(EVENT.SHOW_ERROR, { message: 'Failed to update context' })\n      return false\n    }\n  }\n\n  async deleteContext(contextId: string): Promise<void> {\n    try {\n      await api.deleteContext(contextId)\n\n      const currentContexts = state.get('contexts')\n      const updatedContexts = currentContexts.filter(c => c.id !== contextId)\n\n      await cache.saveContexts(updatedContexts)\n      state.set('contexts', updatedContexts)\n\n      events.emit(EVENT.SHOW_SUCCESS, { message: 'Context deleted successfully' })\n    } catch (error) {\n      events.emit(EVENT.SHOW_ERROR, { message: 'Failed to delete context' })\n    }\n  }\n\n  selectContext(contextName: string | null): void {\n    state.set('selectedContext', contextName)\n    events.emit(EVENT.CONTEXT_CHANGED, { context: contextName })\n\n    // Save last used context to localStorage\n    if (contextName) {\n      localStorage.setItem('lastContext', contextName)\n    }\n  }\n\n  getSelectedContext(): string | null {\n    return state.get('selectedContext')\n  }\n\n  getContextColor(contextName: string): string {\n    const contexts = state.get('contexts')\n    const context = contexts.find(c => c.name === contextName)\n    // Normalize old hex colors\n    const color = context?.color || 'primary'\n    const bulmaColors = ['text', 'link', 'primary', 'info', 'success', 'warning', 'danger']\n    return bulmaColors.includes(color) ? color : 'primary'\n  }\n\n  restoreLastContext(): string | null {\n    const contexts = state.get('contexts')\n    const settings = state.get('userSettings')\n    const uniqueContextMode = settings.uniqueContextMode || false\n\n    console.log('[CONTEXTS] restoreLastContext - contexts:', contexts)\n    console.log('[CONTEXTS] uniqueContextMode:', uniqueContextMode)\n\n    // If no contexts available, return null\n    if (!contexts || contexts.length === 0) {\n      console.log('[CONTEXTS] No contexts available')\n      return null\n    }\n\n    // If unique context mode is enabled, always select first context\n    if (uniqueContextMode) {\n      const firstContext = contexts[0].name\n      console.log('[CONTEXTS] Unique context mode - selecting first context:', firstContext)\n      this.selectContext(firstContext)\n      return firstContext\n    }\n\n    const lastContext = localStorage.getItem('lastContext')\n    console.log('[CONTEXTS] lastContext from localStorage:', lastContext)\n\n    // Try to restore last used context\n    if (lastContext) {\n      const contextExists = contexts.some(c => c.name === lastContext)\n      console.log('[CONTEXTS] lastContext exists?', contextExists)\n      if (contextExists) {\n        console.log('[CONTEXTS] Selecting last context:', lastContext)\n        this.selectContext(lastContext)\n        return lastContext\n      }\n    }\n\n    // If no last context or it doesn't exist, select first context\n    const firstContext = contexts[0].name\n    console.log('[CONTEXTS] Selecting first context:', firstContext)\n    this.selectContext(firstContext)\n    return firstContext\n  }\n}\n\nexport const contexts = new ContextsManager()\n","/**\n * Calendar Module\n * Handles calendar rendering and navigation\n */\n\nimport { state } from '@/utils/state'\nimport { notes } from '@/services/notes'\n\nclass Calendar {\n  private monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ]\n  private dayNamesDefault = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n\n  render(): void {\n    const settings = state.get('userSettings')\n    const weekStart = settings.weekStart || 0\n    const month = state.get('currentCalendarMonth')\n    const year = state.get('currentCalendarYear')\n    const selectedDate = state.get('selectedDate')\n    const today = (state as any).get('today') as string\n    const notesWithDates = state.get('notesWithDates')\n\n    const dayNames = [\n      ...this.dayNamesDefault.slice(weekStart),\n      ...this.dayNamesDefault.slice(0, weekStart)\n    ]\n\n    const monthYearEl = document.getElementById('calendar-month-year')\n    if (monthYearEl) {\n      monthYearEl.textContent = `${this.monthNames[month]} ${year}`\n    }\n\n    const firstDayOfMonth = new Date(year, month, 1).getDay()\n    const adjustedFirstDay = (firstDayOfMonth - weekStart + 7) % 7\n    const daysInMonth = new Date(year, month + 1, 0).getDate()\n    const daysInPrevMonth = new Date(year, month, 0).getDate()\n\n    const grid = document.getElementById('calendar-grid')\n    if (!grid) return\n\n    // Render day headers\n    let html = dayNames.map(day => `<div class=\"calendar-day-header\">${day}</div>`).join('')\n\n    // Render previous month's trailing days\n    for (let i = adjustedFirstDay - 1; i >= 0; i--) {\n      const day = daysInPrevMonth - i\n      html += `<div class=\"calendar-day other-month\">${day}</div>`\n    }\n\n    // Render current month's days\n    for (let day = 1; day <= daysInMonth; day++) {\n      const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`\n      const classes = ['calendar-day']\n\n      if (dateStr === today) classes.push('today')\n      if (dateStr === selectedDate) classes.push('selected')\n      if (notesWithDates.includes(dateStr)) classes.push('has-note')\n\n      html += `<div class=\"${classes.join(' ')}\" data-date=\"${dateStr}\">${day}</div>`\n    }\n\n    // Render next month's leading days\n    const totalCells = adjustedFirstDay + daysInMonth\n    const remainingCells = totalCells % 7 === 0 ? 0 : 7 - (totalCells % 7)\n    for (let day = 1; day <= remainingCells; day++) {\n      html += `<div class=\"calendar-day other-month\">${day}</div>`\n    }\n\n    grid.innerHTML = html\n\n    // Add click handlers\n    grid.querySelectorAll('.calendar-day:not(.other-month)').forEach(dayEl => {\n      dayEl.addEventListener('click', () => {\n        const dateStr = (dayEl as HTMLElement).dataset.date\n        if (dateStr) {\n          notes.selectDate(dateStr)\n        }\n      })\n    })\n  }\n\n  prevMonth(): void {\n    let month = state.get('currentCalendarMonth')\n    let year = state.get('currentCalendarYear')\n\n    month--\n    if (month < 0) {\n      month = 11\n      year--\n    }\n\n    state.update({\n      currentCalendarMonth: month,\n      currentCalendarYear: year\n    })\n\n    this.render()\n  }\n\n  nextMonth(): void {\n    let month = state.get('currentCalendarMonth')\n    let year = state.get('currentCalendarYear')\n\n    month++\n    if (month > 11) {\n      month = 0\n      year++\n    }\n\n    state.update({\n      currentCalendarMonth: month,\n      currentCalendarYear: year\n    })\n\n    this.render()\n  }\n\n  goToToday(): void {\n    const today = (state as any).get('today') as string\n    notes.selectDate(today)\n  }\n}\n\nexport const calendar = new Calendar()\n","/**\n * Markdown Editor Module\n * Modern WYSIWYG markdown editor using Quill\n */\n\nimport { state } from '@/utils/state'\n\n// Quill types\ndeclare global {\n  interface Window {\n    Quill?: any\n  }\n}\n\ninterface QuillDelta {\n  ops: QuillOp[]\n}\n\ninterface QuillOp {\n  insert: string | object\n  attributes?: Record<string, any>\n}\n\nclass MarkdownEditor {\n  private container: HTMLElement | null = null\n  private editor: any = null\n  private editorElement: HTMLElement | null = null\n  private onChangeCallback: ((content: string) => void) | null = null\n  private isUpdating = false\n  private currentNoteContent = ''\n  private updateTimeout: number | null = null\n  private contentVersion = 0 // Track version to ignore stale events\n\n  async init(containerId: string, onChange: (content: string) => void): Promise<void> {\n    this.container = document.getElementById(containerId)\n    if (!this.container) {\n      console.error('[MarkdownEditor] Container not found:', containerId)\n      return\n    }\n\n    this.onChangeCallback = onChange\n\n    // Don't load Quill yet - wait until actually needed (lazy loading)\n    // This saves ~300KB on initial page load\n    this.container.innerHTML =\n      '<div style=\"padding: 1rem; color: var(--bulma-text-light); opacity: 0.6;\">Editor loading...</div>'\n  }\n\n  async ensureQuillLoaded(): Promise<void> {\n    // Only load Quill when first needed\n    if (!this.editor) {\n      await this.loadQuill()\n      this.render()\n      this.initQuill()\n    }\n  }\n\n  private async loadQuill(): Promise<void> {\n    if (window.Quill) return\n\n    // Load Quill CSS locally\n    const css = document.createElement('link')\n    css.rel = 'stylesheet'\n    css.href = '/static/vendor/quill/quill.snow.css'\n    document.head.appendChild(css)\n\n    // Load Quill JS locally\n    const script = document.createElement('script')\n    script.src = '/static/vendor/quill/quill.min.js'\n    document.head.appendChild(script)\n\n    // Wait for Quill to load\n    await new Promise<void>(resolve => {\n      script.onload = () => resolve()\n    })\n  }\n\n  private render(): void {\n    if (!this.container) return\n\n    this.container.innerHTML = `\n      <div class=\"quill-editor-wrapper\">\n        <div id=\"quill-editor\"></div>\n      </div>\n    `\n\n    this.editorElement = document.getElementById('quill-editor')\n  }\n\n  private initQuill(): void {\n    if (!window.Quill) {\n      console.error('[MarkdownEditor] Quill not loaded')\n      return\n    }\n\n    try {\n      this.editor = new window.Quill(this.editorElement, {\n        theme: 'snow',\n        modules: {\n          toolbar: [\n            [{ header: [1, 2, 3, false] }],\n            ['bold', 'italic'],\n            [{ list: 'bullet' }],\n            ['blockquote', 'code-block'],\n            ['link']\n          ]\n        },\n        placeholder: 'Start writing your notes...',\n        formats: ['bold', 'italic', 'header', 'list', 'code-block', 'blockquote', 'link']\n      })\n\n      // Listen for text changes\n      this.editor.on('text-change', () => {\n        if (this.isUpdating) return\n\n        if (this.onChangeCallback) {\n          const markdown = this.getMarkdown()\n          this.onChangeCallback(markdown)\n        }\n      })\n\n      // Force placeholder to hide on focus when editor is empty\n      this.editor.root.addEventListener('focus', () => {\n        if (this.editor.getText().trim() === '') {\n          this.editor.root.dataset.placeholder = ''\n        }\n      })\n\n      // Restore placeholder on blur if editor is still empty\n      this.editor.root.addEventListener('blur', () => {\n        if (this.editor.getText().trim() === '') {\n          this.editor.root.dataset.placeholder = 'Start writing your notes...'\n        }\n      })\n\n      // Apply toolbar visibility based on user settings after initialization\n      this.applyToolbarVisibility()\n    } catch (error) {\n      console.error('[MarkdownEditor] Error initializing editor:', error)\n    }\n  }\n\n  private applyToolbarVisibility(): void {\n    const settings = state.get('userSettings')\n    const showMarkdownEditor = settings.showMarkdownEditor === true\n\n    const toolbar = this.container?.querySelector('.ql-toolbar') as HTMLElement\n    if (toolbar) {\n      toolbar.style.display = showMarkdownEditor ? '' : 'none'\n    }\n\n    // Editor enabled state should be based on context selection only\n    // Toolbar visibility is separate from editor interactivity\n    if (this.editor) {\n      const context = state.get('selectedContext')\n      this.editor.enable(context ? true : false)\n    }\n  }\n\n  private getMarkdown(): string {\n    if (!this.editor) return ''\n\n    const delta = this.editor.getContents()\n    let markdown = ''\n    let currentList: string | null = null\n    let listCounter = 0\n\n    delta.ops.forEach((op: QuillOp) => {\n      if (!op.insert) return\n\n      const text = typeof op.insert === 'string' ? op.insert : ''\n      const attrs = op.attributes || {}\n\n      // Handle newlines with formatting\n      if (text === '\\n') {\n        // Check for headers\n        if (attrs.header) {\n          markdown = markdown.trimEnd()\n          markdown = '#'.repeat(attrs.header) + ' ' + markdown.split('\\n').pop()\n          markdown += '\\n\\n'\n        }\n        // Check for lists\n        else if (attrs.list) {\n          if (attrs.list !== currentList) {\n            currentList = attrs.list\n            listCounter = 1\n          }\n          const line = markdown.split('\\n').pop()!\n          markdown = markdown.substring(0, markdown.lastIndexOf('\\n') + 1)\n\n          if (attrs.list === 'ordered') {\n            markdown += `${listCounter++}. ${line}\\n`\n          } else if (attrs.list === 'bullet') {\n            markdown += `- ${line}\\n`\n          } else if (attrs.list === 'check') {\n            markdown += `- [ ] ${line}\\n`\n          }\n        } else {\n          currentList = null\n          listCounter = 0\n          if (attrs.blockquote) {\n            const line = markdown.split('\\n').pop()!\n            markdown = markdown.substring(0, markdown.lastIndexOf('\\n') + 1)\n            markdown += `> ${line}\\n`\n          } else if (attrs['code-block']) {\n            markdown += '\\n```\\n'\n          } else {\n            markdown += '\\n'\n          }\n        }\n      } else {\n        let formattedText = text\n\n        // Apply inline formatting\n        if (attrs.bold) {\n          formattedText = `**${formattedText}**`\n        }\n        if (attrs.italic) {\n          formattedText = `*${formattedText}*`\n        }\n        if (attrs.strike) {\n          formattedText = `~~${formattedText}~~`\n        }\n        if (attrs.code) {\n          formattedText = `\\`${formattedText}\\``\n        }\n        if (attrs.link) {\n          formattedText = `[${formattedText}](${attrs.link})`\n        }\n\n        markdown += formattedText\n      }\n    })\n\n    return markdown.trim()\n  }\n\n  async setContent(content: string): Promise<void> {\n    // Lazy load Quill when content is set\n    await this.ensureQuillLoaded()\n\n    if (!this.editor) return\n\n    // Increment version to invalidate any pending events from previous setContent calls\n    this.contentVersion++\n    const currentVersion = this.contentVersion\n    console.log('[Editor] setContent called - version:', currentVersion, 'content length:', content.length)\n\n    // Clear any pending update timeout\n    if (this.updateTimeout) {\n      clearTimeout(this.updateTimeout)\n      this.updateTimeout = null\n    }\n\n    // CRITICAL: Disable the editor completely to prevent ANY text-change events\n    // This is more robust than just setting a flag\n    this.editor.disable()\n    this.isUpdating = true\n\n    try {\n      if (!content) {\n        this.editor.setText('')\n        this.currentNoteContent = ''\n      } else {\n        // Convert markdown to Quill Delta\n        const delta = this.markdownToDelta(content)\n        this.editor.setContents(delta)\n\n        // Track the current content for comparison\n        this.currentNoteContent = content\n      }\n    } finally {\n      // Re-enable editor after a delay to ensure all Quill internal events complete\n      this.updateTimeout = window.setTimeout(() => {\n        console.log('[Editor] Unlocking editor - version:', currentVersion)\n        this.isUpdating = false\n        this.updateTimeout = null\n\n        // Only re-enable if we have a context\n        const context = state.get('selectedContext')\n        if (context && this.editor) {\n          this.editor.enable(true)\n        }\n      }, 600)\n    }\n  }\n\n  private markdownToDelta(markdown: string): QuillDelta {\n    const ops: QuillOp[] = []\n    const lines = markdown.split('\\n')\n\n    lines.forEach((line, index) => {\n      // Headers\n      const headerMatch = line.match(/^(#{1,3})\\s+(.+)$/)\n      if (headerMatch) {\n        const level = headerMatch[1].length\n        ops.push({ insert: headerMatch[2] })\n        ops.push({ insert: '\\n', attributes: { header: level } })\n        return\n      }\n\n      // Bullet list\n      const bulletMatch = line.match(/^-\\s+(.+)$/)\n      if (bulletMatch) {\n        const text = this.parseInlineMarkdown(bulletMatch[1])\n        ops.push(...text)\n        ops.push({ insert: '\\n', attributes: { list: 'bullet' } })\n        return\n      }\n\n      // Numbered list\n      const numberedMatch = line.match(/^\\d+\\.\\s+(.+)$/)\n      if (numberedMatch) {\n        const text = this.parseInlineMarkdown(numberedMatch[1])\n        ops.push(...text)\n        ops.push({ insert: '\\n', attributes: { list: 'ordered' } })\n        return\n      }\n\n      // Task list\n      const taskMatch = line.match(/^-\\s+\\[([ x])\\]\\s+(.+)$/)\n      if (taskMatch) {\n        const text = this.parseInlineMarkdown(taskMatch[2])\n        ops.push(...text)\n        ops.push({ insert: '\\n', attributes: { list: 'check' } })\n        return\n      }\n\n      // Blockquote\n      const quoteMatch = line.match(/^>\\s+(.+)$/)\n      if (quoteMatch) {\n        const text = this.parseInlineMarkdown(quoteMatch[1])\n        ops.push(...text)\n        ops.push({ insert: '\\n', attributes: { blockquote: true } })\n        return\n      }\n\n      // Code block\n      if (line.startsWith('```')) {\n        ops.push({ insert: '\\n', attributes: { 'code-block': true } })\n        return\n      }\n\n      // Regular text with inline formatting\n      if (line.trim()) {\n        const text = this.parseInlineMarkdown(line)\n        ops.push(...text)\n      }\n\n      // Add newline if not last line\n      if (index < lines.length - 1) {\n        ops.push({ insert: '\\n' })\n      }\n    })\n\n    return { ops }\n  }\n\n  private parseInlineMarkdown(text: string): QuillOp[] {\n    const ops: QuillOp[] = []\n\n    // Parse inline formatting: bold, italic, strike, code, links\n    const regex = /(\\*\\*([^*]+)\\*\\*)|(\\*([^*]+)\\*)|(~~([^~]+)~~)|(`([^`]+)`)|(\\[([^\\]]+)\\]\\(([^)]+)\\))/g\n    let lastIndex = 0\n    let match: RegExpExecArray | null\n\n    while ((match = regex.exec(text)) !== null) {\n      // Add text before match\n      if (match.index > lastIndex) {\n        ops.push({ insert: text.substring(lastIndex, match.index) })\n      }\n\n      // Bold\n      if (match[1]) {\n        ops.push({ insert: match[2], attributes: { bold: true } })\n      }\n      // Italic\n      else if (match[3]) {\n        ops.push({ insert: match[4], attributes: { italic: true } })\n      }\n      // Strike\n      else if (match[5]) {\n        ops.push({ insert: match[6], attributes: { strike: true } })\n      }\n      // Code\n      else if (match[7]) {\n        ops.push({ insert: match[8], attributes: { code: true } })\n      }\n      // Link\n      else if (match[9]) {\n        ops.push({ insert: match[10], attributes: { link: match[11] } })\n      }\n\n      lastIndex = regex.lastIndex\n    }\n\n    // Add remaining text\n    if (lastIndex < text.length) {\n      ops.push({ insert: text.substring(lastIndex) })\n    }\n\n    return ops.length > 0 ? ops : [{ insert: text }]\n  }\n\n  getContent(): string {\n    return this.getMarkdown()\n  }\n\n  async setDisabled(disabled: boolean): Promise<void> {\n    // Only load editor if we're enabling it\n    if (!disabled) {\n      await this.ensureQuillLoaded()\n    }\n\n    if (!this.editor) return\n    this.editor.enable(!disabled)\n\n    const toolbar = this.container?.querySelector('.ql-toolbar') as HTMLElement\n    if (toolbar) {\n      toolbar.style.pointerEvents = disabled ? 'none' : 'auto'\n      toolbar.style.opacity = disabled ? '0.5' : '1'\n    }\n\n    // Update placeholder based on disabled state\n    const editorRoot = this.editor.root\n    if (editorRoot && disabled) {\n      editorRoot.dataset.placeholder = 'Select a context to start writing...'\n    } else if (editorRoot) {\n      editorRoot.dataset.placeholder = 'Start writing your notes...'\n    }\n  }\n\n  setPlaceholderMessage(message: string): void {\n    // Ensure Quill is loaded first\n    this.ensureQuillLoaded().then(() => {\n      if (!this.editor) return\n\n      const editorRoot = this.editor.root\n      if (editorRoot) {\n        editorRoot.dataset.placeholder = message\n      }\n    })\n  }\n\n  focus(): void {\n    if (this.editor) {\n      this.editor.focus()\n    }\n  }\n\n  /**\n   * Force flush any pending changes immediately\n   * Used before context/date changes to prevent data loss\n   */\n  forceFlush(): void {\n    if (!this.editor || this.isUpdating) return\n\n    const markdown = this.getMarkdown()\n\n    // Clear any pending debounced save\n    if (this.onChangeCallback) {\n      this.onChangeCallback(markdown)\n    }\n  }\n\n  /**\n   * Check if there are pending changes\n   */\n  hasPendingChanges(): boolean {\n    // If there's no editor, no pending changes\n    if (!this.editor) return false\n\n    const currentContent = this.getMarkdown()\n    return currentContent !== this.currentNoteContent\n  }\n}\n\nexport const markdownEditor = new MarkdownEditor()\n","/**\n * Professional Notification System\n * Handles toast notifications with queuing, stacking, and animations\n */\n\ninterface NotificationOptions {\n  type?: 'success' | 'error' | 'warning' | 'info'\n  title?: string\n  message: string\n  duration?: number\n  dismissible?: boolean\n  onAction?: () => void\n  actionLabel?: string\n}\n\ninterface Notification extends NotificationOptions {\n  id: string\n  element: HTMLElement | null\n  timeout?: number\n}\n\nclass NotificationManager {\n  private container: HTMLElement\n  private notifications = new Map<string, Notification>()\n  private queue: Notification[] = []\n  private readonly maxVisible = 3\n  private readonly defaultDuration = 5000\n\n  constructor() {\n    this.container = this.init()\n  }\n\n  private init(): HTMLElement {\n    // Create notification container\n    const container = document.createElement('div')\n    container.id = 'notification-container'\n    container.className = 'notification-container'\n    container.setAttribute('role', 'region')\n    container.setAttribute('aria-label', 'Notifications')\n    document.body.appendChild(container)\n    return container\n  }\n\n  /**\n   * Show a notification\n   */\n  show(options: NotificationOptions): string {\n    const {\n      type = 'info',\n      title,\n      message,\n      duration = this.defaultDuration,\n      dismissible = true,\n      onAction,\n      actionLabel = 'Action'\n    } = options\n\n    const id = `notification-${Date.now()}-${Math.random()}`\n\n    const notification: Notification = {\n      id,\n      type,\n      title,\n      message,\n      duration,\n      dismissible,\n      onAction,\n      actionLabel,\n      element: null\n    }\n\n    // Add to queue if at max capacity\n    const visibleCount = this.container.children.length\n    if (visibleCount >= this.maxVisible) {\n      this.queue.push(notification)\n      return id\n    }\n\n    this.render(notification)\n    return id\n  }\n\n  private render(notification: Notification): void {\n    const { id, type, title, message, duration, dismissible, onAction, actionLabel } = notification\n\n    // Create notification element\n    const element = document.createElement('div')\n    element.className = `notification-toast notification-${type}`\n    element.setAttribute('role', 'alert')\n    element.setAttribute('aria-live', type === 'error' ? 'assertive' : 'polite')\n    element.dataset.id = id\n\n    // Icon mapping\n    const icons = {\n      success: 'check_circle',\n      error: 'error',\n      warning: 'warning',\n      info: 'info'\n    }\n\n    // Build HTML\n    element.innerHTML = `\n      <div class=\"notification-icon\">\n        <span class=\"material-symbols-outlined\">${icons[type!]}</span>\n      </div>\n      <div class=\"notification-content\">\n        ${title ? `<div class=\"notification-title\">${this.escapeHtml(title)}</div>` : ''}\n        <div class=\"notification-message\">${this.escapeHtml(message)}</div>\n      </div>\n      ${\n        onAction\n          ? `\n        <button class=\"notification-action\" aria-label=\"${actionLabel}\">\n          ${actionLabel}\n        </button>\n      `\n          : ''\n      }\n      ${\n        dismissible\n          ? `\n        <button class=\"notification-close\" aria-label=\"Close notification\">\n          <span class=\"material-symbols-outlined\">close</span>\n        </button>\n      `\n          : ''\n      }\n    `\n\n    // Add event listeners\n    if (dismissible) {\n      const closeBtn = element.querySelector('.notification-close')\n      closeBtn?.addEventListener('click', () => this.dismiss(id))\n    }\n\n    if (onAction) {\n      const actionBtn = element.querySelector('.notification-action')\n      actionBtn?.addEventListener('click', () => {\n        onAction()\n        this.dismiss(id)\n      })\n    }\n\n    // Add to DOM with animation\n    this.container.appendChild(element)\n    notification.element = element\n    this.notifications.set(id, notification)\n\n    // Trigger animation\n    requestAnimationFrame(() => {\n      element.classList.add('notification-visible')\n    })\n\n    // Auto-dismiss after duration\n    if (duration && duration > 0) {\n      notification.timeout = window.setTimeout(() => {\n        this.dismiss(id)\n      }, duration)\n    }\n  }\n\n  dismiss(id: string): void {\n    const notification = this.notifications.get(id)\n    if (!notification) return\n\n    const { element, timeout } = notification\n\n    // Clear timeout\n    if (timeout) {\n      clearTimeout(timeout)\n    }\n\n    // Animate out\n    element?.classList.remove('notification-visible')\n    element?.classList.add('notification-hiding')\n\n    // Remove from DOM after animation\n    setTimeout(() => {\n      if (element?.parentNode) {\n        element.parentNode.removeChild(element)\n      }\n      this.notifications.delete(id)\n\n      // Show next queued notification\n      this.processQueue()\n    }, 300)\n  }\n\n  private processQueue(): void {\n    const visibleCount = this.container.children.length\n    if (this.queue.length > 0 && visibleCount < this.maxVisible) {\n      const next = this.queue.shift()\n      if (next) {\n        this.render(next)\n      }\n    }\n  }\n\n  // Convenience methods\n  success(message: string, options: Partial<NotificationOptions> = {}): string {\n    return this.show({ type: 'success', message, title: 'Success', ...options })\n  }\n\n  error(message: string, options: Partial<NotificationOptions> = {}): string {\n    return this.show({\n      type: 'error',\n      message,\n      title: 'Error',\n      duration: 7000, // Longer for errors\n      ...options\n    })\n  }\n\n  warning(message: string, options: Partial<NotificationOptions> = {}): string {\n    return this.show({ type: 'warning', message, title: 'Warning', ...options })\n  }\n\n  info(message: string, options: Partial<NotificationOptions> = {}): string {\n    return this.show({ type: 'info', message, ...options })\n  }\n\n  // Clear all notifications\n  clearAll(): void {\n    this.notifications.forEach(notification => {\n      this.dismiss(notification.id)\n    })\n    this.queue = []\n  }\n\n  // Utility: Escape HTML\n  private escapeHtml(text: string): string {\n    const div = document.createElement('div')\n    div.textContent = text\n    return div.innerHTML\n  }\n}\n\n// Create singleton instance\nexport const notifications = new NotificationManager()\n","/**\n * Color Utilities\n */\n\nexport function getColorLabel(color: string): string {\n    const labels: { [key: string]: string } = {\n        'text': 'Text (Gray)',\n        'link': 'Link (Blue)',\n        'primary': 'Primary (Cyan)',\n        'info': 'Info (Light Blue)',\n        'success': 'Success (Green)',\n        'warning': 'Warning (Yellow)',\n        'danger': 'Danger (Red)'\n    }\n    return labels[color] || color\n}\n\nexport function normalizeToBulmaColor(color: string): string {\n    // If it's already a Bulma color name, return it\n    const bulmaColors = ['text', 'link', 'primary', 'info', 'success', 'warning', 'danger']\n    if (bulmaColors.includes(color)) {\n        return color\n    }\n\n    // Map old hex colors to closest Bulma color\n    const hexToColor: { [key: string]: string } = {\n        '#485fc7': 'primary',\n        '#3e8ed0': 'info',\n        '#48c78e': 'success',\n        '#ffe08a': 'warning',\n        '#f14668': 'danger'\n    }\n\n    return hexToColor[color] || 'primary'\n}\n\nexport function setupColorButtons(hiddenInputId: string, containerId: string): void {\n    const hiddenInput = document.getElementById(hiddenInputId) as HTMLInputElement | null\n\n    // Get fresh button references each time\n    const buttons = document.querySelectorAll(`#${containerId} .color-btn`)\n    if (!buttons.length) return\n\n    buttons.forEach(button => {\n        // Remove old listeners by cloning\n        const newButton = button.cloneNode(true) as Element\n        const parent = button.parentNode\n        if (parent) {\n            parent.replaceChild(newButton, button)\n        }\n    })\n\n    // Get fresh references after cloning\n    const colorButtons = document.querySelectorAll(`#${containerId} .color-btn`)\n\n    colorButtons.forEach(button => {\n        button.addEventListener('click', (e) => {\n            e.preventDefault()\n            const color = (button as HTMLElement).dataset.color\n\n            // Update hidden input\n            if (hiddenInput && color) hiddenInput.value = color\n\n            // Update active state - get fresh references again\n            const allButtons = document.querySelectorAll(`#${containerId} .color-btn`)\n            allButtons.forEach(btn => {\n                const element = btn as HTMLElement\n                element.classList.remove('is-active')\n                element.style.border = '3px solid transparent'\n                element.style.borderRadius = '8px'\n            })\n\n            const element = button as HTMLElement\n            element.classList.add('is-active')\n            element.style.border = '3px solid var(--bulma-text)'\n            element.style.borderRadius = '8px'\n        })\n    })\n}\n\nexport function selectColorButton(color: string, containerId: string, hiddenInputId: string): void {\n    const colorButtons = document.querySelectorAll(`#${containerId} .color-btn`)\n    const hiddenInput = document.getElementById(hiddenInputId) as HTMLInputElement | null\n\n    if (hiddenInput) hiddenInput.value = color\n\n    colorButtons.forEach(btn => {\n        const element = btn as HTMLElement\n        element.classList.remove('is-active')\n        element.style.border = '3px solid transparent'\n        element.style.borderRadius = '8px'\n\n        if (element.dataset.color === color) {\n            element.classList.add('is-active')\n            element.style.border = `3px solid var(--bulma-text)`\n            element.style.borderRadius = '8px'\n        }\n    })\n}\n","/**\n * UI Module\n * Handles all UI rendering and user interactions\n */\n\nimport { state } from '@/utils/state'\nimport { contexts } from '@/services/contexts'\nimport { calendar } from '@/components/Calendar'\nimport { notes } from '@/services/notes'\nimport { events } from '@/utils/events'\nimport { api } from '@/services/api'\nimport { notifications } from '@/components/Notifications'\nimport { markdownEditor } from '@/components/Editor'\nimport { auth } from '@/services/auth'\nimport { cacheElements } from './ui/elements'\nimport { normalizeToBulmaColor, getColorLabel, setupColorButtons, selectColorButton } from './ui/colors'\nimport type { UIElements, SyncStatusOptions, NotificationOptions } from './ui/types'\n\nexport class UIManager {\n    elements: UIElements;\n    lastKnownDate: string | null;\n    INITIAL_RENDER_COUNT: number;\n    renderedNotesCount: number;\n    clockStarted: boolean;\n\n    constructor() {\n        this.elements = {} as UIElements;\n        this.lastKnownDate = null;\n        // Virtual scrolling optimization\n        this.INITIAL_RENDER_COUNT = 50; // Only render first 50 notes initially\n        this.renderedNotesCount = this.INITIAL_RENDER_COUNT;\n        this.clockStarted = false;\n    }\n\n    init(): void {\n        this.elements = cacheElements()\n        this.setupEventListeners()\n        this.setupStateSubscriptions()\n        this.setupUserDropdown()\n        this.setupMobileNavigation()\n        // Clock will start after server time sync in showApp()\n    }\n\n    setupEventListeners(): void {\n        // Editor fullscreen button\n        const editorFullscreenBtn = document.getElementById('editor-fullscreen-btn');\n        if (editorFullscreenBtn) {\n            editorFullscreenBtn.addEventListener('click', () => {\n                this.openFullscreenNote();\n            });\n        }\n\n        // Editor delete button\n        const editorDeleteBtn = document.getElementById('editor-delete-note-btn');\n        if (editorDeleteBtn) {\n            editorDeleteBtn.addEventListener('click', () => {\n                const context = state.get('selectedContext');\n                const dateStr = state.get('selectedDate');\n\n                if (context && dateStr) {\n                    // Get formatted date for display\n                    const settings = state.get('userSettings');\n                    const timezone = settings.timezone || 'UTC';\n                    const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n                    const [year, month, day] = dateStr.split('-').map(Number);\n                    const dateObj = new Date(year, month - 1, day);\n\n                    // Get the day name\n                    const dayName = dateObj.toLocaleDateString('en-US', {\n                        weekday: 'long',\n                        timeZone: timezone\n                    });\n\n                    // Format date\n                    const yy = String(year).substring(2);\n                    const mm = String(month).padStart(2, '0');\n                    const dd = String(day).padStart(2, '0');\n\n                    let formattedDateStr: string;\n                    if (dateFormat === 'MM-DD-YY') {\n                        formattedDateStr = `${mm}-${dd}-${yy}`;\n                    } else {\n                        formattedDateStr = `${dd}-${mm}-${yy}`;\n                    }\n\n                    const formattedDate = `${dayName}, ${formattedDateStr}`;\n\n                    // Show modal\n                    this.showDeleteNoteModal(context, dateStr, formattedDate);\n                }\n            });\n        }\n\n        // Context selection (desktop)\n        // Just update state - the CONTEXT_CHANGED event handler will do the rest\n        this.elements.contextSelect?.addEventListener('change', (e) => {\n            const context = (e.target as HTMLSelectElement).value;\n            console.log('[UI] Desktop context selector changed:', context);\n            contexts.selectContext(context);\n        });\n\n        // Context selection (mobile)\n        // Just update state - the CONTEXT_CHANGED event handler will do the rest\n        this.elements.mobileContextSelect?.addEventListener('change', (e) => {\n            const context = (e.target as HTMLSelectElement).value;\n            console.log('[UI] Mobile context selector changed:', context);\n            contexts.selectContext(context);\n        });\n\n        // Date picker\n        this.elements.datePicker?.addEventListener('change', async (e) => {\n            const dateStr = (e.target as HTMLInputElement).value;\n            // Check if this date is already selected\n            const currentDate = state.get('selectedDate');\n            if (currentDate === dateStr) {\n                console.log('[UI] Date picker: date already selected, skipping:', dateStr);\n                return;\n            }\n            await notes.selectDate(dateStr);\n        });\n\n        // Calendar navigation\n        document.getElementById('prev-month')?.addEventListener('click', () => {\n            calendar.prevMonth();\n        });\n\n        document.getElementById('next-month')?.addEventListener('click', () => {\n            calendar.nextMonth();\n        });\n\n        // Theme toggle\n        this.elements.themeToggleMenu?.addEventListener('click', async (e) => {\n            e.preventDefault();\n            const currentTheme = document.documentElement.getAttribute('data-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n            this.setTheme(newTheme);\n\n            const settings = state.get('userSettings');\n            state.set('userSettings', { ...settings, theme: newTheme });\n\n            try {\n                await api.updateSettings({ ...settings, theme: newTheme });\n            } catch (err) {\n                console.error('Failed to save theme:', err);\n            }\n        });\n\n        this.elements.themeToggleSwitch?.addEventListener('change', (e) => {\n            this.setTheme((e.target as HTMLInputElement).checked ? 'dark' : 'light');\n        });\n\n        // Keyboard shortcuts\n        this.setupKeyboardShortcuts();\n    }\n\n    setupKeyboardShortcuts(): void {\n        document.addEventListener('keydown', (e) => {\n            const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n            const modKey = isMac ? e.metaKey : e.ctrlKey;\n\n            // Cmd/Ctrl+K: Focus context selector\n            if (modKey && e.key === 'k') {\n                e.preventDefault();\n                this.elements.contextSelect?.focus();\n                return;\n            }\n\n            // Cmd/Ctrl+S: Force sync\n            if (modKey && e.key === 's') {\n                e.preventDefault();\n                events.emit('sync-force' as any, undefined);\n                return;\n            }\n\n            // Cmd/Ctrl+/: Focus editor (handled by markdown editor)\n            if (modKey && e.key === '/') {\n                e.preventDefault();\n                return;\n            }\n\n            // Escape: Close modals\n            if (e.key === 'Escape') {\n                // Check if delete modal is open (highest priority)\n                const deleteModal = document.getElementById('delete-note-modal');\n                if (deleteModal?.classList.contains('is-active')) {\n                    this.closeDeleteNoteModal();\n                    return;\n                }\n\n                this.closeAllModals();\n                return;\n            }\n        });\n    }\n\n    setupUserDropdown(): void {\n        const userDropdown = document.getElementById('user-dropdown');\n        const userDropdownButton = document.getElementById('user-dropdown-button');\n        const settingsMenuItem = document.getElementById('settings-menu-item');\n        const signoutMenuItem = document.getElementById('signout-menu-item');\n\n        if (!userDropdown || !userDropdownButton) return;\n\n        // Toggle dropdown\n        userDropdownButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            userDropdown.classList.toggle('is-active');\n        });\n\n        // Settings click\n        settingsMenuItem?.addEventListener('click', (e) => {\n            e.preventDefault();\n            userDropdown.classList.remove('is-active');\n            this.showSettingsModal();\n        });\n\n        // Sign out click\n        signoutMenuItem?.addEventListener('click', (e) => {\n            e.preventDefault();\n            userDropdown.classList.remove('is-active');\n            auth.signOut();\n        });\n\n        // Close when clicking outside\n        document.addEventListener('click', (e) => {\n            if (!userDropdown.contains(e.target as Node)) {\n                userDropdown.classList.remove('is-active');\n            }\n        });\n\n        // Close on escape\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape' && userDropdown.classList.contains('is-active')) {\n                userDropdown.classList.remove('is-active');\n            }\n        });\n    }\n\n    setupStateSubscriptions(): void {\n        // Re-render UI when contexts change\n        state.subscribe('contexts', () => {\n            this.renderContextsSelect();\n        });\n\n        // Update calendar when month/year changes\n        state.subscribeMany(['currentCalendarMonth', 'currentCalendarYear'], () => {\n            calendar.render();\n        });\n\n        // Update UI when notes list changes\n        state.subscribe('notes', () => {\n            this.renderNotesList();\n            calendar.render();\n        });\n\n        // Update breadcrumb when context changes\n        state.subscribe('selectedContext', (_context) => {\n            this.updateBreadcrumb();\n            // Reset virtual scrolling when switching contexts\n            this.renderedNotesCount = this.INITIAL_RENDER_COUNT;\n        });\n\n        // Update date picker when selected date changes\n        state.subscribe('selectedDate', (newDate) => {\n            if (this.elements.datePicker && newDate) {\n                this.elements.datePicker.value = newDate as string;\n                this.updateDatePickerDisplay(newDate as string);\n            }\n            this.renderNotesList(); // Update active state\n            calendar.render();\n            this.updateBreadcrumb();\n            this.updateEditorDeleteButton(); // Update delete button visibility\n        });\n\n        // Update date picker display when date format changes\n        state.subscribe('userSettings', () => {\n            const selectedDate = state.get('selectedDate');\n            if (selectedDate) {\n                this.updateDatePickerDisplay(selectedDate);\n            }\n            this.updateBreadcrumb();\n        });\n\n        // Update context indicator when selected context changes\n        state.subscribe('selectedContext', (selectedContext) => {\n            // Update the select dropdown values (both desktop and mobile)\n            if (this.elements.contextSelect && selectedContext) {\n                this.elements.contextSelect.value = selectedContext;\n            }\n            if (this.elements.mobileContextSelect && selectedContext) {\n                this.elements.mobileContextSelect.value = selectedContext;\n            }\n            this.updateContextIndicator();\n            this.updateEditorState();\n        });\n\n        // Update user email when user changes\n        state.subscribe('currentUser', (user) => {\n            if (this.elements.userEmail && user) {\n                this.elements.userEmail.textContent = user.email || '';\n            }\n        });\n\n        // Update theme when settings change\n        state.subscribe('userSettings', (settings) => {\n            if (settings.theme) {\n                this.setTheme(settings.theme);\n            }\n            // Update context selector visibility based on uniqueContextMode\n            this.updateContextSelectorVisibility();\n            // Update breadcrumb visibility\n            this.updateBreadcrumbVisibility();\n            // Update markdown editor visibility\n            this.updateMarkdownEditorVisibility();\n            // Update new context button visibility\n            this.updateNewContextButtonVisibility();\n        });\n    }\n\n    renderContextsSelect(): void {\n        const contextsList = state.get('contexts');\n        const selectedContext = state.get('selectedContext');\n\n        const optionsHTML = '<option value=\"\">Select context...</option>' +\n            contextsList.map(c =>\n                `<option value=\"${c.name}\" data-color=\"${c.color || 'primary'}\">${c.name}</option>`\n            ).join('');\n\n        // Update desktop selector\n        if (this.elements.contextSelect) {\n            this.elements.contextSelect.innerHTML = optionsHTML;\n            if (selectedContext) {\n                this.elements.contextSelect.value = selectedContext;\n            }\n        }\n\n        // Update mobile selector\n        if (this.elements.mobileContextSelect) {\n            this.elements.mobileContextSelect.innerHTML = optionsHTML;\n            if (selectedContext) {\n                this.elements.mobileContextSelect.value = selectedContext;\n            }\n        }\n\n        this.updateContextIndicator();\n    }\n\n    updateContextIndicator(): void {\n        // Update desktop indicator\n        if (this.elements.contextSelect && this.elements.contextColorIndicator) {\n            const opt = this.elements.contextSelect.options[this.elements.contextSelect.selectedIndex] as HTMLOptionElement;\n\n            if (opt?.dataset.color && opt.value !== '') {\n                const normalizedColor = normalizeToBulmaColor(opt.dataset.color);\n                this.elements.contextColorIndicator.style.background = `var(--bulma-${normalizedColor})`;\n                this.elements.contextColorIndicator.style.opacity = '1';\n            } else {\n                this.elements.contextColorIndicator.style.background = 'var(--bulma-grey-light)';\n                this.elements.contextColorIndicator.style.opacity = '0.3';\n            }\n        }\n\n        // Update mobile indicator\n        if (this.elements.mobileContextSelect && this.elements.mobileContextColorIndicator) {\n            const opt = this.elements.mobileContextSelect.options[this.elements.mobileContextSelect.selectedIndex] as HTMLOptionElement;\n\n            if (opt?.dataset.color && opt.value !== '') {\n                const normalizedColor = normalizeToBulmaColor(opt.dataset.color);\n                this.elements.mobileContextColorIndicator.style.background = `var(--bulma-${normalizedColor})`;\n                this.elements.mobileContextColorIndicator.style.opacity = '1';\n            } else {\n                this.elements.mobileContextColorIndicator.style.background = 'var(--bulma-grey-light)';\n                this.elements.mobileContextColorIndicator.style.opacity = '0.3';\n            }\n        }\n    }\n\n    renderNotesList(): void {\n        const notesList = state.get('notes');\n        const selectedDate = state.get('selectedDate');\n        const settings = state.get('userSettings');\n        const timezone = settings.timezone || 'UTC';\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n        if (!this.elements.notesList) return;\n\n        if (notesList.length === 0) {\n            this.elements.notesList.innerHTML = '<li class=\"has-text-centered py-6 has-text-grey-light\">No notes yet</li>';\n            return;\n        }\n\n        // Virtual scrolling: only render visible notes\n        const notesToRender = notesList.slice(0, this.renderedNotesCount);\n        const hasMore = notesList.length > this.renderedNotesCount;\n\n        this.elements.notesList.innerHTML = notesToRender.map(note => {\n            const [year, month, day] = note.date.split('-').map(Number);\n            const dateObj = new Date(year, month - 1, day);\n\n            // Get the day name in English\n            const dayName = dateObj.toLocaleDateString('en-US', {\n                weekday: 'long',\n                timeZone: timezone\n            });\n\n            // Format date based on user preference\n            const yy = String(year).substring(2); // Get last 2 digits of year\n            const mm = String(month).padStart(2, '0');\n            const dd = String(day).padStart(2, '0');\n\n            let dateStr: string;\n            if (dateFormat === 'MM-DD-YY') {\n                dateStr = `${mm}-${dd}-${yy}`;\n            } else {\n                dateStr = `${dd}-${mm}-${yy}`;\n            }\n\n            // Format: \"Monday, 24-10-25.md\" or \"Monday, 10-24-25.md\" depending on dateFormat\n            const formattedDate = `${dayName}, ${dateStr}.md`;\n\n            const isActive = note.date === selectedDate;\n\n            return `\n                <li>\n                    <a\n                        class=\"${isActive ? 'is-active' : ''}\"\n                        data-date=\"${note.date}\"\n                    >\n                        ${formattedDate}\n                    </a>\n                </li>\n            `;\n        }).join('');\n\n        // Add \"Load More\" button if there are more notes\n        if (hasMore) {\n            this.elements.notesList.innerHTML += `\n                <li class=\"has-text-centered py-3\">\n                    <button class=\"button is-small is-ghost\" id=\"load-more-notes\" style=\"opacity: 0.7;\">\n                        <span class=\"icon\">\n                            <span class=\"material-symbols-outlined\">expand_more</span>\n                        </span>\n                        <span>Load ${Math.min(50, notesList.length - this.renderedNotesCount)} more</span>\n                    </button>\n                </li>\n            `;\n        }\n\n        // Add click handlers for notes\n        this.elements.notesList.querySelectorAll('a[data-date]').forEach(link => {\n            link.addEventListener('click', async (e) => {\n                e.preventDefault(); // Prevent default link behavior\n                const dateStr = (link as HTMLElement).dataset.date;\n                if (dateStr) {\n                    // Check if this date is already selected\n                    const currentDate = state.get('selectedDate');\n                    if (currentDate === dateStr) {\n                        console.log('[UI] Date already selected, skipping:', dateStr);\n                        return;\n                    }\n                    await notes.selectDate(dateStr);\n                }\n            });\n        });\n\n        // Add click handler for \"Load More\" button\n        const loadMoreBtn = document.getElementById('load-more-notes');\n        if (loadMoreBtn) {\n            loadMoreBtn.addEventListener('click', () => {\n                this.renderedNotesCount += 50;\n                this.renderNotesList();\n            });\n        }\n    }\n\n    updateEditorState(): void {\n        // Editor state is now managed by the markdown editor module\n        const context = state.get('selectedContext');\n        const contextsList = state.get('contexts') || [];\n\n        // Update editor state based on context\n        if (context) {\n            markdownEditor.setDisabled(false);\n        } else {\n            // First ensure Quill is loaded before setting placeholder\n            markdownEditor.ensureQuillLoaded().then(() => {\n                markdownEditor.setDisabled(true);\n                markdownEditor.setContent('');\n\n                // If there are no contexts at all, show a message to create the first one\n                if (contextsList.length === 0) {\n                    // Wait a bit to ensure setDisabled has applied\n                    setTimeout(() => {\n                        markdownEditor.setPlaceholderMessage('Click \"New Context\" to create your first context and start writing notes.');\n                    }, 100);\n                }\n            });\n        }\n\n        // Show/hide delete button based on context\n        this.updateEditorDeleteButton();\n    }\n\n    updateEditorDeleteButton(): void {\n        const editorDeleteBtn = document.getElementById('editor-delete-note-btn');\n        const editorFullscreenBtn = document.getElementById('editor-fullscreen-btn');\n\n        const context = state.get('selectedContext');\n        const selectedDate = state.get('selectedDate');\n\n        // Show buttons only if we have both context and selected date\n        if (context && selectedDate) {\n            if (editorDeleteBtn) editorDeleteBtn.style.display = 'flex';\n            if (editorFullscreenBtn) editorFullscreenBtn.style.display = 'flex';\n        } else {\n            if (editorDeleteBtn) editorDeleteBtn.style.display = 'none';\n            if (editorFullscreenBtn) editorFullscreenBtn.style.display = 'none';\n        }\n    }\n\n    updateSaveIndicator(status: string): void {\n        if (!this.elements.saveIndicator) return;\n\n        this.elements.saveIndicator.className = `save-indicator ${status}`;\n\n        if (status === 'saved') {\n            this.elements.saveIndicator.textContent = 'Saved locally ✓';\n            setTimeout(() => {\n                if (this.elements.saveIndicator) {\n                    this.elements.saveIndicator.textContent = '';\n                }\n            }, 2000);\n        } else {\n            this.elements.saveIndicator.textContent = '';\n        }\n    }\n\n    updateSyncStatus({ pending, syncing }: SyncStatusOptions): void {\n        if (!this.elements.syncStatus || !this.elements.syncStatusText) return;\n\n        // Show sync indicator when there are pending operations or actively syncing\n        if (pending > 0 || syncing) {\n            this.elements.syncStatus.style.display = 'flex';\n\n            if (syncing) {\n                this.elements.syncStatusText.textContent = `Syncing ${pending} note${pending !== 1 ? 's' : ''}...`;\n                this.elements.syncStatus.classList.add('is-syncing');\n                this.elements.syncStatus.classList.remove('is-pending');\n            } else {\n                this.elements.syncStatusText.textContent = `${pending} note${pending !== 1 ? 's' : ''} pending sync`;\n                this.elements.syncStatus.classList.add('is-pending');\n                this.elements.syncStatus.classList.remove('is-syncing');\n            }\n        } else {\n            // Hide after successful sync with a brief delay\n            setTimeout(() => {\n                if (this.elements.syncStatus) {\n                    this.elements.syncStatus.style.display = 'none';\n                    this.elements.syncStatus.classList.remove('is-syncing', 'is-pending');\n                }\n            }, 1000);\n        }\n    }\n\n    setTheme(theme: string): void {\n        document.documentElement.setAttribute('data-theme', theme);\n        if (this.elements.themeToggleSwitch) {\n            this.elements.themeToggleSwitch.checked = theme === 'dark';\n        }\n        this.updateThemeIcon();\n        localStorage.setItem('theme', theme);\n    }\n\n    updateThemeIcon(): void {\n        const theme = document.documentElement.getAttribute('data-theme');\n        const themeIcon = this.elements.themeToggleMenu?.querySelector('.material-symbols-outlined');\n        if (themeIcon) {\n            themeIcon.textContent = theme === 'dark' ? 'light_mode' : 'dark_mode';\n        }\n    }\n\n    showApp(_skipAnimation: boolean = false): void {\n        console.log('[UI] showApp called');\n        console.log('[UI] authSection:', this.elements.authSection);\n        console.log('[UI] appSection:', this.elements.appSection);\n\n        if (!this.elements.authSection || !this.elements.appSection) {\n            console.error('[UI] Missing elements!');\n            return;\n        }\n\n        // Hide loader if visible\n        const loader = document.getElementById('landing-loader');\n        if (loader) {\n            console.log('[UI] Hiding loader');\n            loader.classList.remove('visible');\n        }\n\n        // Simple: hide auth, show app\n        console.log('[UI] Hiding auth section');\n        this.elements.authSection.classList.remove('visible');\n\n        console.log('[UI] Showing app section');\n        this.elements.appSection.classList.add('visible');\n\n        console.log('[UI] App section display:', window.getComputedStyle(this.elements.appSection).display);\n\n        // Update context selector visibility based on settings\n        this.updateContextSelectorVisibility();\n\n        // Update breadcrumb and markdown editor visibility\n        this.updateBreadcrumbVisibility();\n        this.updateMarkdownEditorVisibility();\n\n        // Update new context button visibility\n        this.updateNewContextButtonVisibility();\n\n        // Update editor state (to show proper placeholder message)\n        this.updateEditorState();\n\n        // Start clock (after server time sync is complete)\n        this.startClock();\n\n        // Check if user has no contexts (new user or deleted all contexts)\n        // We use hasNoContexts from the backend response, NOT from local state\n        // because local state might not be loaded yet\n        const hasNoContexts = (state as any).get('hasNoContexts');\n\n        console.log('[UI] showApp - hasNoContexts:', hasNoContexts);\n\n        // Show onboarding modal when user has no contexts\n        // This happens when:\n        // - New user (never created a context)\n        // - User deleted all their contexts\n        if (hasNoContexts) {\n            console.log('[UI] Showing onboarding modal');\n            setTimeout(() => {\n                this.elements.onboardingModal?.classList.add('is-active');\n            }, 500);\n        } else {\n            console.log('[UI] NOT showing onboarding modal');\n        }\n    }\n\n    hideApp(): void {\n        if (!this.elements.authSection || !this.elements.appSection) return;\n\n        // Simple: hide app, show auth\n        this.elements.appSection.classList.remove('visible');\n        this.elements.authSection.classList.add('visible');\n    }\n\n    showError(message: string | { title?: string; message?: string; duration?: number }, options: NotificationOptions = {}): void {\n        // Handle different error types\n        let title = 'Error';\n        let duration = 7000;\n        let msg = '';\n\n        if (typeof message === 'object') {\n            // Structured error\n            title = message.title || 'Error';\n            msg = message.message || 'An error occurred';\n            duration = message.duration || 7000;\n        } else {\n            msg = message;\n        }\n\n        // Check if it's a network error\n        if (msg.includes('network') || msg.includes('offline')) {\n            title = 'Connection Error';\n            duration = 10000; // Longer for network issues\n        }\n\n        notifications.error(msg, { title, duration, ...options });\n    }\n\n    showSuccess(message: string, options: NotificationOptions = {}): void {\n        notifications.success(message, { duration: 3000, ...options });\n    }\n\n    showWarning(message: string, options: NotificationOptions = {}): void {\n        notifications.warning(message, { duration: 5000, ...options });\n    }\n\n    showInfo(message: string, options: NotificationOptions = {}): void {\n        notifications.info(message, { duration: 4000, ...options });\n    }\n\n    // Modal methods\n    showContextModal(): void {\n        this.elements.contextModal?.classList.add('is-active');\n        const nameInput = document.getElementById('context-name') as HTMLInputElement | null;\n        const colorInput = document.getElementById('context-color') as HTMLInputElement | null;\n        if (nameInput) nameInput.value = '';\n        if (colorInput) colorInput.value = 'primary';\n\n        // Setup color buttons handlers\n        setupColorButtons('context-color', 'context-color-buttons');\n\n        // Reset to primary\n        selectColorButton('primary', 'context-color-buttons', 'context-color');\n\n        nameInput?.focus();\n    }\n\n    closeContextModal(): void {\n        this.elements.contextModal?.classList.remove('is-active');\n    }\n\n    showSettingsModal(): void {\n        const settings = state.get('userSettings');\n\n        if (this.elements.weekStartSelect) {\n            this.elements.weekStartSelect.value = String(settings.weekStart);\n        }\n        if (this.elements.timezoneSelect) {\n            this.elements.timezoneSelect.value = settings.timezone;\n        }\n        const dateFormatSelect = document.getElementById('date-format-select') as HTMLSelectElement | null;\n        if (dateFormatSelect) {\n            dateFormatSelect.value = settings.dateFormat || 'DD-MM-YY';\n        }\n        const uniqueContextModeSwitch = document.getElementById('unique-context-mode-switch') as HTMLInputElement | null;\n        if (uniqueContextModeSwitch) {\n            uniqueContextModeSwitch.checked = settings.uniqueContextMode || false;\n        }\n        const showBreadcrumbSwitch = document.getElementById('show-breadcrumb-switch') as HTMLInputElement | null;\n        if (showBreadcrumbSwitch) {\n            showBreadcrumbSwitch.checked = settings.showBreadcrumb === true;\n        }\n        const showMarkdownEditorSwitch = document.getElementById('show-markdown-editor-switch') as HTMLInputElement | null;\n        if (showMarkdownEditorSwitch) {\n            showMarkdownEditorSwitch.checked = settings.showMarkdownEditor === true;\n        }\n        const hideNewContextButtonSwitch = document.getElementById('hide-new-context-button-switch') as HTMLInputElement | null;\n        if (hideNewContextButtonSwitch) {\n            hideNewContextButtonSwitch.checked = settings.hideNewContextButton === true;\n        }\n\n        // Reset accordion to collapsed state\n        const accordionContent = document.getElementById('contexts-accordion-content') as HTMLElement | null;\n        const accordionIcon = document.getElementById('contexts-accordion-icon');\n        if (accordionContent) {\n            accordionContent.style.display = 'none';\n            accordionContent.style.opacity = '1'; // Reset opacity\n        }\n        if (accordionIcon) {\n            const iconElement = accordionIcon.querySelector('.material-symbols-outlined');\n            if (iconElement) iconElement.textContent = 'expand_more';\n        }\n\n        // Render contexts list\n        this.renderContextsEditList();\n\n        // Reset save button state\n        const saveBtn = document.getElementById('settings-save-btn') as HTMLButtonElement | null;\n        const saveIcon = document.getElementById('settings-save-icon');\n        const saveSpinner = document.getElementById('settings-save-spinner') as HTMLElement | null;\n        const saveText = document.getElementById('settings-save-text');\n\n        if (saveBtn) saveBtn.disabled = false;\n        if (saveIcon) {\n            saveIcon.style.display = 'inline-flex';\n            const iconElement = saveIcon.querySelector('.material-symbols-outlined');\n            if (iconElement) iconElement.textContent = 'check';\n        }\n        if (saveSpinner) saveSpinner.style.display = 'none';\n        if (saveText) saveText.textContent = 'Save';\n\n        this.elements.settingsModal?.classList.add('is-active');\n    }\n\n    closeSettingsModal(): void {\n        // Reset accordion to collapsed state before closing\n        const accordionContent = document.getElementById('contexts-accordion-content') as HTMLElement | null;\n        const accordionIcon = document.getElementById('contexts-accordion-icon');\n        if (accordionContent) {\n            accordionContent.style.display = 'none';\n            accordionContent.style.opacity = '1'; // Reset opacity\n        }\n        if (accordionIcon) {\n            const iconElement = accordionIcon.querySelector('.material-symbols-outlined');\n            if (iconElement) iconElement.textContent = 'expand_more';\n        }\n\n        this.elements.settingsModal?.classList.remove('is-active');\n    }\n\n    closeOnboardingModal(): void {\n        this.elements.onboardingModal?.classList.remove('is-active');\n        // No need to store in localStorage anymore since we use backend isFirstLogin flag\n    }\n\n    showDeleteNoteModal(context: string, date: string, formattedDate: string): void {\n        const modal = document.getElementById('delete-note-modal') as HTMLElement & { dataset: { context?: string; date?: string } } | null;\n        const message = document.getElementById('delete-note-message');\n\n        if (modal && message) {\n            // Store the note info for later use\n            modal.dataset.context = context;\n            modal.dataset.date = date;\n\n            // Update message with formatted date\n            message.textContent = `Are you sure you want to delete the note for ${formattedDate}?`;\n\n            modal.classList.add('is-active');\n        }\n    }\n\n    closeDeleteNoteModal(): void {\n        const modal = document.getElementById('delete-note-modal') as HTMLElement & { dataset: { context?: string; date?: string } } | null;\n        if (modal) {\n            modal.classList.remove('is-active');\n            delete modal.dataset.context;\n            delete modal.dataset.date;\n        }\n    }\n\n    closeAllModals(): void {\n        this.closeContextModal();\n        this.closeSettingsModal();\n        this.closeOnboardingModal();\n        this.closeDeleteNoteModal();\n    }\n\n    // Clock\n    startClock(): void {\n        if (this.clockStarted) {\n            console.log('[UI] Clock already started, skipping');\n            return;\n        }\n        this.clockStarted = true;\n        console.log('[UI] Starting clock with server time sync');\n        this.updateCurrentDateTime();\n        setInterval(() => this.updateCurrentDateTime(), 1000);\n    }\n\n    updateCurrentDateTime(): void {\n        const settings = state.get('userSettings');\n        const timezone = settings.timezone || 'UTC';\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n        const serverTimeOffset = state.get('serverTimeOffset');\n        const now = new Date(Date.now() + serverTimeOffset);\n\n        // Determine locale based on user's date format preference\n        // MM-DD-YY: Use en-US (American format)\n        // DD-MM-YY: Use browser locale or fallback to en-GB (European format)\n        let locale: string;\n        if (dateFormat === 'MM-DD-YY') {\n            locale = 'en-US';\n        } else {\n            // Try to use the browser's locale, fallback to 'en-GB' if not available\n            locale = navigator.language || navigator.languages?.[0] || 'en-GB';\n        }\n\n        const timeOptions: Intl.DateTimeFormatOptions = {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n            timeZone: timezone\n        };\n\n        const dateOptions: Intl.DateTimeFormatOptions = {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            timeZone: timezone\n        };\n\n        const timeString = now.toLocaleTimeString(locale, timeOptions);\n        const dateString = now.toLocaleDateString(locale, dateOptions);\n\n        // Desktop date with full format (weekday + date)\n        if (this.elements.currentTime) {\n            this.elements.currentTime.textContent = timeString;\n        }\n        if (this.elements.currentDate) {\n            this.elements.currentDate.textContent = dateString;\n        }\n\n        // Mobile date without weekday (shorter format)\n        const mobileDateOptions: Intl.DateTimeFormatOptions = {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            timeZone: timezone\n        };\n        const mobileDateString = now.toLocaleDateString(locale, mobileDateOptions);\n\n        if (this.elements.mobileCurrentTime) {\n            this.elements.mobileCurrentTime.textContent = timeString;\n        }\n        if (this.elements.mobileCurrentDate) {\n            this.elements.mobileCurrentDate.textContent = mobileDateString;\n        }\n\n        // Check if day changed and update calendar\n        const currentDate = (state as any).get('today') as string;\n        if (this.lastKnownDate && this.lastKnownDate !== currentDate) {\n            calendar.render();\n        }\n        this.lastKnownDate = currentDate as string | null;\n    }\n\n    updateDatePickerDisplay(dateStr: string): void {\n        const displayElement = document.getElementById('date-picker-display');\n        if (!displayElement || !dateStr) return;\n\n        const settings = state.get('userSettings');\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n        const [year, month, day] = dateStr.split('-').map(Number);\n\n        // Format date based on user preference\n        const yy = String(year).substring(2); // Get last 2 digits of year\n        const mm = String(month).padStart(2, '0');\n        const dd = String(day).padStart(2, '0');\n\n        let formattedDate: string;\n        if (dateFormat === 'MM-DD-YY') {\n            formattedDate = `${mm}/${dd}/${yy}`;\n        } else {\n            formattedDate = `${dd}/${mm}/${yy}`;\n        }\n\n        displayElement.textContent = formattedDate;\n    }\n\n    updateContextSelectorVisibility(): void {\n        const settings = state.get('userSettings');\n        const uniqueContextMode = settings.uniqueContextMode || false;\n\n        // Get context selector containers (both desktop and mobile)\n        const desktopContextContainer = document.getElementById('desktop-context-selector');\n        const mobileContextContainer = document.getElementById('mobile-context-selector');\n\n        if (uniqueContextMode) {\n            // Hide context selectors\n            if (desktopContextContainer) {\n                desktopContextContainer.style.display = 'none';\n            }\n            if (mobileContextContainer) {\n                mobileContextContainer.style.display = 'none';\n            }\n        } else {\n            // Show context selectors\n            if (desktopContextContainer) {\n                desktopContextContainer.style.display = '';\n            }\n            if (mobileContextContainer) {\n                mobileContextContainer.style.display = '';\n            }\n        }\n    }\n\n    updateBreadcrumbVisibility(): void {\n        const settings = state.get('userSettings');\n        const showBreadcrumb = settings.showBreadcrumb === true;\n\n        const breadcrumb = document.getElementById('drive-breadcrumb');\n        const mainSection = document.querySelector('.main-section');\n\n        // Show/hide breadcrumb\n        if (breadcrumb) {\n            breadcrumb.style.display = showBreadcrumb ? '' : 'none';\n        }\n\n        // Set data attribute that CSS will use to adjust spacing\n        if (mainSection) {\n            if (showBreadcrumb) {\n                mainSection.removeAttribute('data-hide-breadcrumb');\n            } else {\n                mainSection.setAttribute('data-hide-breadcrumb', 'true');\n            }\n        }\n    }\n\n    updateMarkdownEditorVisibility(): void {\n        const settings = state.get('userSettings');\n        const showMarkdownEditor = settings.showMarkdownEditor === true;\n\n        // Get the Quill toolbar\n        const toolbar = document.querySelector('.ql-toolbar') as HTMLElement | null;\n        if (toolbar) {\n            toolbar.style.display = showMarkdownEditor ? '' : 'none';\n        }\n\n        // The editor itself should remain enabled based on context selection,\n        // regardless of toolbar visibility\n        const context = state.get('selectedContext');\n        // Editor should be enabled if we have a context, regardless of toolbar visibility\n        markdownEditor.setDisabled(context ? false : true);\n    }\n\n    updateNewContextButtonVisibility(): void {\n        const settings = state.get('userSettings');\n        const hideNewContextButton = settings.hideNewContextButton === true;\n\n        // Get new context buttons (both desktop and mobile)\n        const desktopNewContextBtn = document.getElementById('desktop-new-context-btn');\n        const mobileNewContextBtn = document.getElementById('mobile-new-context-btn');\n\n        // Hide or show buttons\n        if (desktopNewContextBtn) {\n            desktopNewContextBtn.style.display = hideNewContextButton ? 'none' : '';\n        }\n        if (mobileNewContextBtn) {\n            mobileNewContextBtn.style.display = hideNewContextButton ? 'none' : '';\n        }\n    }\n\n    renderContextsEditList(): void {\n        const contextsList = state.get('contexts');\n        const container = document.getElementById('contexts-edit-list');\n\n        if (!container) return;\n\n        if (contextsList.length === 0) {\n            container.innerHTML = '<p class=\"has-text-centered has-text-grey-light py-5\">No contexts yet. Create your first context to get started!</p>';\n            return;\n        }\n\n        container.innerHTML = contextsList.map((ctx, _index) => {\n            // Normalize old hex colors to Bulma colors\n            const normalizedColor = normalizeToBulmaColor(ctx.color);\n\n            return `\n            <div class=\"is-flex is-align-items-center is-justify-content-space-between mb-3\"\n                 style=\"padding: 0.75rem 1rem; background: var(--bulma-scheme-main-bis); border-left: 3px solid var(--bulma-${normalizedColor}); border-radius: 6px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\">\n                <div class=\"is-flex is-align-items-center\" style=\"gap: 0.75rem; flex: 1; min-width: 0;\">\n                    <span style=\"display: block; width: 12px; height: 12px; background: var(--bulma-${normalizedColor}); border-radius: 50%; flex-shrink: 0;\"></span>\n                    <span style=\"font-size: 0.9rem; font-weight: 500; color: var(--bulma-text); overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\">${ctx.name}</span>\n                </div>\n                <div class=\"is-flex is-align-items-center\" style=\"gap: 0.35rem;\">\n                    <button class=\"button is-small context-action-btn context-edit-btn\"\n                            onclick=\"window.showEditContextModal('${ctx.id}')\"\n                            title=\"Edit context\"\n                            style=\"padding: 0.35rem; border: none; background: transparent; border-radius: 50%; width: 32px; height: 32px;\">\n                        <span class=\"icon is-small\">\n                            <span class=\"material-symbols-outlined\" style=\"font-size: 18px; color: var(--bulma-grey);\">edit</span>\n                        </span>\n                    </button>\n                    <button class=\"button is-small context-action-btn context-delete-btn\"\n                            onclick=\"window.showDeleteContextModal('${ctx.id}', '${ctx.name.replace(/'/g, \"\\\\'\")}')\"\n                            title=\"Delete context\"\n                            style=\"padding: 0.35rem; border: none; background: transparent; border-radius: 50%; width: 32px; height: 32px;\">\n                        <span class=\"icon is-small\">\n                            <span class=\"material-symbols-outlined\" style=\"font-size: 18px; color: var(--bulma-grey);\">delete</span>\n                        </span>\n                    </button>\n                </div>\n            </div>\n        `;\n        }).join('');\n    }\n\n\n    setupMobileNavigation(): void {\n        // Toggle sidebar (notes list)\n        this.elements.mobileNotesToggle?.addEventListener('click', () => {\n            this.toggleMobileSidebar();\n        });\n\n        // Toggle calendar\n        this.elements.mobileCalendarToggle?.addEventListener('click', () => {\n            this.toggleMobileCalendar();\n        });\n\n        // Close sidebar\n        this.elements.sidebarClose?.addEventListener('click', () => {\n            this.closeMobileSidebar();\n        });\n\n        // Close calendar\n        this.elements.calendarClose?.addEventListener('click', () => {\n            this.closeMobileCalendar();\n        });\n\n        // Close on overlay click\n        this.elements.sidebarOverlay?.addEventListener('click', () => {\n            this.closeMobileSidebar();\n        });\n\n        this.elements.calendarOverlay?.addEventListener('click', () => {\n            this.closeMobileCalendar();\n        });\n\n        // Close mobile panels when selecting a note\n        if (this.elements.notesList) {\n            this.elements.notesList.addEventListener('click', (e) => {\n                if ((e.target as HTMLElement).tagName === 'A' && window.innerWidth <= 768) {\n                    this.closeMobileSidebar();\n                }\n            });\n        }\n\n        // Clean up mobile panel states on resize\n        window.addEventListener('resize', () => {\n            if (window.innerWidth > 768) {\n                // Remove mobile panel classes and reset styles when returning to desktop\n                if (this.elements.sidebar) {\n                    this.elements.sidebar.classList.remove('mobile-panel', 'active');\n                    this.elements.sidebar.style.display = '';\n                }\n                if (this.elements.calendarPanel) {\n                    this.elements.calendarPanel.classList.remove('mobile-panel', 'active');\n                    this.elements.calendarPanel.style.display = '';\n                }\n                if (this.elements.sidebarOverlay) {\n                    this.elements.sidebarOverlay.classList.remove('active');\n                }\n                if (this.elements.calendarOverlay) {\n                    this.elements.calendarOverlay.classList.remove('active');\n                }\n                document.body.style.overflow = '';\n            }\n        });\n    }\n\n    toggleMobileSidebar(): void {\n        if (!this.elements.sidebar || !this.elements.sidebarOverlay) return;\n\n        // Only work on mobile screens\n        if (window.innerWidth > 768) return;\n\n        const isActive = this.elements.sidebar.classList.contains('mobile-panel');\n\n        if (!isActive) {\n            // Add mobile-panel class and show\n            this.elements.sidebar.classList.add('mobile-panel');\n            this.elements.sidebar.style.display = 'flex';\n        }\n\n        // Toggle active state\n        this.elements.sidebar.classList.toggle('active');\n        this.elements.sidebarOverlay.classList.toggle('active');\n\n        // Prevent body scroll when panel is open\n        if (this.elements.sidebar.classList.contains('active')) {\n            document.body.style.overflow = 'hidden';\n        } else {\n            document.body.style.overflow = '';\n        }\n    }\n\n    closeMobileSidebar(): void {\n        if (!this.elements.sidebar || !this.elements.sidebarOverlay) return;\n\n        this.elements.sidebar.classList.remove('active');\n        this.elements.sidebarOverlay.classList.remove('active');\n        document.body.style.overflow = '';\n    }\n\n    toggleMobileCalendar(): void {\n        if (!this.elements.calendarPanel || !this.elements.calendarOverlay) return;\n\n        // Only work on mobile screens\n        if (window.innerWidth > 768) return;\n\n        const isActive = this.elements.calendarPanel.classList.contains('mobile-panel');\n\n        if (!isActive) {\n            // Add mobile-panel class and show\n            this.elements.calendarPanel.classList.add('mobile-panel');\n            this.elements.calendarPanel.style.display = 'flex';\n        }\n\n        // Toggle active state\n        this.elements.calendarPanel.classList.toggle('active');\n        this.elements.calendarOverlay.classList.toggle('active');\n\n        // Prevent body scroll when panel is open\n        if (this.elements.calendarPanel.classList.contains('active')) {\n            document.body.style.overflow = 'hidden';\n        } else {\n            document.body.style.overflow = '';\n        }\n    }\n\n    closeMobileCalendar(): void {\n        if (!this.elements.calendarPanel || !this.elements.calendarOverlay) return;\n\n        this.elements.calendarPanel.classList.remove('active');\n        this.elements.calendarOverlay.classList.remove('active');\n        document.body.style.overflow = '';\n    }\n\n    updateBreadcrumb(): void {\n        const context = state.get('selectedContext');\n        const selectedDate = state.get('selectedDate');\n        const settings = state.get('userSettings');\n        const timezone = settings.timezone || 'UTC';\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n        if (this.elements.breadcrumbContextName && context) {\n            this.elements.breadcrumbContextName.textContent = context;\n        }\n\n        if (this.elements.breadcrumbDateName && selectedDate) {\n            // Format date the same way as notes list\n            const [year, month, day] = selectedDate.split('-').map(Number);\n            const dateObj = new Date(year, month - 1, day);\n\n            // Get the day name in English\n            const dayName = dateObj.toLocaleDateString('en-US', {\n                weekday: 'long',\n                timeZone: timezone\n            });\n\n            // Format date based on user preference\n            const yy = String(year).substring(2); // Get last 2 digits of year\n            const mm = String(month).padStart(2, '0');\n            const dd = String(day).padStart(2, '0');\n\n            let dateStr: string;\n            if (dateFormat === 'MM-DD-YY') {\n                dateStr = `${mm}-${dd}-${yy}`;\n            } else {\n                dateStr = `${dd}-${mm}-${yy}`;\n            }\n\n            // Format: \"Monday, 24-10-25.md\" or \"Monday, 10-24-25.md\" depending on dateFormat\n            const formattedDate = `${dayName}, ${dateStr}.md`;\n            this.elements.breadcrumbDateName.textContent = formattedDate;\n\n            // Update mobile selected note date with .md extension (no day name)\n            if (this.elements.mobileSelectedNoteDate) {\n                this.elements.mobileSelectedNoteDate.textContent = `${dateStr}.md`;\n            }\n        }\n    }\n\n    openFullscreenNote(): void {\n        const context = state.get('selectedContext');\n        const selectedDate = state.get('selectedDate');\n\n        if (!context || !selectedDate) return;\n\n        // Format date for display\n        const settings = state.get('userSettings');\n        const timezone = settings.timezone || 'UTC';\n        const dateFormat = settings.dateFormat || 'DD-MM-YY';\n\n        const [year, month, day] = selectedDate.split('-').map(Number);\n        const dateObj = new Date(year, month - 1, day);\n\n        const dayName = dateObj.toLocaleDateString('en-US', {\n            weekday: 'long',\n            timeZone: timezone\n        });\n\n        const yy = String(year).substring(2);\n        const mm = String(month).padStart(2, '0');\n        const dd = String(day).padStart(2, '0');\n\n        let dateStr: string;\n        if (dateFormat === 'MM-DD-YY') {\n            dateStr = `${mm}-${dd}-${yy}`;\n        } else {\n            dateStr = `${dd}-${mm}-${yy}`;\n        }\n\n        const formattedDate = `${dayName}, ${dateStr}.md`;\n\n        // Get modal elements\n        const modal = document.getElementById('fullscreen-note-modal');\n        const dateEl = document.getElementById('fullscreen-note-date');\n        const editorEl = document.getElementById('fullscreen-note-editor');\n\n        if (!modal || !dateEl || !editorEl) return;\n\n        // Set date\n        dateEl.textContent = formattedDate;\n\n        // Get current note content using the markdown editor\n        const content = markdownEditor.getContent();\n\n        // Create a read-only Quill instance for fullscreen\n        if ((window as any).Quill) {\n            // Clear previous instance if exists\n            editorEl.innerHTML = '';\n\n            const fullscreenQuill = new (window as any).Quill(editorEl, {\n                theme: 'snow',\n                readOnly: true,\n                modules: {\n                    toolbar: false\n                }\n            });\n\n            fullscreenQuill.root.innerHTML = content;\n\n            // Style the editor\n            fullscreenQuill.root.style.fontSize = '16px';\n            fullscreenQuill.root.style.lineHeight = '1.6';\n        } else {\n            // Fallback if Quill not loaded\n            editorEl.innerHTML = content;\n        }\n\n        // Show modal\n        modal.classList.add('is-active');\n\n        // Add escape key listener\n        const escapeHandler = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                this.closeFullscreenNote();\n                document.removeEventListener('keydown', escapeHandler);\n            }\n        };\n        document.addEventListener('keydown', escapeHandler);\n    }\n\n    closeFullscreenNote(): void {\n        const modal = document.getElementById('fullscreen-note-modal');\n        if (modal) {\n            modal.classList.remove('is-active');\n        }\n    }\n}\n\nexport const ui = new UIManager();\n\n// Expose globally for browser compatibility and HTML onclick handlers\nif (typeof window !== 'undefined') {\n    (window as any).ui = ui;\n\n    // Context modal handlers\n    (window as any).showNewContextModal = () => ui.showContextModal();\n    (window as any).closeContextModal = () => ui.closeContextModal();\n\n    (window as any).createContext = async () => {\n        const nameInput = document.getElementById('context-name') as HTMLInputElement | null;\n        const colorInput = document.getElementById('context-color') as HTMLInputElement | null;\n\n        const name = nameInput?.value.trim();\n        const color = colorInput?.value;\n\n        if (!name) return;\n\n        await contexts.createContext(name, color);\n        ui.closeContextModal();\n\n        await notes.loadNotesList(name);\n        const selectedDate = state.get('selectedDate');\n        if (selectedDate) {\n            await notes.loadNote(name, selectedDate);\n        }\n    };\n\n    // Settings modal handlers\n    (window as any).showSettingsModal = () => ui.showSettingsModal();\n    (window as any).closeSettingsModal = () => ui.closeSettingsModal();\n\n    (window as any).saveSettings = async () => {\n        const saveBtn = document.getElementById('settings-save-btn') as HTMLButtonElement | null;\n        const saveIcon = document.getElementById('settings-save-icon');\n        const saveSpinner = document.getElementById('settings-save-spinner');\n        const saveText = document.getElementById('settings-save-text');\n        const cancelBtn = document.getElementById('settings-cancel-btn') as HTMLButtonElement | null;\n\n        const weekStartSelect = document.getElementById('week-start-select') as HTMLSelectElement | null;\n        const timezoneSelect = document.getElementById('timezone-select') as HTMLSelectElement | null;\n        const dateFormatSelect = document.getElementById('date-format-select') as HTMLSelectElement | null;\n        const uniqueContextModeSwitch = document.getElementById('unique-context-mode-switch') as HTMLInputElement | null;\n        const showBreadcrumbSwitch = document.getElementById('show-breadcrumb-switch') as HTMLInputElement | null;\n        const showMarkdownEditorSwitch = document.getElementById('show-markdown-editor-switch') as HTMLInputElement | null;\n        const hideNewContextButtonSwitch = document.getElementById('hide-new-context-button-switch') as HTMLInputElement | null;\n        const currentSettings = state.get('userSettings');\n\n        const weekStart = parseInt(weekStartSelect?.value || '0');\n        const timezone = timezoneSelect?.value || 'UTC';\n        const dateFormat = dateFormatSelect?.value || 'DD-MM-YY';\n        const uniqueContextMode = uniqueContextModeSwitch?.checked || false;\n        const showBreadcrumb = showBreadcrumbSwitch?.checked === true;\n        const showMarkdownEditor = showMarkdownEditorSwitch?.checked === true;\n        const hideNewContextButton = hideNewContextButtonSwitch?.checked === true;\n        const theme = currentSettings.theme || 'dark';\n\n        // Show loading state\n        if (saveBtn) saveBtn.disabled = true;\n        if (cancelBtn) cancelBtn.disabled = true;\n        if (saveIcon) (saveIcon as HTMLElement).style.display = 'none';\n        if (saveSpinner) (saveSpinner as HTMLElement).style.display = 'inline-block';\n        if (saveText) saveText.textContent = 'Saving...';\n\n        try {\n            await api.updateSettings({ theme, weekStart, timezone, dateFormat, uniqueContextMode, showBreadcrumb, showMarkdownEditor, hideNewContextButton });\n\n            state.set('userSettings', { theme, weekStart, timezone, dateFormat, uniqueContextMode, showBreadcrumb, showMarkdownEditor, hideNewContextButton });\n            calendar.render();\n\n            // Show success state briefly\n            if (saveText) saveText.textContent = 'Saved!';\n            if (saveSpinner) (saveSpinner as HTMLElement).style.display = 'none';\n            if (saveIcon) {\n                (saveIcon as HTMLElement).style.display = 'inline-flex';\n                const iconEl = saveIcon.querySelector('.material-symbols-outlined');\n                if (iconEl) iconEl.textContent = 'check_circle';\n            }\n\n            // Wait a bit before closing to show success\n            await new Promise(resolve => setTimeout(resolve, 500));\n\n            ui.closeSettingsModal();\n\n            // Re-render notes list to update date format\n            ui.renderNotesList();\n\n            // Update UI based on unique context mode\n            ui.updateContextSelectorVisibility();\n\n            // Update breadcrumb and markdown editor visibility\n            ui.updateBreadcrumbVisibility();\n            ui.updateMarkdownEditorVisibility();\n\n            // Update new context button visibility\n            ui.updateNewContextButtonVisibility();\n\n            // If unique context mode is enabled, select first context\n            if (uniqueContextMode) {\n                const contextsList = state.get('contexts');\n                if (contextsList && contextsList.length > 0) {\n                    contexts.selectContext(contextsList[0].name);\n                    notes.setTodayDate();\n                    notes.loadNotesList(contextsList[0].name);\n                }\n            }\n        } catch (error) {\n            console.error('Failed to save settings:', error);\n            notifications.error('Failed to save settings');\n\n            // Reset button state on error\n            if (saveText) saveText.textContent = 'Save';\n            if (saveSpinner) (saveSpinner as HTMLElement).style.display = 'none';\n            if (saveIcon) {\n                (saveIcon as HTMLElement).style.display = 'inline-flex';\n                const iconEl = saveIcon.querySelector('.material-symbols-outlined');\n                if (iconEl) iconEl.textContent = 'check';\n            }\n        } finally {\n            // Re-enable buttons\n            if (saveBtn) saveBtn.disabled = false;\n            if (cancelBtn) cancelBtn.disabled = false;\n        }\n    };\n\n    // Onboarding modal handlers\n    (window as any).closeOnboardingModal = () => ui.closeOnboardingModal();\n\n    // Delete note modal handlers\n    (window as any).closeDeleteNoteModal = () => ui.closeDeleteNoteModal();\n\n    (window as any).confirmDeleteNote = async () => {\n        const modal = document.getElementById('delete-note-modal') as HTMLElement & { dataset: { context?: string; date?: string } } | null;\n        if (!modal) return;\n\n        const context = modal.dataset.context;\n        const dateStr = modal.dataset.date;\n\n        if (context && dateStr) {\n            // Close modal first\n            ui.closeDeleteNoteModal();\n\n            // Delete note immediately (notes module will handle UI updates)\n            await notes.deleteNote(context, dateStr);\n        }\n    };\n\n    // Edit context modal handlers\n    (window as any).showEditContextModal = (contextId: string) => {\n        const contextsList = state.get('contexts');\n        const context = contextsList.find(c => c.id === contextId);\n        if (!context) return;\n\n        const modal = document.getElementById('edit-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        const nameInput = document.getElementById('edit-context-name') as HTMLInputElement | null;\n        const colorValue = document.getElementById('edit-context-color-value') as HTMLInputElement | null;\n        const colorsContainer = document.getElementById('edit-context-colors');\n\n        if (!modal || !nameInput || !colorValue || !colorsContainer) return;\n\n        // Set values\n        nameInput.value = context.name;\n        const normalizedColor = normalizeToBulmaColor(context.color);\n        colorValue.value = normalizedColor;\n\n        // Render color buttons\n        const colors = ['text', 'link', 'primary', 'info', 'success', 'warning', 'danger'];\n        colorsContainer.innerHTML = colors.map(color => {\n            const isActive = normalizedColor === color;\n            const borderStyle = isActive ? 'border: 3px solid var(--bulma-text)' : 'border: 3px solid transparent';\n            return `\n                <button type=\"button\" class=\"button color-btn ${isActive ? 'is-active' : ''}\"\n                        data-color=\"${color}\"\n                        onclick=\"window.selectEditContextColor('${color}')\"\n                        title=\"${getColorLabel(color)}\"\n                        style=\"width: 32px; height: 32px; padding: 3px; ${borderStyle}; border-radius: 6px;\">\n                    <span style=\"display: block; width: 100%; height: 100%; background: var(--bulma-${color}); border-radius: 4px;\"></span>\n                </button>\n            `;\n        }).join('');\n\n        // Store context ID and show modal\n        modal.dataset.contextId = contextId;\n        modal.classList.add('is-active');\n    };\n\n    (window as any).selectEditContextColor = (color: string) => {\n        const colorValue = document.getElementById('edit-context-color-value') as HTMLInputElement | null;\n        if (!colorValue) return;\n\n        colorValue.value = color;\n\n        // Update button states\n        const buttons = document.querySelectorAll('#edit-context-colors .color-btn');\n        buttons.forEach(btn => {\n            const btnColor = (btn as HTMLElement).dataset.color;\n            if (btnColor === color) {\n                btn.classList.add('is-active');\n                (btn as HTMLElement).style.border = '3px solid var(--bulma-text)';\n            } else {\n                btn.classList.remove('is-active');\n                (btn as HTMLElement).style.border = '3px solid transparent';\n            }\n        });\n    };\n\n    (window as any).closeEditContextModal = () => {\n        const modal = document.getElementById('edit-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        if (modal) {\n            modal.classList.remove('is-active');\n            delete modal.dataset.contextId;\n        }\n    };\n\n    (window as any).confirmEditContext = async () => {\n        const modal = document.getElementById('edit-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        if (!modal) return;\n\n        const contextId = modal.dataset.contextId;\n        const nameInput = document.getElementById('edit-context-name') as HTMLInputElement | null;\n        const colorValue = document.getElementById('edit-context-color-value') as HTMLInputElement | null;\n\n        if (!contextId || !nameInput || !colorValue) return;\n\n        const name = nameInput.value.trim();\n        const color = colorValue.value;\n\n        if (!name) {\n            alert('Please enter a context name');\n            return;\n        }\n\n        // Close modal\n        (window as any).closeEditContextModal();\n\n        // Update context\n        await contexts.updateContext(contextId, name, color);\n\n        // Refresh UI\n        ui.renderContextsEditList();\n        ui.renderContextsSelect();\n    };\n\n    // Delete context modal handlers\n    (window as any).showDeleteContextModal = (contextId: string, contextName: string) => {\n        const modal = document.getElementById('delete-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        const nameElement = document.getElementById('delete-context-name');\n\n        if (modal && nameElement) {\n            nameElement.textContent = contextName;\n            modal.dataset.contextId = contextId;\n            modal.classList.add('is-active');\n        }\n    };\n\n    (window as any).closeDeleteContextModal = () => {\n        const modal = document.getElementById('delete-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        if (modal) {\n            modal.classList.remove('is-active');\n            delete modal.dataset.contextId;\n        }\n    };\n\n    (window as any).confirmDeleteContext = async () => {\n        const modal = document.getElementById('delete-context-modal') as HTMLElement & { dataset: { contextId?: string } } | null;\n        if (!modal) return;\n\n        const contextId = modal.dataset.contextId;\n\n        if (contextId) {\n            // Close modal first\n            (window as any).closeDeleteContextModal();\n\n            // Delete context (will also delete all its notes)\n            await contexts.deleteContext(contextId);\n\n            // Refresh UI\n            ui.renderContextsEditList();\n            ui.renderContextsSelect();\n        }\n    };\n}\n","/**\n * DOM Element Caching\n */\n\nimport type { UIElements } from './types'\n\nexport function cacheElements(): UIElements {\n    return {\n        // Sections\n        authSection: document.getElementById('auth-section'),\n        appSection: document.getElementById('app-section'),\n\n        // Context\n        contextSelect: document.getElementById('context-select') as HTMLSelectElement | null,\n        contextColorIndicator: document.getElementById('context-color-indicator'),\n\n        // Mobile context\n        mobileContextSelect: document.getElementById('mobile-context-select') as HTMLSelectElement | null,\n        mobileContextColorIndicator: document.getElementById('mobile-context-color-indicator'),\n\n        // Date\n        datePicker: document.getElementById('date-picker') as HTMLInputElement | null,\n\n        // Breadcrumb\n        breadcrumbContextName: document.getElementById('breadcrumb-context-name'),\n        breadcrumbDateName: document.getElementById('breadcrumb-date-name'),\n\n        // Editor\n        markdownEditorContainer: document.getElementById('markdown-editor-container'),\n        saveIndicator: document.getElementById('save-indicator'),\n\n        // Notes list\n        notesList: document.getElementById('notes-list'),\n\n        // User\n        userEmail: document.getElementById('user-email'),\n\n        // Time\n        currentTime: document.getElementById('current-time'),\n        currentDate: document.getElementById('current-date'),\n\n        // Mobile Time\n        mobileCurrentTime: document.getElementById('mobile-current-time'),\n        mobileCurrentDate: document.getElementById('mobile-current-date'),\n        mobileSelectedNoteDate: document.getElementById('mobile-selected-note-date'),\n\n        // Modals\n        contextModal: document.getElementById('context-modal'),\n        settingsModal: document.getElementById('settings-modal'),\n        onboardingModal: document.getElementById('onboarding-modal'),\n\n        // Sync status\n        syncStatus: document.getElementById('sync-status'),\n        syncStatusText: document.getElementById('sync-status-text'),\n\n        // Theme\n        themeToggleMenu: document.getElementById('theme-toggle-menu'),\n        themeToggleSwitch: document.getElementById('theme-toggle-switch') as HTMLInputElement | null,\n\n        // Settings\n        weekStartSelect: document.getElementById('week-start-select') as HTMLSelectElement | null,\n        timezoneSelect: document.getElementById('timezone-select') as HTMLSelectElement | null,\n\n        // Mobile navigation\n        mobileNotesToggle: document.getElementById('mobile-notes-toggle'),\n        mobileCalendarToggle: document.getElementById('mobile-calendar-toggle'),\n        sidebar: document.querySelector('.sidebar') as HTMLElement | null,\n        calendarPanel: document.querySelector('.calendar-panel') as HTMLElement | null,\n        sidebarOverlay: document.getElementById('sidebar-overlay'),\n        calendarOverlay: document.getElementById('calendar-overlay'),\n        sidebarClose: document.getElementById('sidebar-close'),\n        calendarClose: document.getElementById('calendar-close'),\n    }\n}\n","/**\n * Main Application Entry Point\n * Initializes and coordinates all modules\n */\n\nimport { state } from '@utils/state'\nimport { cache } from '@utils/cache'\nimport { events, EVENT } from '@utils/events'\nimport { SyncQueue } from '@utils/sync'\nimport { api } from '@services/api'\nimport { auth } from '@services/auth'\nimport { notes } from '@services/notes'\nimport { contexts } from '@services/contexts'\nimport { calendar } from '@components/Calendar'\nimport { markdownEditor } from '@components/Editor'\nimport { notifications } from '@components/Notifications'\nimport { ui } from '@components/UI'\n\ndeclare global {\n  interface Window {\n    __APP__?: Application\n    __GOOGLE_CLIENT_ID__?: string\n    __DEBUG__?: any\n  }\n}\n\nclass Application {\n  private syncQueue: SyncQueue | null = null\n\n  async init(googleClientId: string): Promise<void> {\n    console.log('[MAIN] Initializing with client ID:', googleClientId)\n\n    // Initialize cache\n    try {\n      await cache.init()\n      console.log('Cache initialized')\n    } catch (err) {\n      console.warn('IndexedDB not available', err)\n    }\n\n    // Initialize sync queue\n    this.syncQueue = new SyncQueue(api)\n\n    // Setup event handlers\n    this.setupEventHandlers()\n\n    // Initialize UI Manager\n    ui.init()\n\n    // Initialize Markdown Editor\n    await markdownEditor.init('markdown-editor-container', (content: string) => {\n      notes.handleNoteInput(content)\n    })\n\n    // Check authentication\n    const isAuthenticated = await auth.checkAuth()\n\n    if (isAuthenticated) {\n      await this.showApp()\n    } else {\n      // Hide app and show auth section\n      const appSection = document.getElementById('app-section')\n      const authSection = document.getElementById('auth-section')\n      if (appSection) appSection.classList.remove('visible')\n      if (authSection) authSection.classList.add('visible')\n    }\n\n    // Make body visible after determining which section to show\n    document.body.classList.add('loaded')\n\n    // Initialize Google OAuth client (async, will wait for script to load)\n    auth.initGoogleClient(googleClientId).catch(error => {\n      console.error('[MAIN] Failed to initialize Google client:', error)\n    })\n  }\n\n  private setupEventHandlers(): void {\n    // Sync events\n    events.on('sync-add' as any, (e: CustomEvent) => {\n      this.syncQueue?.add(e.detail)\n    })\n\n    events.on('sync-force' as any, () => {\n      if (this.syncQueue && this.syncQueue.getPendingCount() > 0) {\n        this.syncQueue.process()\n      }\n    })\n\n    events.on(EVENT.SYNC_STATUS, (e: CustomEvent) => {\n      ui.updateSyncStatus(e.detail)\n    })\n\n    events.on(EVENT.OPERATION_SYNCED, (e: CustomEvent) => {\n      console.log('Synced to server:', e.detail.type)\n    })\n\n    events.on(EVENT.SYNC_ERROR, (e: CustomEvent) => {\n      const { error, maxRetriesReached, retryCount, maxRetries } = e.detail\n\n      if (maxRetriesReached) {\n        notifications.error(\n          'Failed to sync note after multiple attempts. Please check your connection.',\n          {\n            title: 'Sync Failed',\n            duration: 5000\n          }\n        )\n      } else if (retryCount) {\n        console.warn(`Sync retry ${retryCount}/${maxRetries}:`, error)\n      }\n    })\n\n    // Session expired handling\n    events.on('session-expired' as any, (e: CustomEvent) => {\n      if (e.detail.isNoteRequest) {\n        notifications.warning(\n          'Session expired. Your notes are saved locally and will sync when you sign in again.',\n          {\n            title: 'Session Expired',\n            duration: 10000\n          }\n        )\n      }\n    })\n\n    // Note events\n    events.on(EVENT.NOTE_LOADED, (e: CustomEvent) => {\n      markdownEditor.setContent(e.detail.content)\n    })\n\n    events.on(EVENT.NOTE_SAVED, () => {\n      console.log('[Note] Saved')\n    })\n\n    // Context events\n    events.on(EVENT.CONTEXT_CHANGED, async (e: CustomEvent) => {\n      const context = e.detail.context\n\n      // Force flush any pending editor changes\n      markdownEditor.forceFlush()\n\n      // Wait for flush to process\n      await new Promise(resolve => setTimeout(resolve, 100))\n\n      if (context) {\n        let selectedDate = state.get('selectedDate')\n        if (!selectedDate) {\n          selectedDate = (state as any).get('today') as string\n        }\n\n        // Load notes list for context\n        await notes.loadNotesList(context)\n\n        calendar.render()\n        if (selectedDate) {\n          notes.ensureNoteInList(context, selectedDate)\n          await notes.loadNote(context, selectedDate)\n        }\n      } else {\n        markdownEditor.setContent('')\n      }\n    })\n\n    // Date events\n    events.on(EVENT.DATE_CHANGED, async (e: CustomEvent) => {\n      const dateStr = e.detail.date\n      const context = state.get('selectedContext')\n\n      // Force flush pending changes\n      markdownEditor.forceFlush()\n      await new Promise(resolve => setTimeout(resolve, 100))\n\n      if (context) {\n        const currentContext = state.get('selectedContext')\n        const currentDate = state.get('selectedDate')\n\n        if (currentContext !== context || currentDate !== dateStr) {\n          console.log('[MAIN] Context/date changed during handler, skipping')\n          return\n        }\n\n        await notes.loadNote(context, dateStr)\n      }\n    })\n\n    // Auth events\n    events.on('auth-success' as any, async () => {\n      await this.showApp()\n    })\n\n    events.on('auth-logout' as any, () => {\n      markdownEditor.setContent('')\n    })\n\n    // UI events\n    events.on(EVENT.SHOW_ERROR, (e: CustomEvent) => {\n      if (e.detail.message) {\n        notifications.error(e.detail.message)\n      }\n    })\n\n    events.on(EVENT.SHOW_SUCCESS, (e: CustomEvent) => {\n      if (e.detail.message) {\n        notifications.success(e.detail.message)\n      }\n    })\n  }\n\n  private async showApp(): Promise<void> {\n    console.log('[MAIN] showApp called')\n\n    try {\n      // Load contexts\n      console.log('[MAIN] Loading contexts...')\n      await contexts.loadContexts()\n\n      // Sync server time (MUST complete before setting today's date or showing UI)\n      await this.syncServerTime()\n\n      // Set today's date\n      notes.setTodayDate()\n\n      // Render calendar\n      calendar.render()\n\n      // Auto-select last used context\n      const lastContext = contexts.restoreLastContext()\n      console.log('[MAIN] Last context:', lastContext)\n\n      if (lastContext) {\n        // Load notes list\n        await notes.loadNotesList(lastContext)\n\n        // Get today's date\n        const todayDate = (state as any).get('today') as string\n\n        // Ensure today's note exists in the list\n        notes.ensureNoteInList(lastContext, todayDate)\n\n        // Load today's note (create if doesn't exist)\n        await notes.loadNote(lastContext, todayDate)\n      }\n\n      // Show app UI and onboarding modal if needed (clock will start here with correct time)\n      ui.showApp()\n\n      console.log('[MAIN] App initialization complete')\n    } catch (error) {\n      console.error('[MAIN] Error initializing app:', error)\n      notifications.error('Failed to initialize app. Please refresh the page.', {\n        title: 'Initialization Error',\n        duration: 0\n      })\n    }\n  }\n\n  private async syncServerTime(): Promise<void> {\n    try {\n      const settings = state.get('userSettings')\n      const timezone = settings.timezone || 'UTC'\n      const clientTime = Date.now()\n\n      const data = await api.getServerTime(timezone)\n      const serverTime = (data.timestamp || 0) * 1000 // Backend returns timestamp, not offset\n      const roundTripTime = Date.now() - clientTime\n      const offset = serverTime - clientTime + roundTripTime / 2\n\n      console.log('[MAIN] Server time synced. Offset:', offset, 'ms')\n      state.set('serverTimeOffset', offset)\n    } catch (error) {\n      console.error('Failed to sync server time:', error)\n      // Set offset to 0 as fallback\n      state.set('serverTimeOffset', 0)\n    }\n\n    // Resync every minute\n    setTimeout(() => this.syncServerTime(), 60000)\n  }\n\n}\n\n// Initialize app when DOM is ready\nconst app = new Application()\n\n// Expose for window.onload and inline scripts\nwindow.__APP__ = app\n\n// Expose modules for debugging (development only)\nif (typeof window !== 'undefined' && window.location.hostname === 'localhost') {\n  window.__DEBUG__ = {\n    app,\n    state,\n    events,\n    notes,\n    contexts,\n    calendar,\n    auth,\n    api,\n    cache,\n    markdownEditor,\n    notifications,\n    ui\n  }\n  console.log('Debug mode enabled. Access modules via window.__DEBUG__')\n}\n\n// Auto-initialize\n;(async () => {\n  // Wait for template to inject GoogleClientID\n  await new Promise(resolve => setTimeout(resolve, 0))\n\n  // Get client ID from template (will be replaced by Jet)\n  const clientIdMeta = document.querySelector('meta[name=\"google-client-id\"]')\n  const googleClientId = clientIdMeta?.getAttribute('content') || window.__GOOGLE_CLIENT_ID__\n\n  if (googleClientId) {\n    await app.init(googleClientId)\n  } else {\n    console.error('Google Client ID not found')\n  }\n})()\n\nexport default app\n"],"names":["api","request","endpoint","options","response","fetch","headers","credentials","ok","data","json","catch","status","state","get","isNoteRequest","includes","message","events","emit","EVENT","SHOW_ERROR","set","Error","error","checkAuth","console","authenticated","login","accessToken","expiresIn","this","method","body","JSON","stringify","access_token","expires_in","loginWithCode","code","logout","getContexts","createContext","updateContext","id","deleteContext","getNote","context","date","encodeURIComponent","saveNote","getNotesList","limit","offset","deleteNote","encodedContext","encodedDate","updateSettings","settings","getServerTime","timezone","auth","codeClient","initializationPromise","user","update","currentUser","userSettings","theme","weekStart","dateFormat","uniqueContextMode","showBreadcrumb","showMarkdownEditor","hideNewContextButton","initGoogleClient","clientId","Promise","resolve","reject","checkGoogleLoaded","window","google","accounts","oauth2","initCodeClient","client_id","scope","ux_mode","callback","handleAuthCodeResponse","log","setTimeout","loader","document","getElementById","classList","remove","success","hasNoContexts","signIn","add","requestCode","signOut","localStorage","clear","sessionStorage","e","location","href","clearAllCaches","dbName","deleteRequest","indexedDB","deleteDatabase","onsuccess","onerror","warn","cacheNames","caches","keys","all","map","cacheName","delete","navigator","registrations","serviceWorker","getRegistrations","registration","unregister","cookie","split","forEach","eqPos","indexOf","name","substring","trim","hostname","signInWithGoogle","notes","saveTimeout","currentNoteContent","currentLoadToken","currentSelectToken","loadNote","loadToken","cachedNote","cache","content","NOTE_LOADED","note","serverUpdatedAt","updated_at","Date","getTime","cachedUpdatedAt","length","now","toISOString","NOTE_SAVED","updateNoteInList","loadNotesList","notesWithDates","serverNotes","cachedNotes","getNotesByContext","noteMap","Map","has","mergedNotes","Array","from","values","sort","a","b","localeCompare","refreshNotesList","updatedNotes","ensureNoteInList","some","newNote","user_id","created_at","updatedNotesWithDates","handleNoteInput","clearTimeout","capturedContext","capturedDate","currentContext","currentDate","selectDate","dateStr","selectToken","dateParts","year","parseInt","month","selectedDate","currentCalendarMonth","currentCalendarYear","DATE_CHANGED","setTodayDate","Number","getCurrentNoteContent","filter","d","nextNote","contexts","loadContexts","cachedContexts","saveContexts","CONTEXTS_LOADED","onLine","color","newContext","updatedContexts","contextId","currentContexts","c","selectedContext","oldContext","find","setItem","SHOW_SUCCESS","selectContext","contextName","CONTEXT_CHANGED","getSelectedContext","getContextColor","restoreLastContext","firstContext","lastContext","getItem","contextExists","calendar","monthNames","dayNamesDefault","render","today","dayNames","slice","monthYearEl","textContent","adjustedFirstDay","getDay","daysInMonth","getDate","daysInPrevMonth","grid","html","day","join","i","String","padStart","classes","push","totalCells","remainingCells","innerHTML","querySelectorAll","dayEl","addEventListener","dataset","prevMonth","nextMonth","goToToday","markdownEditor","container","editor","editorElement","onChangeCallback","isUpdating","updateTimeout","contentVersion","init","containerId","onChange","ensureQuillLoaded","loadQuill","initQuill","Quill","css","createElement","rel","head","appendChild","script","src","onload","modules","toolbar","header","list","placeholder","formats","on","markdown","getMarkdown","root","getText","applyToolbarVisibility","querySelector","style","display","enable","delta","getContents","currentList","listCounter","ops","op","insert","text","attrs","attributes","trimEnd","repeat","pop","line","lastIndexOf","blockquote","formattedText","bold","italic","strike","link","setContent","currentVersion","disable","markdownToDelta","setContents","setText","lines","index","headerMatch","match","level","bulletMatch","parseInlineMarkdown","numberedMatch","taskMatch","quoteMatch","startsWith","regex","lastIndex","exec","getContent","setDisabled","disabled","pointerEvents","opacity","editorRoot","setPlaceholderMessage","then","focus","forceFlush","hasPendingChanges","notifications","queue","maxVisible","defaultDuration","constructor","className","setAttribute","show","type","title","duration","dismissible","onAction","actionLabel","Math","random","notification","element","children","warning","info","escapeHtml","closeBtn","dismiss","actionBtn","requestAnimationFrame","timeout","parentNode","removeChild","processQueue","visibleCount","next","shift","clearAll","div","normalizeToBulmaColor","ui","elements","lastKnownDate","INITIAL_RENDER_COUNT","renderedNotesCount","clockStarted","authSection","appSection","contextSelect","contextColorIndicator","mobileContextSelect","mobileContextColorIndicator","datePicker","breadcrumbContextName","breadcrumbDateName","markdownEditorContainer","saveIndicator","notesList","userEmail","currentTime","mobileCurrentTime","mobileCurrentDate","mobileSelectedNoteDate","contextModal","settingsModal","onboardingModal","syncStatus","syncStatusText","themeToggleMenu","themeToggleSwitch","weekStartSelect","timezoneSelect","mobileNotesToggle","mobileCalendarToggle","sidebar","calendarPanel","sidebarOverlay","calendarOverlay","sidebarClose","calendarClose","setupEventListeners","setupStateSubscriptions","setupUserDropdown","setupMobileNavigation","editorFullscreenBtn","openFullscreenNote","editorDeleteBtn","dayName","toLocaleDateString","weekday","timeZone","yy","mm","dd","formattedDateStr","formattedDate","showDeleteNoteModal","target","value","async","preventDefault","newTheme","documentElement","getAttribute","setTheme","err","checked","setupKeyboardShortcuts","modKey","platform","toUpperCase","metaKey","ctrlKey","key","deleteModal","contains","closeDeleteNoteModal","closeAllModals","userDropdown","userDropdownButton","settingsMenuItem","signoutMenuItem","stopPropagation","toggle","showSettingsModal","subscribe","renderContextsSelect","subscribeMany","renderNotesList","_context","updateBreadcrumb","newDate","updateDatePickerDisplay","updateEditorDeleteButton","updateContextIndicator","updateEditorState","email","updateContextSelectorVisibility","updateBreadcrumbVisibility","updateMarkdownEditorVisibility","updateNewContextButtonVisibility","contextsList","optionsHTML","opt","selectedIndex","normalizedColor","background","notesToRender","hasMore","min","loadMoreBtn","updateSaveIndicator","updateSyncStatus","pending","syncing","updateThemeIcon","themeIcon","showApp","_skipAnimation","getComputedStyle","startClock","hideApp","showError","msg","showSuccess","showWarning","showInfo","showContextModal","nameInput","colorInput","hiddenInputId","hiddenInput","buttons","button","newButton","cloneNode","parent","replaceChild","btn","border","borderRadius","setupColorButtons","colorButtons","selectColorButton","closeContextModal","dateFormatSelect","uniqueContextModeSwitch","showBreadcrumbSwitch","showMarkdownEditorSwitch","hideNewContextButtonSwitch","accordionContent","accordionIcon","iconElement","renderContextsEditList","saveBtn","saveIcon","saveSpinner","saveText","closeSettingsModal","closeOnboardingModal","modal","updateCurrentDateTime","setInterval","serverTimeOffset","locale","language","languages","timeOptions","hour","minute","second","hour12","dateOptions","timeString","toLocaleTimeString","dateString","mobileDateOptions","mobileDateString","displayElement","desktopContextContainer","mobileContextContainer","breadcrumb","mainSection","removeAttribute","desktopNewContextBtn","mobileNewContextBtn","ctx","_index","replace","toggleMobileSidebar","toggleMobileCalendar","closeMobileSidebar","closeMobileCalendar","tagName","innerWidth","overflow","dateEl","editorEl","fullscreenQuill","readOnly","fontSize","lineHeight","escapeHandler","closeFullscreenNote","removeEventListener","showNewContextModal","saveSettings","cancelBtn","currentSettings","iconEl","confirmDeleteNote","showEditContextModal","colorValue","colorsContainer","isActive","borderStyle","primary","danger","getColorLabel","selectEditContextColor","closeEditContextModal","confirmEditContext","alert","showDeleteContextModal","nameElement","closeDeleteContextModal","confirmDeleteContext","app","syncQueue","googleClientId","SyncQueue","setupEventHandlers","detail","getPendingCount","process","SYNC_STATUS","OPERATION_SYNCED","SYNC_ERROR","maxRetriesReached","retryCount","maxRetries","syncServerTime","todayDate","clientTime","serverTime","timestamp","__APP__","__DEBUG__","clientIdMeta","__GOOGLE_CLIENT_ID__"],"mappings":"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"}