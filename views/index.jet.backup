<!DOCTYPE html>
<html lang="en" data-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
    <title>dailynotes.dev - Daily work notes in your Drive</title>
    <meta name="description" content="Minimalist offline-first PWA for daily work notes. Organize by context, sync with Google Drive.">
    <link rel="manifest" href="/static/manifest.json">
    <meta name="theme-color" content="#485fc7" media="(prefers-color-scheme: light)">
    <meta name="theme-color" content="#0d1117" media="(prefers-color-scheme: dark)">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <link rel="apple-touch-icon" href="/static/icons/apple-touch-icon.png">
    <link rel="icon" href="/static/icons/icon-72x72.png">
    <script>
        const theme = localStorage.getItem('theme') || (matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        document.documentElement.setAttribute('data-theme', theme);
    </script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@1.0.2/css/bulma.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap">
    <style>
        :root {
            --bulma-primary-h: 229deg;
            --bulma-primary-s: 53%;
            --bulma-primary-l: 53%;
        }


        html, body { height: 100%; }
        body { visibility: hidden; }
        body.loaded { visibility: visible; }
        #auth-section {
            display: none;
            height: 100%;
            opacity: 1;
            transition: opacity 0.4s ease;
        }
        #auth-section.visible { display: block; }
        #auth-section.fade-out {
            opacity: 0;
            pointer-events: none;
        }
        #app-section {
            display: none;
            height: 100%;
            opacity: 0;
            transition: opacity 0.4s ease;
        }
        #app-section.visible { display: block; }
        #app-section.fade-in {
            opacity: 1;
        }
        .landing-hero {
            background: linear-gradient(135deg, var(--bulma-scheme-main) 0%, var(--bulma-scheme-main-bis) 100%);
            position: relative;
        }
        .landing-hero::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 30% 40%, rgba(72, 95, 199, 0.08) 0%, transparent 60%);
            pointer-events: none;
        }
        .landing-hero .hero-head {
            position: relative;
            z-index: 2;
        }
        .landing-hero .hero-body {
            position: relative;
            z-index: 1;
        }
        .landing-hero .navbar {
            background: transparent !important;
        }
        .landing-hero .navbar-brand .navbar-item {
            font-weight: 600;
            font-size: 1.25rem;
            letter-spacing: -0.02em;
            color: var(--bulma-text);
            transition: color 0.2s ease;
        }
        .landing-hero .navbar-brand .navbar-item:hover {
            color: var(--bulma-primary);
        }
        .hero-title {
            font-size: 3.5rem !important;
            font-weight: 800 !important;
            line-height: 1.1 !important;
            margin-bottom: 1.5rem !important;
            color: var(--bulma-text);
            letter-spacing: -0.03em;
            text-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }
        .hero-subtitle {
            max-width: 640px;
            margin: 0 auto 2.5rem;
            opacity: 0.75;
            line-height: 1.6;
            font-size: 1.375rem;
            font-weight: 400;
        }
        [data-theme="dark"] .hero-title {
            text-shadow: 0 2px 12px rgba(0, 0, 0, 0.3);
        }
        [data-theme="dark"] .hero-subtitle {
            opacity: 0.8;
        }
        .cta-button {
            font-weight: 500 !important;
            border-radius: 4px !important;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24) !important;
            transition: all 0.2s ease !important;
            border: 1px solid transparent !important;
            padding: 0 16px !important;
            height: 48px !important;
            min-width: 200px !important;
            font-size: 14px !important;
            font-family: 'Roboto', Arial, sans-serif !important;
            color: white !important;
            background-color: #4285f4 !important;
            display: inline-flex !important;
            align-items: center !important;
            justify-content: center !important;
        }
        .cta-button:hover {
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.24), 0 4px 8px rgba(0, 0, 0, 0.16) !important;
            background-color: #357ae8 !important;
            color: white !important;
        }
        .cta-button:active {
            background-color: #2a66c8 !important;
        }
        .cta-button span {
            color: white !important;
        }
        .cta-button .icon {
            margin-right: 12px;
            background: white;
            border-radius: 2px;
            padding: 1px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        .cta-button svg {
            width: 18px;
            height: 18px;
            display: block;
        }
        [data-theme="dark"] .cta-button {
            background-color: #4285f4 !important;
        }
        [data-theme="dark"] .cta-button:hover {
            background-color: #357ae8 !important;
        }
        .button.is-primary {
            color: white !important;
        }
        .button.is-primary:hover,
        .button.is-primary:focus {
            color: white !important;
        }
        .button.is-primary span {
            color: white !important;
        }
        .google-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.625rem;
            padding: 0.875rem 1.75rem;
            border: 1px solid var(--bulma-border);
            border-radius: 8px;
            background: var(--bulma-scheme-main);
            color: var(--bulma-text);
            font-weight: 500;
            font-size: 0.9375rem;
            transition: all 0.2s ease;
            cursor: pointer;
        }
        .google-btn:hover {
            border-color: var(--bulma-primary);
            background: rgba(72, 95, 199, 0.05);
            transform: translateY(-1px);
        }
        .google-icon {
            width: 18px;
            height: 18px;
        }
        .landing-footer {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            width: 100%;
            padding: 0.875rem 1.5rem;
            background: rgba(0, 0, 0, 0.04);
            z-index: 10;
            backdrop-filter: blur(12px);
            border-top: 1px solid rgba(128, 128, 128, 0.15);
        }
        [data-theme="dark"] .landing-footer {
            background: rgba(255, 255, 255, 0.04);
            border-top: 1px solid rgba(255, 255, 255, 0.12);
        }
        .landing-footer p {
            font-size: 0.8125rem;
            opacity: 0.7;
            margin: 0;
            font-weight: 450;
        }
        .landing-footer a {
            color: var(--bulma-primary);
            text-decoration: none;
            opacity: 0.95;
            transition: all 0.2s ease;
            font-weight: 600;
        }
        .landing-footer a:hover {
            opacity: 1;
            text-decoration: underline;
            color: var(--bulma-primary);
        }
        [data-theme="dark"] .landing-footer a {
            opacity: 1;
        }
        .material-symbols-outlined {
            font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 24;
            user-select: none;
        }
        .icon .material-symbols-outlined {
            font-size: 1.25rem;
        }
        .button.is-small .material-symbols-outlined {
            font-size: 1rem;
        }
        .modal-card-head {
            box-shadow: none !important;
            border-bottom: 1px solid var(--bulma-border);
        }
        .modal-card-foot {
            box-shadow: none !important;
            border-top: 1px solid var(--bulma-border);
            gap: 0.75rem;
        }
        #theme-toggle-menu {
            border: none !important;
            background: transparent !important;
            box-shadow: none !important;
            text-decoration: none !important;
        }
        #theme-toggle-menu:hover {
            background: transparent !important;
            color: var(--bulma-primary) !important;
        }
        #theme-toggle-menu:focus {
            box-shadow: none !important;
        }
        #theme-toggle-menu .material-symbols-outlined {
            display: block;
        }
        .app-layout { display: grid; grid-template-columns: 280px 1fr 340px; height: 100vh; }
        .sidebar { display: flex; flex-direction: column; height: 100%; }
        .sidebar-content { flex: 1; overflow-y: auto; padding: 1rem; }
        .menu-list li + li { margin-top: 0.25rem; }
        .menu-label {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            font-weight: 500;
            font-size: 0.75rem;
            letter-spacing: 0.05em;
        }
        .menu-list a {
            transition: all 0.2s ease;
            position: relative;
            font-size: 0.875rem;
            padding: 0.5rem 0.75rem;
            border-radius: 4px;
            color: var(--bulma-text);
            opacity: 0.7;
            border-left: 2px solid transparent;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            font-weight: 400;
        }
        .menu-list a:hover {
            opacity: 1;
            background: rgba(128, 128, 128, 0.1);
        }
        .menu-list a.is-active {
            opacity: 1;
            background: rgba(128, 128, 128, 0.15);
            border-left-color: var(--bulma-primary);
        }
        .main-section { overflow-y: auto; }
        .main-section .container { padding: 0; max-width: none; }
        .editor-wrapper { width: calc(100% - 3rem); min-height: calc(100vh - 8rem); margin: 2rem 1.5rem 1.5rem 1.5rem; background: var(--bulma-scheme-main-bis); border-radius: 0.5rem; }
        .editor-textarea { width: 100%; min-height: calc(100vh - 8rem); font-family: 'JetBrains Mono', 'SF Mono', Monaco, 'Cascadia Code', monospace; resize: none; overflow: hidden; font-size: 0.9375rem; line-height: 1.6; border: none; padding: 1.5rem; background: transparent; color: var(--bulma-text); border-radius: 0; outline: none; }
        .save-indicator { font-size: 0.875rem; opacity: 0.7; }
        .save-indicator.saving { color: var(--bulma-primary); }
        .save-indicator.saved { color: var(--bulma-success); }
        .sync-status { position: fixed; bottom: 1rem; right: 1rem; background: var(--bulma-scheme-main); padding: 0.75rem 1rem; border-radius: 0.5rem; box-shadow: 0 2px 8px rgba(0,0,0,0.1); font-size: 0.875rem; display: none; align-items: center; gap: 0.5rem; z-index: 100; }
        .sync-status.visible { display: flex; }
        .sync-status .spinner { width: 16px; height: 16px; border: 2px solid var(--bulma-primary-light); border-top-color: var(--bulma-primary); border-radius: 50%; animation: spin 0.8s linear infinite; }
        @keyframes spin { to { transform: rotate(360deg); } }
        .sync-status.synced { color: var(--bulma-success); }
        .sync-status.error { color: var(--bulma-danger); }
        .calendar-panel { 
            display: flex; 
            flex-direction: column; 
            overflow-y: auto; 
        }
        .calendar-panel .content { 
            margin: 0; 
            padding: 1.5rem; 
            flex: 1; 
        }
        .calendar-panel .user-settings-btn {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--bulma-border);
            background: var(--bulma-scheme-main-bis);
        }
        .calendar-grid { display: grid; grid-template-columns: repeat(7, 1fr); gap: 0.25rem; margin-top: 1rem; }
        .calendar-day-header { text-align: center; font-size: 0.6875rem; font-weight: 700; padding: 0.25rem 0; opacity: 0.7; text-transform: uppercase; }
        .calendar-day { text-align: center; padding: 0.625rem; cursor: pointer; font-size: 0.875rem; aspect-ratio: 1; display: flex; align-items: center; justify-content: center; position: relative; transition: all 0.2s ease; border-radius: 50%; }
        .calendar-day:hover:not(.other-month) { background: rgba(72, 95, 199, 0.15); transform: scale(1.05); }
        .calendar-day.other-month { opacity: 0.3; cursor: default; }
        .calendar-day.today::after { content: ''; position: absolute; bottom: 4px; left: 50%; transform: translateX(-50%); width: 5px; height: 5px; border-radius: 50%; background: #10b981; }
        .calendar-day.selected { background: var(--bulma-primary); color: var(--bulma-primary-invert); font-weight: 700; }
        .calendar-day.has-note::after { content: ''; position: absolute; bottom: 4px; left: 50%; transform: translateX(-50%); width: 5px; height: 5px; border-radius: 50%; background: var(--bulma-primary); }
        .calendar-day.selected.has-note::after { background: var(--bulma-primary-invert); }
        .calendar-day.today.has-note::after { background: #10b981; box-shadow: 0 0 0 1px var(--bulma-primary), 0 0 0 2px #10b981; }
        .controls { display: none; }
        @media (max-width: 1024px) {
            .app-layout { grid-template-columns: 280px 1fr; }
            .calendar-panel { display: none; }
            .controls { display: flex; gap: 1rem; margin-bottom: 1rem; }
        }
        @media (max-width: 768px) {
            .app-layout { grid-template-columns: 1fr; }
            .sidebar { display: none; }
            .landing-hero .navbar-brand .navbar-item {
                font-size: 1.125rem;
            }
            .hero-title {
                font-size: 2.25rem !important;
                line-height: 1.15 !important;
            }
            .hero-subtitle {
                font-size: 1.125rem !important;
                margin-bottom: 2rem !important;
            }
            .google-btn {
                padding: 0.75rem 1.5rem;
                font-size: 0.875rem;
            }
            .cta-button {
                padding: 0 12px !important;
                height: 44px !important;
                min-width: 180px !important;
                font-size: 13px !important;
            }
            .cta-button .icon {
                margin-right: 10px;
                padding: 1px;
            }
            .cta-button svg {
                width: 16px;
                height: 16px;
            }
            .landing-footer {
                padding: 0.625rem 1rem;
            }
            .landing-footer p {
                font-size: 0.75rem;
            }
        }
        .context-select-wrapper { position: relative; }
        .context-color-indicator { position: absolute; left: 12px; top: 50%; transform: translateY(-50%); width: 12px; height: 12px; border-radius: 50%; background: var(--bulma-grey-light); transition: background 0.2s ease; z-index: 1; pointer-events: none; box-shadow: 0 0 0 2px var(--bulma-scheme-main); }
        .context-select { width: 100%; padding: 0.625rem 1rem 0.625rem 2.25rem; font-size: 1rem; border: 1px solid var(--bulma-border); border-radius: 4px; background: var(--bulma-scheme-main); color: var(--bulma-text); cursor: pointer; transition: all 0.2s ease; appearance: none; background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%23666' d='M6 9L1 4h10z'/%3E%3C/svg%3E"); background-repeat: no-repeat; background-position: right 0.75rem center; }
        .context-select:hover { border-color: var(--bulma-primary); background-color: var(--bulma-scheme-main-ter); }
        .context-select:focus { outline: none; border-color: var(--bulma-primary); box-shadow: 0 0 0 0.125em hsla(var(--bulma-primary-h), var(--bulma-primary-s), var(--bulma-primary-l), 0.25); background-color: var(--bulma-scheme-main); }
        .context-select option { padding: 0.5rem; background: var(--bulma-scheme-main); color: var(--bulma-text); }
        [data-theme="dark"] .context-select { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%23aaa' d='M6 9L1 4h10z'/%3E%3C/svg%3E"); }
        .theme-switch { position: relative; display: inline-block; width: 52px; height: 28px; }
        .theme-switch input { opacity: 0; width: 0; height: 0; }
        .slider { position: absolute; cursor: pointer; inset: 0; background-color: var(--bulma-border); border-radius: 28px; transition: 0.3s; }
        .slider:before { position: absolute; content: ""; height: 20px; width: 20px; left: 4px; bottom: 4px; background-color: white; border-radius: 50%; transition: 0.3s; }
        input:checked + .slider { background-color: var(--bulma-primary); }
        input:checked + .slider:before { transform: translateX(24px); }
    </style>
</head>
<body>
    <section id="auth-section">
        <section class="hero is-fullheight landing-hero">
            <div class="hero-head">
                <nav class="navbar">
                    <div class="container">
                        <div class="navbar-brand">
                            <a class="navbar-item" href="/">
                                <strong>dailynotes.dev</strong>
                            </a>
                        </div>
                    </div>
                </nav>
            </div>

            <div class="hero-body">
                <div class="container">
                    <div class="columns is-vcentered">
                        <div class="column is-8 is-offset-2 has-text-centered">
                            <h1 class="title is-1 hero-title">
                                Daily notes that<br>live in your Drive
                            </h1>
                            <p class="subtitle is-4 hero-subtitle">
                                A minimalist, offline-first workspace for your daily work notes. Organize by context, sync automatically.
                            </p>
                            <div class="buttons is-centered">
                                <button onclick="signInWithGoogle()" class="cta-button">
                                    <span class="icon">
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                            <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                                            <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                                            <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                                            <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                                        </svg>
                                    </span>
                                    <span>Sign in with Google</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <footer class="landing-footer">
            <div class="content has-text-centered">
                <p>
                    Built by <a href="https://github.com/gmoqa" target="_blank" rel="noopener">@gmoqa</a>. Open source under the MIT License.
                </p>
            </div>
        </footer>
    </section>

    <section id="app-section">
        <div class="app-layout">
            <aside class="sidebar" style="background: var(--bulma-scheme-main-bis);">
                <div class="p-4">
                    <div class="field">
                        <div class="control context-select-wrapper">
                            <div class="context-color-indicator" id="context-color-indicator"></div>
                            <select id="context-select" class="context-select" required>
                                <option value="">Select context...</option>
                            </select>
                        </div>
                    </div>
                    <button onclick="showNewContextModal()" class="button is-primary is-small is-fullwidth" style="color: white;">
                        <span class="icon">
                            <span class="material-symbols-outlined">add</span>
                        </span>
                        <span>New context</span>
                    </button>
                </div>

                <div class="sidebar-content">
                    <aside class="menu">
                        <p class="menu-label">Notes</p>
                        <ul class="menu-list" id="notes-list">
                            <li class="has-text-centered py-6 has-text-grey-light">Select a context to view notes</li>
                        </ul>
                    </aside>
                </div>
            </aside>

            <section class="main-section section">
                <div class="container is-fluid">
                    <div class="controls">
                        <input type="date" id="date-picker" class="input" />
                    </div>
                    <div class="editor-wrapper">
                        <textarea id="note-editor" class="editor-textarea" placeholder="Select a context to start writing notes..." disabled></textarea>
                    </div>
                    <div class="save-indicator px-5 pb-4" id="save-indicator"></div>
                </div>
            </section>

            <aside class="calendar-panel" style="background: var(--bulma-scheme-main-bis);">
                <div class="content">
                    <div class="mb-4">
                        <div class="is-flex is-justify-content-space-between is-align-items-center">
                            <div>
                                <p class="title is-4 mb-1" id="current-time">00:00:00</p>
                                <p class="subtitle is-6 mb-0 has-text-grey" id="current-date">Loading...</p>
                            </div>
                            <button id="theme-toggle-menu" class="button" style="font-size: 1.5rem; padding: 0.5rem;" title="Toggle theme">
                                <span class="material-symbols-outlined">dark_mode</span>
                            </button>
                        </div>
                    </div>
                    <hr>
                    <div class="is-flex is-justify-content-space-between is-align-items-center mb-4">
                        <button class="button is-small is-ghost" id="prev-month">
                            <span class="material-symbols-outlined">chevron_left</span>
                        </button>
                        <p class="title is-6 mb-0" id="calendar-month-year"></p>
                        <button class="button is-small is-ghost" id="next-month">
                            <span class="material-symbols-outlined">chevron_right</span>
                        </button>
                    </div>
                    <div class="calendar-grid" id="calendar-grid"></div>
                </div>
                <div class="user-settings-btn">
                    <button onclick="showSettingsModal()" class="button is-small is-fullwidth">
                        <span class="icon is-small">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="12" height="12">
                                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                            </svg>
                        </span>
                        <span id="user-email">Loading...</span>
                    </button>
                </div>
            </aside>
        </div>
    </section>

    <div id="sync-status" class="sync-status">
        <div class="spinner"></div>
        <span id="sync-status-text">Syncing...</span>
    </div>

    <div class="modal" id="context-modal">
        <div class="modal-background" onclick="closeContextModal()"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">New Context</p>
                <button class="delete" aria-label="close" onclick="closeContextModal()"></button>
            </header>
            <section class="modal-card-body">
                <div class="field">
                    <label class="label">Name</label>
                    <div class="control">
                        <input type="text" class="input" id="context-name" placeholder="e.g., Acme Corp, Project Alpha" autofocus />
                    </div>
                </div>
                <div class="field">
                    <label class="label">Color</label>
                    <div class="control">
                        <input type="color" class="input" id="context-color" value="#485fc7" />
                    </div>
                </div>
            </section>
            <footer class="modal-card-foot is-flex is-justify-content-flex-end">
                <button onclick="closeContextModal()" class="button">Cancel</button>
                <button onclick="createContext()" class="button is-primary">
                    <span class="icon">
                        <span class="material-symbols-outlined">add</span>
                    </span>
                    <span>Create</span>
                </button>
            </footer>
        </div>
    </div>

    <div class="modal" id="settings-modal">
        <div class="modal-background" onclick="closeSettingsModal()"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Settings</p>
                <button class="delete" aria-label="close" onclick="closeSettingsModal()"></button>
            </header>
            <section class="modal-card-body">
                <div class="field is-horizontal">
                    <div class="field-label is-normal">
                        <label class="label">Theme</label>
                    </div>
                    <div class="field-body">
                        <div class="field">
                            <div class="control">
                                <label class="theme-switch">
                                    <input type="checkbox" id="theme-toggle-switch">
                                    <span class="slider"></span>
                                </label>
                                <p class="help">Toggle dark mode</p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="field is-horizontal">
                    <div class="field-label is-normal">
                        <label class="label">Week Start</label>
                    </div>
                    <div class="field-body">
                        <div class="field">
                            <div class="control">
                                <div class="select is-fullwidth">
                                    <select id="week-start-select">
                                        <option value="0">Sunday</option>
                                        <option value="1">Monday</option>
                                        <option value="2">Tuesday</option>
                                        <option value="3">Wednesday</option>
                                        <option value="4">Thursday</option>
                                        <option value="5">Friday</option>
                                        <option value="6">Saturday</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="field is-horizontal">
                    <div class="field-label is-normal">
                        <label class="label">Timezone</label>
                    </div>
                    <div class="field-body">
                        <div class="field">
                            <div class="control">
                                <div class="select is-fullwidth">
                                    <select id="timezone-select">
                                        <option value="UTC">UTC</option>
                                        <optgroup label="Americas">
                                            <option value="America/New_York">New York (EST/EDT)</option>
                                            <option value="America/Chicago">Chicago (CST/CDT)</option>
                                            <option value="America/Denver">Denver (MST/MDT)</option>
                                            <option value="America/Los_Angeles">Los Angeles (PST/PDT)</option>
                                            <option value="America/Mexico_City">Mexico City</option>
                                            <option value="America/Bogota">Bogotá</option>
                                            <option value="America/Lima">Lima</option>
                                            <option value="America/Santiago">Santiago</option>
                                            <option value="America/Buenos_Aires">Buenos Aires</option>
                                            <option value="America/Sao_Paulo">São Paulo</option>
                                            <option value="America/Caracas">Caracas</option>
                                        </optgroup>
                                        <optgroup label="Europe">
                                            <option value="Europe/London">London (GMT/BST)</option>
                                            <option value="Europe/Paris">Paris (CET/CEST)</option>
                                            <option value="Europe/Berlin">Berlin (CET/CEST)</option>
                                            <option value="Europe/Madrid">Madrid (CET/CEST)</option>
                                            <option value="Europe/Rome">Rome (CET/CEST)</option>
                                            <option value="Europe/Moscow">Moscow (MSK)</option>
                                        </optgroup>
                                        <optgroup label="Asia">
                                            <option value="Asia/Dubai">Dubai (GST)</option>
                                            <option value="Asia/Kolkata">Mumbai/Delhi (IST)</option>
                                            <option value="Asia/Shanghai">Shanghai (CST)</option>
                                            <option value="Asia/Hong_Kong">Hong Kong (HKT)</option>
                                            <option value="Asia/Tokyo">Tokyo (JST)</option>
                                            <option value="Asia/Seoul">Seoul (KST)</option>
                                            <option value="Asia/Singapore">Singapore (SGT)</option>
                                        </optgroup>
                                        <optgroup label="Pacific">
                                            <option value="Australia/Sydney">Sydney (AEDT/AEST)</option>
                                            <option value="Australia/Melbourne">Melbourne (AEDT/AEST)</option>
                                            <option value="Pacific/Auckland">Auckland (NZDT/NZST)</option>
                                        </optgroup>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <footer class="modal-card-foot is-flex is-justify-content-space-between">
                <button onclick="signOutUser()" class="button is-danger is-outlined">
                    <span class="icon">
                        <span class="material-symbols-outlined">logout</span>
                    </span>
                    <span>Sign Out</span>
                </button>
                <div style="display: flex; gap: 0.75rem;">
                    <button onclick="closeSettingsModal()" class="button">Cancel</button>
                    <button onclick="saveSettings()" class="button is-primary">
                        <span class="icon">
                            <span class="material-symbols-outlined">check</span>
                        </span>
                        <span>Save</span>
                    </button>
                </div>
            </footer>
        </div>
    </div>

    <div class="modal" id="onboarding-modal">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Welcome to dailynotes.dev</p>
            </header>
            <section class="modal-card-body">
                <div class="content">
                    <h4>Quick Start Guide</h4>
                    <p><strong>1. Create a Context</strong><br>
                    Contexts help you organize notes by project or client. Click "+ New Context" to get started.</p>

                    <p><strong>2. Write Notes</strong><br>
                    Select a context and start writing. Notes auto-save locally and sync to your Google Drive every 15 seconds.</p>

                    <p><strong>3. Navigate</strong><br>
                    Use the calendar or notes list to browse previous entries. Your last used context is automatically selected when you return.</p>

                    <p><strong>4. Offline-First</strong><br>
                    The app works without internet. Changes sync automatically when you're back online.</p>
                </div>
            </section>
            <footer class="modal-card-foot is-justify-content-center">
                <button onclick="closeOnboardingModal()" class="button is-primary">Got it!</button>
            </footer>
        </div>
    </div>

    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script type="module">

        const updateThemeIcon = () => {
            const theme = document.documentElement.getAttribute('data-theme');
            const themeIcon = document.querySelector('#theme-toggle-menu .material-symbols-outlined');
            if (themeIcon) {
                themeIcon.textContent = theme === 'dark' ? 'light_mode' : 'dark_mode';
            }
        };

        const setTheme = theme => {
            document.documentElement.setAttribute('data-theme', theme);
            const toggleSwitch = document.getElementById('theme-toggle-switch');
            if (toggleSwitch) toggleSwitch.checked = theme === 'dark';
            updateThemeIcon();
        };

        let currentUser, saveTimeout, currentCalendarMonth, currentCalendarYear, notesWithDates = [], userSettings = {};

        // ===== EVENT SYSTEM =====
        const noteEvents = new EventTarget();

        // ===== LOCAL CACHE (IndexedDB) =====
        const localCache = {
            db: null,
            
            async init() {
                return new Promise((resolve, reject) => {
                    const request = indexedDB.open('DailyNotesDB', 1);
                    request.onerror = () => reject(request.error);
                    request.onsuccess = () => {
                        this.db = request.result;
                        resolve();
                    };
                    request.onupgradeneeded = (e) => {
                        const db = e.target.result;
                        if (!db.objectStoreNames.contains('notes')) {
                            db.createObjectStore('notes', {keyPath: 'id'});
                        }
                        if (!db.objectStoreNames.contains('contexts')) {
                            db.createObjectStore('contexts', {keyPath: 'id'});
                        }
                    };
                });
            },

            async saveNote(note) {
                if (!this.db) return;
                const tx = this.db.transaction(['notes'], 'readwrite');
                const store = tx.objectStore('notes');
                const id = `${note.context}-${note.date}`;
                store.put({...note, id, _localTimestamp: Date.now()});
                noteEvents.dispatchEvent(new CustomEvent('note-cached', {detail: note}));
            },

            async getNote(context, date) {
                if (!this.db) return null;
                const tx = this.db.transaction(['notes'], 'readonly');
                const store = tx.objectStore('notes');
                const id = `${context}-${date}`;
                return new Promise((resolve) => {
                    const request = store.get(id);
                    request.onsuccess = () => resolve(request.result);
                    request.onerror = () => resolve(null);
                });
            },

            async saveContexts(contexts) {
                if (!this.db) return;
                const tx = this.db.transaction(['contexts'], 'readwrite');
                const store = tx.objectStore('contexts');
                contexts.forEach(ctx => store.put({...ctx, _localTimestamp: Date.now()}));
            },

            async getContexts() {
                if (!this.db) return [];
                const tx = this.db.transaction(['contexts'], 'readonly');
                const store = tx.objectStore('contexts');
                return new Promise((resolve) => {
                    const request = store.getAll();
                    request.onsuccess = () => resolve(request.result || []);
                    request.onerror = () => resolve([]);
                });
            },

            async saveNotes(notes) {
                if (!this.db) return;
                const tx = this.db.transaction(['notes'], 'readwrite');
                const store = tx.objectStore('notes');
                notes.forEach(note => {
                    const id = `${note.context}-${note.date}`;
                    store.put({...note, id, _localTimestamp: Date.now()});
                });
            },

            async getNotesByContext(context) {
                if (!this.db) return [];
                const tx = this.db.transaction(['notes'], 'readonly');
                const store = tx.objectStore('notes');
                return new Promise((resolve) => {
                    const request = store.getAll();
                    request.onsuccess = () => {
                        const allNotes = request.result || [];
                        resolve(allNotes.filter(n => n.context === context));
                    };
                    request.onerror = () => resolve([]);
                });
            }
        };

        // ===== SYNC QUEUE WITH BATCH WRITES =====
        const syncQueue = {
            queue: [],
            processing: false,
            retryDelay: 2000,
            batchTimer: null,
            batchDelay: 15000, // 15 seconds

            add(operation) {
                // Check if we already have a pending operation for this note
                if (operation.type === 'save-note') {
                    const existingIndex = this.queue.findIndex(
                        op => op.type === 'save-note' &&
                              op.data.context === operation.data.context &&
                              op.data.date === operation.data.date
                    );
                    if (existingIndex !== -1) {
                        // Update existing operation instead of adding new one
                        this.queue[existingIndex] = {...operation, id: Date.now() + Math.random()};
                    } else {
                        this.queue.push({...operation, id: Date.now() + Math.random()});
                    }
                } else {
                    this.queue.push({...operation, id: Date.now() + Math.random()});
                }

                this.updateUI();
                this.scheduleBatch();
            },

            scheduleBatch() {
                // Clear existing timer
                if (this.batchTimer) {
                    clearTimeout(this.batchTimer);
                }

                // Schedule batch processing after delay
                this.batchTimer = setTimeout(() => {
                    this.process();
                }, this.batchDelay);
            },

            updateUI() {
                const pending = this.queue.length;
                noteEvents.dispatchEvent(new CustomEvent('sync-status', {
                    detail: {pending, syncing: this.processing}
                }));
            },

            async process() {
                if (this.processing || this.queue.length === 0) return;
                this.processing = true;
                this.batchTimer = null;
                this.updateUI();

                while (this.queue.length > 0) {
                    const op = this.queue[0];
                    try {
                        await this.executeOperation(op);
                        this.queue.shift();
                        noteEvents.dispatchEvent(new CustomEvent('operation-synced', {detail: op}));
                        this.updateUI();
                    } catch (error) {
                        console.warn('Sync failed, retrying...', error);
                        await new Promise(resolve => setTimeout(resolve, this.retryDelay));
                        this.retryDelay = Math.min(this.retryDelay * 1.5, 30000);
                    }
                }

                this.processing = false;
                this.retryDelay = 2000;
                this.updateUI();
            },

            async executeOperation(op) {
                switch (op.type) {
                    case 'save-note':
                        return await api('/api/notes', {
                            method: 'POST',
                            body: JSON.stringify(op.data)
                        });
                    case 'create-context':
                        return await api('/api/contexts', {
                            method: 'POST',
                            body: JSON.stringify(op.data)
                        });
                    default:
                        throw new Error('Unknown operation type');
                }
            }
        };

        // Initialize cache on load
        localCache.init().catch(err => console.warn('IndexedDB not available', err));

        // ===== SYNC STATUS UI =====
        const syncStatusEl = document.getElementById('sync-status');
        const syncStatusText = document.getElementById('sync-status-text');

        noteEvents.addEventListener('sync-status', (e) => {
            const {pending, syncing} = e.detail;
            
            if (pending > 0) {
                syncStatusEl.classList.add('visible');
                syncStatusEl.classList.remove('synced', 'error');
                syncStatusText.textContent = syncing 
                    ? `Syncing ${pending} change${pending > 1 ? 's' : ''}...`
                    : `${pending} pending`;
            } else {
                // Show "synced" briefly before hiding
                syncStatusEl.classList.add('synced');
                syncStatusEl.classList.remove('error');
                syncStatusText.textContent = 'All synced ✓';
                setTimeout(() => {
                    syncStatusEl.classList.remove('visible', 'synced');
                }, 2000);
            }
        });

        noteEvents.addEventListener('operation-synced', (e) => {
            console.log('Synced to Drive:', e.detail.type);
        });

        noteEvents.addEventListener('note-cached', (e) => {
            console.log('Cached locally:', e.detail);
        });

        const checkAuth = async () => {
            try {
                const response = await fetch('/api/auth/me');
                const data = await response.json();
                if (data.authenticated) {
                    currentUser = data.user;
                    userSettings = data.user.settings || {theme: 'dark', weekStart: 0, timezone: 'UTC'};
                    setTheme(userSettings.theme);
                    showApp();
                    return true;
                }
            } catch (error) {
                console.error('Auth check failed:', error);
            }
            return false;
        };

        const showApp = async (skipAnimation = false) => {
            const authSection = document.getElementById('auth-section');
            const appSection = document.getElementById('app-section');

            if (currentUser) {
                const email = currentUser.email || '';
                document.getElementById('user-email').textContent = email;
            }

            // Initialize app state
            await loadContexts();
            await syncServerTime();
            setTodayDate();
            renderCalendar();
            updateCurrentDateTime();
            updateThemeIcon();

            // Auto-select last used context
            const lastContext = localStorage.getItem('lastContext');
            if (lastContext) {
                const select = document.getElementById('context-select');
                const contextExists = Array.from(select.options).some(opt => opt.value === lastContext);
                if (contextExists) {
                    select.value = lastContext;
                    select.dispatchEvent(new Event('change'));
                }
            }

            if (skipAnimation) {
                // Initial page load - no animation
                authSection.classList.remove('visible');
                appSection.classList.add('visible');
                appSection.style.opacity = '1';
            } else {
                // Transition from auth to app
                authSection.classList.add('fade-out');
                appSection.classList.add('visible');

                setTimeout(() => {
                    authSection.classList.remove('visible', 'fade-out');
                    appSection.classList.add('fade-in');
                }, 400);
            }

            // Check if this is first login
            const hasSeenOnboarding = localStorage.getItem('onboarding_completed');
            if (!hasSeenOnboarding && !skipAnimation) {
                setTimeout(() => {
                    document.getElementById('onboarding-modal').classList.add('is-active');
                }, 900);
            }
        };

        let tokenClient;

        const handleGoogleLogin = async (tokenResponse) => {
            if (tokenResponse.error) {
                showError('OAuth failed: ' + tokenResponse.error);
                return;
            }
            
            try {
                const loginResponse = await fetch('/api/auth/login', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({
                        access_token: tokenResponse.access_token,
                        expires_in: tokenResponse.expires_in || 3600
                    })
                });

                const data = await loginResponse.json();
                if (data.success) {
                    currentUser = data.user;
                    userSettings = data.user.settings || {theme: 'dark', weekStart: 0, timezone: 'UTC'};
                    setTheme(userSettings.theme);
                    showApp(false); // Use animation when logging in
                } else {
                    showError(data.error || 'Login failed');
                }
            } catch (error) {
                showError('Login failed: ' + error.message);
            }
        };

        window.signInWithGoogle = () => {
            if (!tokenClient) {
                tokenClient = google.accounts.oauth2.initTokenClient({
                    client_id: "{{ GoogleClientID }}",
                    scope: 'https://www.googleapis.com/auth/drive.file openid profile email',
                    callback: handleGoogleLogin
                });
            }
            tokenClient.requestAccessToken({ prompt: '' });
        };

        window.signOutUser = async () => {
            try {
                isLoggingOut = true;
                await fetch('/api/auth/logout', {method: 'POST'});
                currentUser = null;
                document.getElementById('auth-section').classList.add('visible');
                document.getElementById('app-section').classList.remove('visible', 'fade-in');
                document.getElementById('app-section').style.opacity = '0';
                document.getElementById('user-email').textContent = '';
                if (tokenClient && google.accounts.oauth2.revoke) {
                    google.accounts.oauth2.revoke(tokenClient.access_token);
                }
                closeSettingsModal();
                
                // Show success message
                const toast = document.createElement('div');
                toast.style.cssText = 'position:fixed;top:1rem;right:1rem;background:#10b981;color:white;padding:1rem;border-radius:0.5rem;box-shadow:0 4px 6px rgba(0,0,0,0.1);z-index:1000;max-width:400px;';
                toast.textContent = 'Signed out successfully';
                document.body.appendChild(toast);
                setTimeout(() => {
                    toast.remove();
                    isLoggingOut = false;
                }, 3000);
            } catch (error) {
                isLoggingOut = false;
                showError('Logout failed');
            }
        };

        // Initialize immediately to prevent flash
        (async () => {
            const isAuthenticated = await checkAuth();

            if (isAuthenticated) {
                // User is authenticated, show app directly
                await showApp(true);
            } else {
                // User is not authenticated, show landing page
                document.getElementById('auth-section').classList.add('visible');
            }

            // Make body visible after determining which section to show
            document.body.classList.add('loaded');
        })();

        window.onload = async () => {
            // Initialize Google OAuth client if not authenticated
            if (!currentUser) {
                tokenClient = google.accounts.oauth2.initTokenClient({
                    client_id: "{{ GoogleClientID }}",
                    scope: 'https://www.googleapis.com/auth/drive.file openid profile email',
                    callback: handleGoogleLogin
                });
            }
        };

        const showError = (message) => {
            const existingError = document.getElementById('error-toast');
            if (existingError) existingError.remove();

            const toast = document.createElement('div');
            toast.id = 'error-toast';
            toast.style.cssText = 'position:fixed;top:1rem;right:1rem;background:#ef4444;color:white;padding:1rem;border-radius:0.5rem;box-shadow:0 4px 6px rgba(0,0,0,0.1);z-index:1000;max-width:400px;';
            toast.textContent = message;
            document.body.appendChild(toast);
            setTimeout(() => toast.remove(), 5000);
        };

        let isLoggingOut = false;

        const api = async (endpoint, options = {}) => {
            try {
                const response = await fetch(endpoint, {
                    ...options,
                    headers: {...options.headers, 'Content-Type': 'application/json'},
                    credentials: 'same-origin'
                });

                if (!response.ok) {
                    const data = await response.json().catch(() => ({}));
                    if (response.status === 401) {
                        currentUser = null;
                        document.getElementById('auth-section').classList.add('visible');
                        document.getElementById('app-section').classList.remove('visible', 'fade-in');
                        document.getElementById('app-section').style.opacity = '0';
                        // Only show session expired message if NOT an intentional logout
                        if (!isLoggingOut) {
                            showError('Session expired. Please login again.');
                        }
                        return;
                    }
                    throw new Error(data.error || `Request failed with status ${response.status}`);
                }

                return await response.json();
            } catch (error) {
                if (!isLoggingOut) {
                    showError(error.message || 'An error occurred');
                }
                throw error;
            }
        };

        const loadContexts = async () => {
            // Try local cache first (instant)
            const cachedContexts = await localCache.getContexts();
            if (cachedContexts.length > 0) {
                renderContextsSelect(cachedContexts);
            }

            // Load from server in background
            try {
                const {contexts} = await api('/api/contexts');
                await localCache.saveContexts(contexts);
                renderContextsSelect(contexts);
            } catch (error) {
                if (cachedContexts.length === 0) {
                    showError('Failed to load contexts. Working offline.');
                }
            }
        };

        const renderContextsSelect = (contexts) => {
            const select = document.getElementById('context-select');
            select.innerHTML = '<option value="">Select context...</option>' +
                contexts.map(c => `<option value="${c.name}" data-color="${c.color || '#485fc7'}">${c.name}</option>`).join('');
            updateSelectColor();
        };

        const updateSelectColor = () => {
            const select = document.getElementById('context-select');
            const indicator = document.getElementById('context-color-indicator');
            const opt = select.options[select.selectedIndex];
            
            if (opt?.dataset.color && opt.value !== '') {
                indicator.style.background = opt.dataset.color;
                indicator.style.opacity = '1';
            } else {
                indicator.style.background = 'var(--bulma-grey-light)';
                indicator.style.opacity = '0.3';
            }
        };

        const getTodayInTimezone = () => {
            const timezone = userSettings.timezone || 'UTC';
            const now = new Date(Date.now() + serverTimeOffset);
            
            // Get date parts in user's timezone
            const formatter = new Intl.DateTimeFormat('en-US', {
                timeZone: timezone,
                year: 'numeric',
                month: '2-digit',
                day: '2-digit'
            });
            
            const parts = formatter.formatToParts(now);
            const year = parts.find(p => p.type === 'year').value;
            const month = parts.find(p => p.type === 'month').value;
            const day = parts.find(p => p.type === 'day').value;
            
            return `${year}-${month}-${day}`;
        };

        const setTodayDate = () => {
            const dateStr = getTodayInTimezone();
            document.getElementById('date-picker').value = dateStr;
            
            const [year, month, day] = dateStr.split('-').map(Number);
            currentCalendarMonth = month - 1;
            currentCalendarYear = year;
        };

        const renderCalendar = () => {
            const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'];
            const dayNamesDefault = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

            const weekStart = userSettings.weekStart || 0;
            const dayNames = [...dayNamesDefault.slice(weekStart), ...dayNamesDefault.slice(0, weekStart)];

            document.getElementById('calendar-month-year').textContent =
                `${monthNames[currentCalendarMonth]} ${currentCalendarYear}`;

            const firstDayOfMonth = new Date(currentCalendarYear, currentCalendarMonth, 1).getDay();
            const adjustedFirstDay = (firstDayOfMonth - weekStart + 7) % 7;
            const daysInMonth = new Date(currentCalendarYear, currentCalendarMonth + 1, 0).getDate();
            const daysInPrevMonth = new Date(currentCalendarYear, currentCalendarMonth, 0).getDate();

            const grid = document.getElementById('calendar-grid');
            grid.innerHTML = dayNames.map(day =>
                `<div class="calendar-day-header">${day}</div>`
            ).join('');

            const selectedDate = document.getElementById('date-picker').value;
            const today = getTodayInTimezone();

            for (let i = adjustedFirstDay - 1; i >= 0; i--) {
                const day = daysInPrevMonth - i;
                grid.innerHTML += `<div class="calendar-day other-month">${day}</div>`;
            }

            for (let day = 1; day <= daysInMonth; day++) {
                const dateStr = `${currentCalendarYear}-${String(currentCalendarMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                const classes = ['calendar-day'];
                if (dateStr === today) classes.push('today');
                if (dateStr === selectedDate) classes.push('selected');
                if (notesWithDates.includes(dateStr)) classes.push('has-note');

                grid.innerHTML += `<div class="${classes.join(' ')}" onclick="selectDateFromCalendar('${dateStr}')">${day}</div>`;
            }

            const totalCells = adjustedFirstDay + daysInMonth;
            const remainingCells = totalCells % 7 === 0 ? 0 : 7 - (totalCells % 7);
            for (let day = 1; day <= remainingCells; day++) {
                grid.innerHTML += `<div class="calendar-day other-month">${day}</div>`;
            }
        };

        window.selectDateFromCalendar = (dateStr) => {
            // Update date picker
            document.getElementById('date-picker').value = dateStr;
            
            // Sync calendar visual state
            renderCalendar();
            
            // Sync list selection
            updateActiveNoteInList();
            
            // Scroll to note in list if exists
            scrollToNoteInList(dateStr);
            
            // Load note for this date
            loadNote();
        };

        document.getElementById('prev-month').addEventListener('click', () => {
            currentCalendarMonth--;
            if (currentCalendarMonth < 0) {
                currentCalendarMonth = 11;
                currentCalendarYear--;
            }
            renderCalendar();
        });

        document.getElementById('next-month').addEventListener('click', () => {
            currentCalendarMonth++;
            if (currentCalendarMonth > 11) {
                currentCalendarMonth = 0;
                currentCalendarYear++;
            }
            renderCalendar();
        });

        // ===== AUTO-EXPAND TEXTAREA =====
        const autoExpandTextarea = (textarea) => {
            textarea.style.height = 'auto';
            textarea.style.height = Math.max(textarea.scrollHeight, parseInt(getComputedStyle(textarea).minHeight)) + 'px';
        };

        const loadNote = async () => {
            const context = document.getElementById('context-select').value;
            const date = document.getElementById('date-picker').value;
            const editor = document.getElementById('note-editor');

            if (!context || !date) {
                editor.disabled = true;
                editor.placeholder = 'Select a context to start writing notes...';
                return;
            }

            editor.disabled = false;
            editor.placeholder = 'Daily Notes\n\nWhat did you work on today?';

            // Try local cache first (instant load)
            const cachedNote = await localCache.getNote(context, date);
            if (cachedNote) {
                editor.value = cachedNote.content || '';
                autoExpandTextarea(editor);
                updateSaveIndicator('');
            }

            // Then load from server in background
            try {
                const {note} = await api(`/api/notes?context=${encodeURIComponent(context)}&date=${date}`);
                editor.value = note.content || '';
                autoExpandTextarea(editor);
                // Update cache with server data
                await localCache.saveNote({context, date, content: note.content});
                updateSaveIndicator('');
            } catch (error) {
                // If cached version exists, user already sees it
                if (!cachedNote) {
                    console.error('Failed to load note:', error);
                    showError('Failed to load note. Working offline.');
                }
            }
        };

        const saveNote = async () => {
            const context = document.getElementById('context-select').value;
            const date = document.getElementById('date-picker').value;
            const content = document.getElementById('note-editor').value;
            if (!context || !date) return;

            // Note: There is only ONE note per date per context
            // This is guaranteed by the backend (upsert) and the cache key (context-date)
            const note = {context, date, content};

            // 1. Save to local cache immediately (optimistic)
            await localCache.saveNote(note);
            updateSaveIndicator('saved');
            
            // 2. Update UI optimistically (refresh list to show/update note)
            loadNotesList();

            // 3. Queue for background sync with Drive
            syncQueue.add({
                type: 'save-note',
                data: note
            });
        };

        const updateSaveIndicator = status => {
            const ind = document.getElementById('save-indicator');
            ind.className = `save-indicator ${status}`;

            // Show "Saved locally" since we're batching sync
            if (status === 'saved') {
                ind.textContent = 'Saved locally ✓';
                setTimeout(() => ind.textContent = '', 2000);
            } else {
                ind.textContent = '';
            }
        };

        const loadNotesList = async () => {
            const context = document.getElementById('context-select').value;
            const notesList = document.getElementById('notes-list');

            if (!context) {
                notesList.innerHTML = '<li class="empty-state">Select a context to view notes</li>';
                notesWithDates = [];
                renderCalendar();
                return;
            }

            try {
                const data = await api(`/api/notes/list?context=${encodeURIComponent(context)}&limit=50`);
                const notes = data.notes || [];

                notesWithDates = notes.map(note => note.date);

                if (notes.length === 0) {
                    notesList.innerHTML = '<li class="empty-state">No notes yet</li>';
                    renderCalendar();
                    return;
                }

                notesList.innerHTML = notes.map(note => {
                    // Parse date in local timezone to avoid UTC offset issues
                    const [year, month, day] = note.date.split('-').map(Number);
                    const dateObj = new Date(year, month - 1, day);
                    const formattedDate = dateObj.toLocaleDateString('en-US', {
                        weekday: 'long',
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric'
                    });

                    return `
                        <li>
                            <a data-date="${note.date}" onclick="selectNoteFromList('${note.date}')">
                                ${formattedDate}
                            </a>
                        </li>
                    `;
                }).join('');

                updateActiveNoteInList();
                renderCalendar();
            } catch (error) {
                console.error('Failed to load notes list:', error);
                notesList.innerHTML = '<li class="empty-state">Failed to load notes</li>';
            }
        };

        const updateActiveNoteInList = () => {
            const currentDate = document.getElementById('date-picker').value;
            document.querySelectorAll('.menu-list a').forEach(link => {
                if (link.dataset.date === currentDate) {
                    link.classList.add('is-active');
                } else {
                    link.classList.remove('is-active');
                }
            });
        };

        const scrollToNoteInList = (date) => {
            const noteLink = document.querySelector(`.menu-list a[data-date="${date}"]`);
            if (noteLink) {
                // Scroll into view smoothly
                noteLink.scrollIntoView({
                    behavior: 'smooth',
                    block: 'nearest'
                });
            }
        };

        window.selectNoteFromList = (date) => {
            // Update date picker
            document.getElementById('date-picker').value = date;

            // Parse the date (date is in format YYYY-MM-DD)
            const dateParts = date.split('-');
            const year = parseInt(dateParts[0]);
            const month = parseInt(dateParts[1]) - 1; // month is 0-indexed
            const day = parseInt(dateParts[2]);

            // Update calendar month to show the selected date
            currentCalendarMonth = month;
            currentCalendarYear = year;

            // Re-render calendar to highlight the selected date
            renderCalendar();

            // Sync list selection
            updateActiveNoteInList();

            // Load note for this date
            loadNote();
        };

        // ===== PREFETCH ===== 
        // Disabled: Too aggressive, causes excessive server load
        // const prefetchMonthNotes = async (context) => {
        //     if (!context) return;
        //     const today = new Date();
        //     const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
        //     const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
        //     const dates = [];
        //     for (let d = new Date(firstDay); d <= lastDay; d.setDate(d.getDate() + 1)) {
        //         dates.push(new Date(d).toISOString().split('T')[0]);
        //     }
        //     Promise.all(dates.map(async (date) => {
        //         try {
        //             const {note} = await api(`/api/notes?context=${encodeURIComponent(context)}&date=${date}`);
        //             await localCache.saveNote({context, date, content: note.content});
        //         } catch (error) {
        //             console.debug('Prefetch failed for', date, error);
        //         }
        //     })).then(() => {
        //         console.log('Prefetch completed for', context);
        //     });
        // };

        document.getElementById('context-select').addEventListener('change', async () => {
            const editor = document.getElementById('note-editor');
            const context = document.getElementById('context-select').value;

            // Flush pending saves before switching
            if (syncQueue.queue.length > 0) {
                await syncQueue.process();
            }

            // Reset editor
            if (context) {
                editor.disabled = false;
                editor.placeholder = 'Daily Notes\n\nWhat did you work on today?';
                // Save last used context to localStorage
                localStorage.setItem('lastContext', context);
            } else {
                editor.disabled = true;
                editor.placeholder = 'Select a context to start writing notes...';
                editor.value = '';
            }

            // Reset to today's date when changing context
            setTodayDate();

            // Update UI
            updateSelectColor();

            // Load notes for this context (will update notesWithDates)
            await loadNotesList();

            // Update calendar to reflect notes in this context
            renderCalendar();

            // Load today's note for this context
            loadNote();

            // Note: Prefetch disabled to reduce server load
            // if (context) {
            //     prefetchMonthNotes(context);
            // }
        });
        
        document.getElementById('date-picker').addEventListener('change', async () => {
            // Flush pending saves before switching dates
            if (syncQueue.queue.length > 0) {
                await syncQueue.process();
            }
            
            // Get selected date
            const dateStr = document.getElementById('date-picker').value;
            const selectedDate = new Date(dateStr);
            
            // Update calendar month if needed
            if (selectedDate.getMonth() !== currentCalendarMonth || 
                selectedDate.getFullYear() !== currentCalendarYear) {
                currentCalendarMonth = selectedDate.getMonth();
                currentCalendarYear = selectedDate.getFullYear();
            }
            
            // Sync calendar and list
            renderCalendar();
            updateActiveNoteInList();
            scrollToNoteInList(dateStr);
            
            // Load note
            loadNote();
        });

        const editor = document.getElementById('note-editor');

        editor.addEventListener('input', () => {
            const context = document.getElementById('context-select').value;
            if (!context) return;

            // Auto-expand textarea
            autoExpandTextarea(editor);

            clearTimeout(saveTimeout);
            // Reduced debounce since save is now instant (optimistic)
            saveTimeout = setTimeout(saveNote, 500);
        });

        window.showNewContextModal = () => {
            const modal = document.getElementById('context-modal');
            modal.classList.add('is-active');
            document.getElementById('context-name').value = '';
            document.getElementById('context-color').value = '#485fc7';
        };

        window.closeContextModal = () => document.getElementById('context-modal').classList.remove('is-active');

        window.createContext = async () => {
            const name = document.getElementById('context-name').value.trim();
            const color = document.getElementById('context-color').value;
            if (!name) return;

            const newContext = {
                id: `temp-${Date.now()}`,
                name,
                color,
                created_at: new Date().toISOString()
            };

            // 1. Update UI immediately (optimistic)
            const cachedContexts = await localCache.getContexts();
            cachedContexts.push(newContext);
            await localCache.saveContexts(cachedContexts);
            renderContextsSelect(cachedContexts);
            
            closeContextModal();
            document.getElementById('context-select').value = name;
            updateSelectColor();

            // 2. Queue for background sync
            syncQueue.add({
                type: 'create-context',
                data: {name, color}
            });

            await loadNotesList();
            await loadNote();
        };

        document.getElementById('context-name').addEventListener('keypress', e => {
            if (e.key === 'Enter') createContext();
        });

        window.showSettingsModal = () => {
            const modal = document.getElementById('settings-modal');
            document.getElementById('theme-toggle-switch').checked = userSettings.theme === 'dark';
            document.getElementById('week-start-select').value = String(userSettings.weekStart);
            document.getElementById('timezone-select').value = userSettings.timezone;
            modal.classList.add('is-active');
        };

        window.closeSettingsModal = () => document.getElementById('settings-modal').classList.remove('is-active');

        window.closeOnboardingModal = () => {
            document.getElementById('onboarding-modal').classList.remove('is-active');
            localStorage.setItem('onboarding_completed', 'true');
        };

        window.saveSettings = async () => {
            const theme = document.getElementById('theme-toggle-switch').checked ? 'dark' : 'light';
            const weekStart = parseInt(document.getElementById('week-start-select').value);
            const timezone = document.getElementById('timezone-select').value;

            try {
                await api('/api/settings', {
                    method: 'PUT',
                    body: JSON.stringify({theme, weekStart, timezone})
                });
                userSettings = {theme, weekStart, timezone};
                setTheme(theme);
                renderCalendar();
                closeSettingsModal();
            } catch (error) {
                console.error('Failed to save settings:', error);
            }
        };

        document.getElementById('theme-toggle-switch').addEventListener('change', (e) => {
            setTheme(e.target.checked ? 'dark' : 'light');
        });

        document.getElementById('theme-toggle-menu').addEventListener('click', async (e) => {
            e.preventDefault();
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            setTheme(newTheme);
            userSettings.theme = newTheme;
            try {
                await api('/api/settings', {
                    method: 'PUT',
                    body: JSON.stringify({theme: newTheme, weekStart: userSettings.weekStart, timezone: userSettings.timezone})
                });
            } catch (err) {
                console.error('Failed to save theme:', err);
            }
        });

        let serverTimeOffset = 0;

        const syncServerTime = async () => {
            try {
                const timezone = userSettings.timezone || 'UTC';
                const clientTime = Date.now();
                const response = await fetch(`/api/time?timezone=${encodeURIComponent(timezone)}`);
                const data = await response.json();
                const serverTime = data.timestamp * 1000;
                const roundTripTime = Date.now() - clientTime;
                serverTimeOffset = serverTime - clientTime + (roundTripTime / 2);
            } catch (error) {
                console.error('Failed to sync server time:', error);
            }
        };

        let lastKnownDate = null;

        const updateCurrentDateTime = () => {
            const timezone = userSettings.timezone || 'UTC';
            const now = new Date(Date.now() + serverTimeOffset);

            const timeOptions = {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false,
                timeZone: timezone
            };

            const dateOptions = {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                timeZone: timezone
            };

            const timeString = now.toLocaleTimeString('en-US', timeOptions);
            const dateString = now.toLocaleDateString('en-US', dateOptions);

            document.getElementById('current-time').textContent = timeString;
            document.getElementById('current-date').textContent = dateString;

            // Check if day changed and update calendar
            const currentDate = getTodayInTimezone();
            if (lastKnownDate && lastKnownDate !== currentDate) {
                renderCalendar();
            }
            lastKnownDate = currentDate;
        };

        syncServerTime();
        setInterval(updateCurrentDateTime, 1000);
        setInterval(syncServerTime, 60000);

        // ===== KEYBOARD SHORTCUTS =====
        document.addEventListener('keydown', (e) => {
            const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
            const modKey = isMac ? e.metaKey : e.ctrlKey;

            // Ignore shortcuts if user is typing in an input/textarea
            const isInputFocused = ['INPUT', 'TEXTAREA'].includes(document.activeElement?.tagName);

            // Cmd/Ctrl+K: Focus context selector
            if (modKey && e.key === 'k') {
                e.preventDefault();
                document.getElementById('context-select').focus();
                return;
            }

            // Cmd/Ctrl+S: Force sync
            if (modKey && e.key === 's') {
                e.preventDefault();
                if (syncQueue.queue.length > 0) {
                    syncQueue.process();
                }
                return;
            }

            // Cmd/Ctrl+/: Focus editor
            if (modKey && e.key === '/') {
                e.preventDefault();
                const editor = document.getElementById('note-editor');
                if (!editor.disabled) {
                    editor.focus();
                }
                return;
            }

            // Escape: Close modals
            if (e.key === 'Escape') {
                const contextModal = document.getElementById('context-modal');
                const settingsModal = document.getElementById('settings-modal');
                const onboardingModal = document.getElementById('onboarding-modal');

                if (contextModal.classList.contains('is-active')) {
                    closeContextModal();
                } else if (settingsModal.classList.contains('is-active')) {
                    closeSettingsModal();
                } else if (onboardingModal.classList.contains('is-active')) {
                    closeOnboardingModal();
                }
                return;
            }
        });

        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/static/sw.js');
        }
    </script>
</body>
</html>
